   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"LSM9DS1_Driver.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	TimerId,4,4
  20              		.comm	Status,4,4
  21              		.comm	WriteTimerId,4,4
  22              		.comm	WriteTimerStatus,4,4
  23              		.comm	TimerIdReadBytes,4,4
  24              		.comm	StatusReadBytes,4,4
  25              		.comm	settings,40,4
  26              		.comm	gBias,12,4
  27              		.comm	aBias,12,4
  28              		.comm	mBias,12,4
  29              		.comm	gBiasRaw,6,4
  30              		.comm	aBiasRaw,6,4
  31              		.comm	mBiasRaw,6,4
  32              		.comm	_autoCalc,1,1
  33              		.comm	_mAddress,1,1
  34              		.comm	_xgAddress,1,1
  35              		.comm	gRes,4,4
  36              		.comm	aRes,4,4
  37              		.comm	mRes,4,4
  38              		.comm	gx,2,2
  39              		.comm	gy,2,2
  40              		.comm	gz,2,2
  41              		.comm	ax,2,2
  42              		.comm	ay,2,2
  43              		.comm	az,2,2
  44              		.comm	mx,2,2
  45              		.comm	my,2,2
  46              		.comm	mz,2,2
  47              		.comm	temperature,2,2
  48              		.global	TimerIdReadMeasurements
  49              		.bss
  50              		.align	2
  53              	TimerIdReadMeasurements:
  54 0000 00000000 		.space	4
  55              		.global	StatusTimerReadMeasurements
  56              		.data
  57              		.align	2
  60              	StatusTimerReadMeasurements:
  61 0000 02000000 		.word	2
  62              		.global	readingAllowed
  65              	readingAllowed:
  66 0004 01       		.byte	1
  67              		.comm	pomiaryAccel,600,4
  68              		.comm	adrAndData,23,4
  69              		.global	counter
  70              		.bss
  71              		.align	2
  74              	counter:
  75 0004 00000000 		.space	4
  76              		.global	magSensitivity
  77              		.data
  78 0005 000000   		.align	2
  81              	magSensitivity:
  82 0008 F7CC1239 		.word	957533431
  83 000c 240B9839 		.word	966265636
  84 0010 9F71E139 		.word	971075999
  85 0014 240B183A 		.word	974654244
  86              		.section	.text.startMeasurements,"ax",%progbits
  87              		.align	2
  88              		.global	startMeasurements
  89              		.thumb
  90              		.thumb_func
  92              	startMeasurements:
  93              	.LFB117:
  94              		.file 1 "../LSM9DS1_Driver.c"
   1:../LSM9DS1_Driver.c **** /*
   2:../LSM9DS1_Driver.c ****  * LSM9DS1_Driver.c
   3:../LSM9DS1_Driver.c ****  *
   4:../LSM9DS1_Driver.c ****  *  Created on: 08-02-2016
   5:../LSM9DS1_Driver.c ****  *      Author: Mateusz
   6:../LSM9DS1_Driver.c ****  */
   7:../LSM9DS1_Driver.c **** #include "LSM9DS1_Driver.h"
   8:../LSM9DS1_Driver.c **** #include "LSM9DS1_Registers.h"
   9:../LSM9DS1_Driver.c **** #include "LSM9DS1_Types.h"
  10:../LSM9DS1_Driver.c **** #include "FIFO_functions.h"
  11:../LSM9DS1_Driver.c **** 
  12:../LSM9DS1_Driver.c **** #include <stdint.h>
  13:../LSM9DS1_Driver.c **** #include <inttypes.h>
  14:../LSM9DS1_Driver.c **** #include <math.h>
  15:../LSM9DS1_Driver.c **** #include <stdlib.h>
  16:../LSM9DS1_Driver.c **** 
  17:../LSM9DS1_Driver.c **** //#define DELAY 10000
  18:../LSM9DS1_Driver.c **** #define DELAY 100
  19:../LSM9DS1_Driver.c **** 
  20:../LSM9DS1_Driver.c **** #define LSM9DS1_M	0x1E // Would be 0x1C if SDO_M is LOW
  21:../LSM9DS1_Driver.c **** #define LSM9DS1_AG	0x6B // Would be 0x6A if SDO_AG is LOW
  22:../LSM9DS1_Driver.c **** 
  23:../LSM9DS1_Driver.c **** #define TRUE 1
  24:../LSM9DS1_Driver.c **** #define FALSE 0
  25:../LSM9DS1_Driver.c **** 
  26:../LSM9DS1_Driver.c **** handle_t TimerIdReadMeasurements = 0;
  27:../LSM9DS1_Driver.c **** uint32_t StatusTimerReadMeasurements = SYSTM001_ERROR;
  28:../LSM9DS1_Driver.c **** 
  29:../LSM9DS1_Driver.c **** volatile bool readingAllowed = TRUE;
  30:../LSM9DS1_Driver.c **** 
  31:../LSM9DS1_Driver.c **** accel pomiaryAccel[100];
  32:../LSM9DS1_Driver.c **** accel pomiaryAccel[100];
  33:../LSM9DS1_Driver.c **** 
  34:../LSM9DS1_Driver.c **** addressAndData adrAndData;
  35:../LSM9DS1_Driver.c **** 
  36:../LSM9DS1_Driver.c **** int counter = 0;
  37:../LSM9DS1_Driver.c **** 
  38:../LSM9DS1_Driver.c **** float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};
  39:../LSM9DS1_Driver.c **** 
  40:../LSM9DS1_Driver.c **** void startMeasurements(void)
  41:../LSM9DS1_Driver.c **** {
  95              		.loc 1 41 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 1, uses_anonymous_args = 0
  99 0000 80B5     		push	{r7, lr}
 100              	.LCFI0:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 7, -8
 103              		.cfi_offset 14, -4
 104 0002 00AF     		add	r7, sp, #0
 105              	.LCFI1:
 106              		.cfi_def_cfa_register 7
  42:../LSM9DS1_Driver.c **** 	TimerIdReadMeasurements=SYSTM001_CreateTimer(2,SYSTM001_PERIODIC,timerHandlerReceiveOneMeasurement
 107              		.loc 1 42 0
 108 0004 4FF00200 		mov	r0, #2
 109 0008 4FF00101 		mov	r1, #1
 110 000c 40F20002 		movw	r2, #:lower16:timerHandlerReceiveOneMeasurementEachSensor
 111 0010 C0F20002 		movt	r2, #:upper16:timerHandlerReceiveOneMeasurementEachSensor
 112 0014 40F20003 		movw	r3, #:lower16:adrAndData
 113 0018 C0F20003 		movt	r3, #:upper16:adrAndData
 114 001c FFF7FEFF 		bl	SYSTM001_CreateTimer
 115 0020 0246     		mov	r2, r0
 116 0022 40F20003 		movw	r3, #:lower16:TimerIdReadMeasurements
 117 0026 C0F20003 		movt	r3, #:upper16:TimerIdReadMeasurements
 118 002a 1A60     		str	r2, [r3, #0]
  43:../LSM9DS1_Driver.c **** 	SYSTM001_StartTimer(TimerIdReadMeasurements);
 119              		.loc 1 43 0
 120 002c 40F20003 		movw	r3, #:lower16:TimerIdReadMeasurements
 121 0030 C0F20003 		movt	r3, #:upper16:TimerIdReadMeasurements
 122 0034 1B68     		ldr	r3, [r3, #0]
 123 0036 1846     		mov	r0, r3
 124 0038 FFF7FEFF 		bl	SYSTM001_StartTimer
  44:../LSM9DS1_Driver.c **** }
 125              		.loc 1 44 0
 126 003c 80BD     		pop	{r7, pc}
 127              		.cfi_endproc
 128              	.LFE117:
 130 003e 00BF     		.section	.text.readAndSendMeasurements,"ax",%progbits
 131              		.align	2
 132              		.global	readAndSendMeasurements
 133              		.thumb
 134              		.thumb_func
 136              	readAndSendMeasurements:
 137              	.LFB118:
  45:../LSM9DS1_Driver.c **** 
  46:../LSM9DS1_Driver.c **** void readAndSendMeasurements(void (*sendFunction)(char *str))
  47:../LSM9DS1_Driver.c **** {
 138              		.loc 1 47 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 24
 141              		@ frame_needed = 1, uses_anonymous_args = 0
 142 0000 80B5     		push	{r7, lr}
 143              	.LCFI2:
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 7, -8
 146              		.cfi_offset 14, -4
 147 0002 86B0     		sub	sp, sp, #24
 148              	.LCFI3:
 149              		.cfi_def_cfa_offset 32
 150 0004 00AF     		add	r7, sp, #0
 151              	.LCFI4:
 152              		.cfi_def_cfa_register 7
 153 0006 7860     		str	r0, [r7, #4]
  48:../LSM9DS1_Driver.c **** 	if(!readingAllowed)
 154              		.loc 1 48 0
 155 0008 40F20003 		movw	r3, #:lower16:readingAllowed
 156 000c C0F20003 		movt	r3, #:upper16:readingAllowed
 157 0010 1B78     		ldrb	r3, [r3, #0]
 158 0012 DBB2     		uxtb	r3, r3
 159 0014 002B     		cmp	r3, #0
 160 0016 40F06B81 		bne	.L3
 161              	.LBB2:
  49:../LSM9DS1_Driver.c **** 	{
  50:../LSM9DS1_Driver.c **** 
  51:../LSM9DS1_Driver.c **** 		int16_t accelX = (adrAndData.dane[1] << 8) | adrAndData.dane[0]; // Store x-axis values into gx
 162              		.loc 1 51 0
 163 001a 40F20003 		movw	r3, #:lower16:adrAndData
 164 001e C0F20003 		movt	r3, #:upper16:adrAndData
 165 0022 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 166 0024 4FEA0323 		lsl	r3, r3, #8
 167 0028 9AB2     		uxth	r2, r3
 168 002a 40F20003 		movw	r3, #:lower16:adrAndData
 169 002e C0F20003 		movt	r3, #:upper16:adrAndData
 170 0032 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 171 0034 1343     		orrs	r3, r3, r2
 172 0036 FB82     		strh	r3, [r7, #22]	@ movhi
  52:../LSM9DS1_Driver.c **** 
  53:../LSM9DS1_Driver.c **** 		int16_t accelY = (adrAndData.dane[3] << 8) | adrAndData.dane[2]; // Store y-axis values into gy
 173              		.loc 1 53 0
 174 0038 40F20003 		movw	r3, #:lower16:adrAndData
 175 003c C0F20003 		movt	r3, #:upper16:adrAndData
 176 0040 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 177 0042 4FEA0323 		lsl	r3, r3, #8
 178 0046 9AB2     		uxth	r2, r3
 179 0048 40F20003 		movw	r3, #:lower16:adrAndData
 180 004c C0F20003 		movt	r3, #:upper16:adrAndData
 181 0050 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 182 0052 1343     		orrs	r3, r3, r2
 183 0054 FB81     		strh	r3, [r7, #14]	@ movhi
  54:../LSM9DS1_Driver.c **** 
  55:../LSM9DS1_Driver.c **** 		int16_t accelZ = (adrAndData.dane[5] << 8) | adrAndData.dane[4]; // Store z-axis values into gz
 184              		.loc 1 55 0
 185 0056 40F20003 		movw	r3, #:lower16:adrAndData
 186 005a C0F20003 		movt	r3, #:upper16:adrAndData
 187 005e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 188 0060 4FEA0323 		lsl	r3, r3, #8
 189 0064 9AB2     		uxth	r2, r3
 190 0066 40F20003 		movw	r3, #:lower16:adrAndData
 191 006a C0F20003 		movt	r3, #:upper16:adrAndData
 192 006e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 193 0070 1343     		orrs	r3, r3, r2
 194 0072 BB81     		strh	r3, [r7, #12]	@ movhi
  56:../LSM9DS1_Driver.c **** 
  57:../LSM9DS1_Driver.c **** 		if (_autoCalc) //kalibracja
 195              		.loc 1 57 0
 196 0074 40F20003 		movw	r3, #:lower16:_autoCalc
 197 0078 C0F20003 		movt	r3, #:upper16:_autoCalc
 198 007c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 199 007e 002B     		cmp	r3, #0
 200 0080 1DD0     		beq	.L4
  58:../LSM9DS1_Driver.c **** 		{
  59:../LSM9DS1_Driver.c **** 			accelX -= aBiasRaw[X_AXIS];
 201              		.loc 1 59 0
 202 0082 FA8A     		ldrh	r2, [r7, #22]
 203 0084 40F20003 		movw	r3, #:lower16:aBiasRaw
 204 0088 C0F20003 		movt	r3, #:upper16:aBiasRaw
 205 008c 1B88     		ldrh	r3, [r3, #0]
 206 008e 9BB2     		uxth	r3, r3
 207 0090 D31A     		subs	r3, r2, r3
 208 0092 9BB2     		uxth	r3, r3
 209 0094 FB82     		strh	r3, [r7, #22]	@ movhi
  60:../LSM9DS1_Driver.c **** 			accelX -= aBiasRaw[Y_AXIS];
 210              		.loc 1 60 0
 211 0096 FA8A     		ldrh	r2, [r7, #22]
 212 0098 40F20003 		movw	r3, #:lower16:aBiasRaw
 213 009c C0F20003 		movt	r3, #:upper16:aBiasRaw
 214 00a0 5B88     		ldrh	r3, [r3, #2]
 215 00a2 9BB2     		uxth	r3, r3
 216 00a4 D31A     		subs	r3, r2, r3
 217 00a6 9BB2     		uxth	r3, r3
 218 00a8 FB82     		strh	r3, [r7, #22]	@ movhi
  61:../LSM9DS1_Driver.c **** 			accelX -= aBiasRaw[Z_AXIS];
 219              		.loc 1 61 0
 220 00aa FA8A     		ldrh	r2, [r7, #22]
 221 00ac 40F20003 		movw	r3, #:lower16:aBiasRaw
 222 00b0 C0F20003 		movt	r3, #:upper16:aBiasRaw
 223 00b4 9B88     		ldrh	r3, [r3, #4]
 224 00b6 9BB2     		uxth	r3, r3
 225 00b8 D31A     		subs	r3, r2, r3
 226 00ba 9BB2     		uxth	r3, r3
 227 00bc FB82     		strh	r3, [r7, #22]	@ movhi
 228              	.L4:
  62:../LSM9DS1_Driver.c **** 		}
  63:../LSM9DS1_Driver.c **** 
  64:../LSM9DS1_Driver.c **** 		accelX = calcAccel(accelX);
 229              		.loc 1 64 0
 230 00be B7F91630 		ldrsh	r3, [r7, #22]
 231 00c2 1846     		mov	r0, r3
 232 00c4 FFF7FEFF 		bl	calcAccel
 233 00c8 07EE900A 		fmsr	s15, r0
 234 00cc FDEEE77A 		ftosizs	s15, s15
 235 00d0 17EE903A 		fmrs	r3, s15	@ int
 236 00d4 FB82     		strh	r3, [r7, #22]	@ movhi
  65:../LSM9DS1_Driver.c **** 		accelY = calcAccel(accelY);
 237              		.loc 1 65 0
 238 00d6 B7F90E30 		ldrsh	r3, [r7, #14]
 239 00da 1846     		mov	r0, r3
 240 00dc FFF7FEFF 		bl	calcAccel
 241 00e0 07EE900A 		fmsr	s15, r0
 242 00e4 FDEEE77A 		ftosizs	s15, s15
 243 00e8 17EE903A 		fmrs	r3, s15	@ int
 244 00ec FB81     		strh	r3, [r7, #14]	@ movhi
  66:../LSM9DS1_Driver.c **** 		accelZ = calcAccel(accelZ);
 245              		.loc 1 66 0
 246 00ee B7F90C30 		ldrsh	r3, [r7, #12]
 247 00f2 1846     		mov	r0, r3
 248 00f4 FFF7FEFF 		bl	calcAccel
 249 00f8 07EE900A 		fmsr	s15, r0
 250 00fc FDEEE77A 		ftosizs	s15, s15
 251 0100 17EE903A 		fmrs	r3, s15	@ int
 252 0104 BB81     		strh	r3, [r7, #12]	@ movhi
  67:../LSM9DS1_Driver.c **** 
  68:../LSM9DS1_Driver.c **** 		pomiaryAccel[counter].ax = accelX;
 253              		.loc 1 68 0
 254 0106 40F20003 		movw	r3, #:lower16:counter
 255 010a C0F20003 		movt	r3, #:upper16:counter
 256 010e 1968     		ldr	r1, [r3, #0]
 257 0110 40F20002 		movw	r2, #:lower16:pomiaryAccel
 258 0114 C0F20002 		movt	r2, #:upper16:pomiaryAccel
 259 0118 0B46     		mov	r3, r1
 260 011a 4FEA4303 		lsl	r3, r3, #1
 261 011e 5B18     		adds	r3, r3, r1
 262 0120 4FEA4303 		lsl	r3, r3, #1
 263 0124 D318     		adds	r3, r2, r3
 264 0126 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 265 0128 1A80     		strh	r2, [r3, #0]	@ movhi
  69:../LSM9DS1_Driver.c **** 		pomiaryAccel[counter].ay = accelY;
 266              		.loc 1 69 0
 267 012a 40F20003 		movw	r3, #:lower16:counter
 268 012e C0F20003 		movt	r3, #:upper16:counter
 269 0132 1968     		ldr	r1, [r3, #0]
 270 0134 40F20002 		movw	r2, #:lower16:pomiaryAccel
 271 0138 C0F20002 		movt	r2, #:upper16:pomiaryAccel
 272 013c 0B46     		mov	r3, r1
 273 013e 4FEA4303 		lsl	r3, r3, #1
 274 0142 5B18     		adds	r3, r3, r1
 275 0144 4FEA4303 		lsl	r3, r3, #1
 276 0148 D318     		adds	r3, r2, r3
 277 014a FA89     		ldrh	r2, [r7, #14]	@ movhi
 278 014c 5A80     		strh	r2, [r3, #2]	@ movhi
  70:../LSM9DS1_Driver.c **** 		pomiaryAccel[counter].az = accelZ;
 279              		.loc 1 70 0
 280 014e 40F20003 		movw	r3, #:lower16:counter
 281 0152 C0F20003 		movt	r3, #:upper16:counter
 282 0156 1968     		ldr	r1, [r3, #0]
 283 0158 40F20002 		movw	r2, #:lower16:pomiaryAccel
 284 015c C0F20002 		movt	r2, #:upper16:pomiaryAccel
 285 0160 0B46     		mov	r3, r1
 286 0162 4FEA4303 		lsl	r3, r3, #1
 287 0166 5B18     		adds	r3, r3, r1
 288 0168 4FEA4303 		lsl	r3, r3, #1
 289 016c D318     		adds	r3, r2, r3
 290 016e BA89     		ldrh	r2, [r7, #12]	@ movhi
 291 0170 9A80     		strh	r2, [r3, #4]	@ movhi
  71:../LSM9DS1_Driver.c **** 
  72:../LSM9DS1_Driver.c **** 		int16_t gyroX = (adrAndData.dane[7] << 1) | adrAndData.dane[6];
 292              		.loc 1 72 0
 293 0172 40F20003 		movw	r3, #:lower16:adrAndData
 294 0176 C0F20003 		movt	r3, #:upper16:adrAndData
 295 017a DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 296 017c 4FEA4303 		lsl	r3, r3, #1
 297 0180 9AB2     		uxth	r2, r3
 298 0182 40F20003 		movw	r3, #:lower16:adrAndData
 299 0186 C0F20003 		movt	r3, #:upper16:adrAndData
 300 018a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 301 018c 1343     		orrs	r3, r3, r2
 302 018e BB82     		strh	r3, [r7, #20]	@ movhi
  73:../LSM9DS1_Driver.c **** 		int16_t gyroY = (adrAndData.dane[9] << 1) | adrAndData.dane[8];
 303              		.loc 1 73 0
 304 0190 40F20003 		movw	r3, #:lower16:adrAndData
 305 0194 C0F20003 		movt	r3, #:upper16:adrAndData
 306 0198 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 307 019a 4FEA4303 		lsl	r3, r3, #1
 308 019e 9AB2     		uxth	r2, r3
 309 01a0 40F20003 		movw	r3, #:lower16:adrAndData
 310 01a4 C0F20003 		movt	r3, #:upper16:adrAndData
 311 01a8 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 312 01aa 1343     		orrs	r3, r3, r2
 313 01ac 7B82     		strh	r3, [r7, #18]	@ movhi
  74:../LSM9DS1_Driver.c **** 		int16_t gyroZ = (adrAndData.dane[11] << 1) | adrAndData.dane[10];
 314              		.loc 1 74 0
 315 01ae 40F20003 		movw	r3, #:lower16:adrAndData
 316 01b2 C0F20003 		movt	r3, #:upper16:adrAndData
 317 01b6 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 318 01b8 4FEA4303 		lsl	r3, r3, #1
 319 01bc 9AB2     		uxth	r2, r3
 320 01be 40F20003 		movw	r3, #:lower16:adrAndData
 321 01c2 C0F20003 		movt	r3, #:upper16:adrAndData
 322 01c6 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 323 01c8 1343     		orrs	r3, r3, r2
 324 01ca 3B82     		strh	r3, [r7, #16]	@ movhi
  75:../LSM9DS1_Driver.c **** 
  76:../LSM9DS1_Driver.c **** 		if (_autoCalc) //kalibracja
 325              		.loc 1 76 0
 326 01cc 40F20003 		movw	r3, #:lower16:_autoCalc
 327 01d0 C0F20003 		movt	r3, #:upper16:_autoCalc
 328 01d4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 329 01d6 002B     		cmp	r3, #0
 330 01d8 1DD0     		beq	.L5
  77:../LSM9DS1_Driver.c **** 		{
  78:../LSM9DS1_Driver.c **** 			gyroX -= gBiasRaw[X_AXIS];
 331              		.loc 1 78 0
 332 01da BA8A     		ldrh	r2, [r7, #20]
 333 01dc 40F20003 		movw	r3, #:lower16:gBiasRaw
 334 01e0 C0F20003 		movt	r3, #:upper16:gBiasRaw
 335 01e4 1B88     		ldrh	r3, [r3, #0]
 336 01e6 9BB2     		uxth	r3, r3
 337 01e8 D31A     		subs	r3, r2, r3
 338 01ea 9BB2     		uxth	r3, r3
 339 01ec BB82     		strh	r3, [r7, #20]	@ movhi
  79:../LSM9DS1_Driver.c **** 			gyroY -= gBiasRaw[Y_AXIS];
 340              		.loc 1 79 0
 341 01ee 7A8A     		ldrh	r2, [r7, #18]
 342 01f0 40F20003 		movw	r3, #:lower16:gBiasRaw
 343 01f4 C0F20003 		movt	r3, #:upper16:gBiasRaw
 344 01f8 5B88     		ldrh	r3, [r3, #2]
 345 01fa 9BB2     		uxth	r3, r3
 346 01fc D31A     		subs	r3, r2, r3
 347 01fe 9BB2     		uxth	r3, r3
 348 0200 7B82     		strh	r3, [r7, #18]	@ movhi
  80:../LSM9DS1_Driver.c **** 			gyroZ -= gBiasRaw[Z_AXIS];
 349              		.loc 1 80 0
 350 0202 3A8A     		ldrh	r2, [r7, #16]
 351 0204 40F20003 		movw	r3, #:lower16:gBiasRaw
 352 0208 C0F20003 		movt	r3, #:upper16:gBiasRaw
 353 020c 9B88     		ldrh	r3, [r3, #4]
 354 020e 9BB2     		uxth	r3, r3
 355 0210 D31A     		subs	r3, r2, r3
 356 0212 9BB2     		uxth	r3, r3
 357 0214 3B82     		strh	r3, [r7, #16]	@ movhi
 358              	.L5:
  81:../LSM9DS1_Driver.c **** 		}
  82:../LSM9DS1_Driver.c **** 		gyroX = calcGyro(gyroX);
 359              		.loc 1 82 0
 360 0216 B7F91430 		ldrsh	r3, [r7, #20]
 361 021a 1846     		mov	r0, r3
 362 021c FFF7FEFF 		bl	calcGyro
 363 0220 07EE900A 		fmsr	s15, r0
 364 0224 FDEEE77A 		ftosizs	s15, s15
 365 0228 17EE903A 		fmrs	r3, s15	@ int
 366 022c BB82     		strh	r3, [r7, #20]	@ movhi
  83:../LSM9DS1_Driver.c **** 		gyroY = calcGyro(gyroY);
 367              		.loc 1 83 0
 368 022e B7F91230 		ldrsh	r3, [r7, #18]
 369 0232 1846     		mov	r0, r3
 370 0234 FFF7FEFF 		bl	calcGyro
 371 0238 07EE900A 		fmsr	s15, r0
 372 023c FDEEE77A 		ftosizs	s15, s15
 373 0240 17EE903A 		fmrs	r3, s15	@ int
 374 0244 7B82     		strh	r3, [r7, #18]	@ movhi
  84:../LSM9DS1_Driver.c **** 		gyroZ = calcGyro(gyroZ);
 375              		.loc 1 84 0
 376 0246 B7F91030 		ldrsh	r3, [r7, #16]
 377 024a 1846     		mov	r0, r3
 378 024c FFF7FEFF 		bl	calcGyro
 379 0250 07EE900A 		fmsr	s15, r0
 380 0254 FDEEE77A 		ftosizs	s15, s15
 381 0258 17EE903A 		fmrs	r3, s15	@ int
 382 025c 3B82     		strh	r3, [r7, #16]	@ movhi
  85:../LSM9DS1_Driver.c **** 
  86:../LSM9DS1_Driver.c **** 		pomiaryAccel[counter].ax = gyroX;
 383              		.loc 1 86 0
 384 025e 40F20003 		movw	r3, #:lower16:counter
 385 0262 C0F20003 		movt	r3, #:upper16:counter
 386 0266 1968     		ldr	r1, [r3, #0]
 387 0268 40F20002 		movw	r2, #:lower16:pomiaryAccel
 388 026c C0F20002 		movt	r2, #:upper16:pomiaryAccel
 389 0270 0B46     		mov	r3, r1
 390 0272 4FEA4303 		lsl	r3, r3, #1
 391 0276 5B18     		adds	r3, r3, r1
 392 0278 4FEA4303 		lsl	r3, r3, #1
 393 027c D318     		adds	r3, r2, r3
 394 027e BA8A     		ldrh	r2, [r7, #20]	@ movhi
 395 0280 1A80     		strh	r2, [r3, #0]	@ movhi
  87:../LSM9DS1_Driver.c **** 		pomiaryAccel[counter].ay = gyroY;
 396              		.loc 1 87 0
 397 0282 40F20003 		movw	r3, #:lower16:counter
 398 0286 C0F20003 		movt	r3, #:upper16:counter
 399 028a 1968     		ldr	r1, [r3, #0]
 400 028c 40F20002 		movw	r2, #:lower16:pomiaryAccel
 401 0290 C0F20002 		movt	r2, #:upper16:pomiaryAccel
 402 0294 0B46     		mov	r3, r1
 403 0296 4FEA4303 		lsl	r3, r3, #1
 404 029a 5B18     		adds	r3, r3, r1
 405 029c 4FEA4303 		lsl	r3, r3, #1
 406 02a0 D318     		adds	r3, r2, r3
 407 02a2 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 408 02a4 5A80     		strh	r2, [r3, #2]	@ movhi
  88:../LSM9DS1_Driver.c **** 		pomiaryAccel[counter].az = gyroZ;
 409              		.loc 1 88 0
 410 02a6 40F20003 		movw	r3, #:lower16:counter
 411 02aa C0F20003 		movt	r3, #:upper16:counter
 412 02ae 1968     		ldr	r1, [r3, #0]
 413 02b0 40F20002 		movw	r2, #:lower16:pomiaryAccel
 414 02b4 C0F20002 		movt	r2, #:upper16:pomiaryAccel
 415 02b8 0B46     		mov	r3, r1
 416 02ba 4FEA4303 		lsl	r3, r3, #1
 417 02be 5B18     		adds	r3, r3, r1
 418 02c0 4FEA4303 		lsl	r3, r3, #1
 419 02c4 D318     		adds	r3, r2, r3
 420 02c6 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 421 02c8 9A80     		strh	r2, [r3, #4]	@ movhi
  89:../LSM9DS1_Driver.c **** 		counter++;
 422              		.loc 1 89 0
 423 02ca 40F20003 		movw	r3, #:lower16:counter
 424 02ce C0F20003 		movt	r3, #:upper16:counter
 425 02d2 1B68     		ldr	r3, [r3, #0]
 426 02d4 03F10102 		add	r2, r3, #1
 427 02d8 40F20003 		movw	r3, #:lower16:counter
 428 02dc C0F20003 		movt	r3, #:upper16:counter
 429 02e0 1A60     		str	r2, [r3, #0]
  90:../LSM9DS1_Driver.c **** 		readingAllowed = TRUE;
 430              		.loc 1 90 0
 431 02e2 40F20003 		movw	r3, #:lower16:readingAllowed
 432 02e6 C0F20003 		movt	r3, #:upper16:readingAllowed
 433 02ea 4FF00102 		mov	r2, #1
 434 02ee 1A70     		strb	r2, [r3, #0]
 435              	.L3:
 436              	.LBE2:
  91:../LSM9DS1_Driver.c **** 	}
  92:../LSM9DS1_Driver.c **** 
  93:../LSM9DS1_Driver.c **** 	if(counter >= 100)
 437              		.loc 1 93 0
 438 02f0 40F20003 		movw	r3, #:lower16:counter
 439 02f4 C0F20003 		movt	r3, #:upper16:counter
 440 02f8 1B68     		ldr	r3, [r3, #0]
 441 02fa 632B     		cmp	r3, #99
 442 02fc 06DD     		ble	.L2
  94:../LSM9DS1_Driver.c **** 	{
  95:../LSM9DS1_Driver.c **** 		counter = 0;
 443              		.loc 1 95 0
 444 02fe 40F20003 		movw	r3, #:lower16:counter
 445 0302 C0F20003 		movt	r3, #:upper16:counter
 446 0306 4FF00002 		mov	r2, #0
 447 030a 1A60     		str	r2, [r3, #0]
 448              	.L2:
  96:../LSM9DS1_Driver.c **** 	}
  97:../LSM9DS1_Driver.c **** }
 449              		.loc 1 97 0
 450 030c 07F11807 		add	r7, r7, #24
 451 0310 BD46     		mov	sp, r7
 452 0312 80BD     		pop	{r7, pc}
 453              		.cfi_endproc
 454              	.LFE118:
 456              		.section	.text.initAdrAndSubAdr,"ax",%progbits
 457              		.align	2
 458              		.global	initAdrAndSubAdr
 459              		.thumb
 460              		.thumb_func
 462              	initAdrAndSubAdr:
 463              	.LFB119:
  98:../LSM9DS1_Driver.c **** 
  99:../LSM9DS1_Driver.c **** void initAdrAndSubAdr(void)
 100:../LSM9DS1_Driver.c **** {
 464              		.loc 1 100 0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 1, uses_anonymous_args = 0
 468              		@ link register save eliminated.
 469 0000 80B4     		push	{r7}
 470              	.LCFI5:
 471              		.cfi_def_cfa_offset 4
 472              		.cfi_offset 7, -4
 473 0002 00AF     		add	r7, sp, #0
 474              	.LCFI6:
 475              		.cfi_def_cfa_register 7
 101:../LSM9DS1_Driver.c **** 	adrAndData.adr.addressDevice[0] = 0x6B;
 476              		.loc 1 101 0
 477 0004 40F20003 		movw	r3, #:lower16:adrAndData
 478 0008 C0F20003 		movt	r3, #:upper16:adrAndData
 479 000c 4FF06B02 		mov	r2, #107
 480 0010 9A74     		strb	r2, [r3, #18]
 102:../LSM9DS1_Driver.c **** 	adrAndData.adr.addressDevice[1] = 0x1E;
 481              		.loc 1 102 0
 482 0012 40F20003 		movw	r3, #:lower16:adrAndData
 483 0016 C0F20003 		movt	r3, #:upper16:adrAndData
 484 001a 4FF01E02 		mov	r2, #30
 485 001e DA74     		strb	r2, [r3, #19]
 103:../LSM9DS1_Driver.c **** 	adrAndData.adr.subAddress[0] =  OUT_X_L_XL; //subaddres for accel
 486              		.loc 1 103 0
 487 0020 40F20003 		movw	r3, #:lower16:adrAndData
 488 0024 C0F20003 		movt	r3, #:upper16:adrAndData
 489 0028 4FF02802 		mov	r2, #40
 490 002c 1A75     		strb	r2, [r3, #20]
 104:../LSM9DS1_Driver.c **** 	adrAndData.adr.subAddress[1] =  OUT_X_L_G; //sub address for gyroscope
 491              		.loc 1 104 0
 492 002e 40F20003 		movw	r3, #:lower16:adrAndData
 493 0032 C0F20003 		movt	r3, #:upper16:adrAndData
 494 0036 4FF01802 		mov	r2, #24
 495 003a 5A75     		strb	r2, [r3, #21]
 105:../LSM9DS1_Driver.c **** 	adrAndData.adr.subAddress[2] =  OUT_X_L_M;
 496              		.loc 1 105 0
 497 003c 40F20003 		movw	r3, #:lower16:adrAndData
 498 0040 C0F20003 		movt	r3, #:upper16:adrAndData
 499 0044 4FF02802 		mov	r2, #40
 500 0048 9A75     		strb	r2, [r3, #22]
 106:../LSM9DS1_Driver.c **** }
 501              		.loc 1 106 0
 502 004a BD46     		mov	sp, r7
 503 004c 80BC     		pop	{r7}
 504 004e 7047     		bx	lr
 505              		.cfi_endproc
 506              	.LFE119:
 508              		.section	.text.initLSM9DS1,"ax",%progbits
 509              		.align	2
 510              		.global	initLSM9DS1
 511              		.thumb
 512              		.thumb_func
 514              	initLSM9DS1:
 515              	.LFB120:
 107:../LSM9DS1_Driver.c **** 
 108:../LSM9DS1_Driver.c **** void initLSM9DS1(void)
 109:../LSM9DS1_Driver.c **** {
 516              		.loc 1 109 0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 8
 519              		@ frame_needed = 1, uses_anonymous_args = 0
 520 0000 80B5     		push	{r7, lr}
 521              	.LCFI7:
 522              		.cfi_def_cfa_offset 8
 523              		.cfi_offset 7, -8
 524              		.cfi_offset 14, -4
 525 0002 82B0     		sub	sp, sp, #8
 526              	.LCFI8:
 527              		.cfi_def_cfa_offset 16
 528 0004 00AF     		add	r7, sp, #0
 529              	.LCFI9:
 530              		.cfi_def_cfa_register 7
 110:../LSM9DS1_Driver.c **** 	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 531              		.loc 1 110 0
 532 0006 4FF00100 		mov	r0, #1
 533 000a 4FF06B01 		mov	r1, #107
 534 000e 4FF01E02 		mov	r2, #30
 535 0012 FFF7FEFF 		bl	init
 111:../LSM9DS1_Driver.c **** 
 112:../LSM9DS1_Driver.c **** 	settings.device.commInterface = IMU_MODE_I2C;
 536              		.loc 1 112 0
 537 0016 40F20003 		movw	r3, #:lower16:settings
 538 001a C0F20003 		movt	r3, #:upper16:settings
 539 001e 4FF00102 		mov	r2, #1
 540 0022 1A70     		strb	r2, [r3, #0]
 113:../LSM9DS1_Driver.c **** 	settings.device.mAddress = LSM9DS1_M;
 541              		.loc 1 113 0
 542 0024 40F20003 		movw	r3, #:lower16:settings
 543 0028 C0F20003 		movt	r3, #:upper16:settings
 544 002c 4FF01E02 		mov	r2, #30
 545 0030 9A70     		strb	r2, [r3, #2]
 114:../LSM9DS1_Driver.c **** 	settings.device.agAddress = LSM9DS1_AG;
 546              		.loc 1 114 0
 547 0032 40F20003 		movw	r3, #:lower16:settings
 548 0036 C0F20003 		movt	r3, #:upper16:settings
 549 003a 4FF06B02 		mov	r2, #107
 550 003e 5A70     		strb	r2, [r3, #1]
 115:../LSM9DS1_Driver.c **** 
 116:../LSM9DS1_Driver.c **** 	initAdrAndSubAdr();
 551              		.loc 1 116 0
 552 0040 FFF7FEFF 		bl	initAdrAndSubAdr
 117:../LSM9DS1_Driver.c **** 
 118:../LSM9DS1_Driver.c **** 	if(!begin())
 553              		.loc 1 118 0
 554 0044 FFF7FEFF 		bl	begin
 555 0048 0346     		mov	r3, r0
 556 004a 002B     		cmp	r3, #0
 557 004c 02D1     		bne	.L8
 558              	.LBB3:
 119:../LSM9DS1_Driver.c **** 	{
 120:../LSM9DS1_Driver.c **** 		int k = 0;
 559              		.loc 1 120 0
 560 004e 4FF00003 		mov	r3, #0
 561 0052 7B60     		str	r3, [r7, #4]
 562              	.L8:
 563              	.LBE3:
 121:../LSM9DS1_Driver.c **** 	}
 122:../LSM9DS1_Driver.c **** }
 564              		.loc 1 122 0
 565 0054 07F10807 		add	r7, r7, #8
 566 0058 BD46     		mov	sp, r7
 567 005a 80BD     		pop	{r7, pc}
 568              		.cfi_endproc
 569              	.LFE120:
 571              		.section	.text.init,"ax",%progbits
 572              		.align	2
 573              		.global	init
 574              		.thumb
 575              		.thumb_func
 577              	init:
 578              	.LFB121:
 123:../LSM9DS1_Driver.c **** 
 124:../LSM9DS1_Driver.c **** void init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
 125:../LSM9DS1_Driver.c **** {
 579              		.loc 1 125 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 16
 582              		@ frame_needed = 1, uses_anonymous_args = 0
 583              		@ link register save eliminated.
 584 0000 80B4     		push	{r7}
 585              	.LCFI10:
 586              		.cfi_def_cfa_offset 4
 587              		.cfi_offset 7, -4
 588 0002 85B0     		sub	sp, sp, #20
 589              	.LCFI11:
 590              		.cfi_def_cfa_offset 24
 591 0004 00AF     		add	r7, sp, #0
 592              	.LCFI12:
 593              		.cfi_def_cfa_register 7
 594 0006 1346     		mov	r3, r2
 595 0008 0246     		mov	r2, r0
 596 000a FA71     		strb	r2, [r7, #7]
 597 000c 0A46     		mov	r2, r1
 598 000e BA71     		strb	r2, [r7, #6]
 599 0010 7B71     		strb	r3, [r7, #5]
 126:../LSM9DS1_Driver.c **** 	//measurementsLSMRead = 0;
 127:../LSM9DS1_Driver.c **** 
 128:../LSM9DS1_Driver.c **** 	settings.device.commInterface = interface;
 600              		.loc 1 128 0
 601 0012 40F20003 		movw	r3, #:lower16:settings
 602 0016 C0F20003 		movt	r3, #:upper16:settings
 603 001a FA79     		ldrb	r2, [r7, #7]
 604 001c 1A70     		strb	r2, [r3, #0]
 129:../LSM9DS1_Driver.c **** 	settings.device.agAddress = xgAddr;
 605              		.loc 1 129 0
 606 001e 40F20003 		movw	r3, #:lower16:settings
 607 0022 C0F20003 		movt	r3, #:upper16:settings
 608 0026 BA79     		ldrb	r2, [r7, #6]
 609 0028 5A70     		strb	r2, [r3, #1]
 130:../LSM9DS1_Driver.c **** 	settings.device.mAddress = mAddr;
 610              		.loc 1 130 0
 611 002a 40F20003 		movw	r3, #:lower16:settings
 612 002e C0F20003 		movt	r3, #:upper16:settings
 613 0032 7A79     		ldrb	r2, [r7, #5]
 614 0034 9A70     		strb	r2, [r3, #2]
 131:../LSM9DS1_Driver.c **** 
 132:../LSM9DS1_Driver.c **** 	settings.gyro.enabled = TRUE;
 615              		.loc 1 132 0
 616 0036 40F20003 		movw	r3, #:lower16:settings
 617 003a C0F20003 		movt	r3, #:upper16:settings
 618 003e 4FF00102 		mov	r2, #1
 619 0042 1A71     		strb	r2, [r3, #4]
 133:../LSM9DS1_Driver.c **** 	settings.gyro.enableX = TRUE;
 620              		.loc 1 133 0
 621 0044 40F20003 		movw	r3, #:lower16:settings
 622 0048 C0F20003 		movt	r3, #:upper16:settings
 623 004c 4FF00102 		mov	r2, #1
 624 0050 5A74     		strb	r2, [r3, #17]
 134:../LSM9DS1_Driver.c **** 	settings.gyro.enableY = TRUE;
 625              		.loc 1 134 0
 626 0052 40F20003 		movw	r3, #:lower16:settings
 627 0056 C0F20003 		movt	r3, #:upper16:settings
 628 005a 4FF00102 		mov	r2, #1
 629 005e 9A74     		strb	r2, [r3, #18]
 135:../LSM9DS1_Driver.c **** 	settings.gyro.enableZ = TRUE;
 630              		.loc 1 135 0
 631 0060 40F20003 		movw	r3, #:lower16:settings
 632 0064 C0F20003 		movt	r3, #:upper16:settings
 633 0068 4FF00102 		mov	r2, #1
 634 006c DA74     		strb	r2, [r3, #19]
 136:../LSM9DS1_Driver.c **** 	// gyro scale can be 245, 500, or 2000
 137:../LSM9DS1_Driver.c **** 	settings.gyro.scale = 245;
 635              		.loc 1 137 0
 636 006e 40F20003 		movw	r3, #:lower16:settings
 637 0072 C0F20003 		movt	r3, #:upper16:settings
 638 0076 4FF0F502 		mov	r2, #245
 639 007a DA80     		strh	r2, [r3, #6]	@ movhi
 138:../LSM9DS1_Driver.c **** 	// gyro sample rate: value between 1-6
 139:../LSM9DS1_Driver.c **** 	// 1 = 14.9    4 = 238
 140:../LSM9DS1_Driver.c **** 	// 2 = 59.5    5 = 476
 141:../LSM9DS1_Driver.c **** 	// 3 = 119     6 = 952
 142:../LSM9DS1_Driver.c **** 	settings.gyro.sampleRate = 3;
 640              		.loc 1 142 0
 641 007c 40F20003 		movw	r3, #:lower16:settings
 642 0080 C0F20003 		movt	r3, #:upper16:settings
 643 0084 4FF00302 		mov	r2, #3
 644 0088 1A72     		strb	r2, [r3, #8]
 143:../LSM9DS1_Driver.c **** 	// gyro cutoff frequency: value between 0-3
 144:../LSM9DS1_Driver.c **** 	// Actual value of cutoff frequency depends
 145:../LSM9DS1_Driver.c **** 	// on sample rate.
 146:../LSM9DS1_Driver.c **** 	settings.gyro.bandwidth = 0;
 645              		.loc 1 146 0
 646 008a 40F20003 		movw	r3, #:lower16:settings
 647 008e C0F20003 		movt	r3, #:upper16:settings
 648 0092 4FF00002 		mov	r2, #0
 649 0096 5A72     		strb	r2, [r3, #9]
 147:../LSM9DS1_Driver.c **** 	settings.gyro.lowPowerEnable = FALSE;
 650              		.loc 1 147 0
 651 0098 40F20003 		movw	r3, #:lower16:settings
 652 009c C0F20003 		movt	r3, #:upper16:settings
 653 00a0 4FF00002 		mov	r2, #0
 654 00a4 9A72     		strb	r2, [r3, #10]
 148:../LSM9DS1_Driver.c **** 
 149:../LSM9DS1_Driver.c **** 	settings.gyro.HPFEnable = FALSE;
 655              		.loc 1 149 0
 656 00a6 40F20003 		movw	r3, #:lower16:settings
 657 00aa C0F20003 		movt	r3, #:upper16:settings
 658 00ae 4FF00002 		mov	r2, #0
 659 00b2 DA72     		strb	r2, [r3, #11]
 150:../LSM9DS1_Driver.c **** 	// Gyro HPF cutoff frequency: value between 0-9
 151:../LSM9DS1_Driver.c **** 	// Actual value depends on sample rate. Only applies
 152:../LSM9DS1_Driver.c **** 	// if gyroHPFEnable is TRUE.
 153:../LSM9DS1_Driver.c **** 	settings.gyro.HPFCutoff = 0;
 660              		.loc 1 153 0
 661 00b4 40F20003 		movw	r3, #:lower16:settings
 662 00b8 C0F20003 		movt	r3, #:upper16:settings
 663 00bc 4FF00002 		mov	r2, #0
 664 00c0 1A73     		strb	r2, [r3, #12]
 154:../LSM9DS1_Driver.c **** 	settings.gyro.flipX = FALSE;
 665              		.loc 1 154 0
 666 00c2 40F20003 		movw	r3, #:lower16:settings
 667 00c6 C0F20003 		movt	r3, #:upper16:settings
 668 00ca 4FF00002 		mov	r2, #0
 669 00ce 5A73     		strb	r2, [r3, #13]
 155:../LSM9DS1_Driver.c **** 	settings.gyro.flipY = FALSE;
 670              		.loc 1 155 0
 671 00d0 40F20003 		movw	r3, #:lower16:settings
 672 00d4 C0F20003 		movt	r3, #:upper16:settings
 673 00d8 4FF00002 		mov	r2, #0
 674 00dc 9A73     		strb	r2, [r3, #14]
 156:../LSM9DS1_Driver.c **** 	settings.gyro.flipZ = FALSE;
 675              		.loc 1 156 0
 676 00de 40F20003 		movw	r3, #:lower16:settings
 677 00e2 C0F20003 		movt	r3, #:upper16:settings
 678 00e6 4FF00002 		mov	r2, #0
 679 00ea DA73     		strb	r2, [r3, #15]
 157:../LSM9DS1_Driver.c **** 	settings.gyro.orientation = 0;
 680              		.loc 1 157 0
 681 00ec 40F20003 		movw	r3, #:lower16:settings
 682 00f0 C0F20003 		movt	r3, #:upper16:settings
 683 00f4 4FF00002 		mov	r2, #0
 684 00f8 1A74     		strb	r2, [r3, #16]
 158:../LSM9DS1_Driver.c **** 	settings.gyro.latchInterrupt = TRUE;
 685              		.loc 1 158 0
 686 00fa 40F20003 		movw	r3, #:lower16:settings
 687 00fe C0F20003 		movt	r3, #:upper16:settings
 688 0102 4FF00102 		mov	r2, #1
 689 0106 1A75     		strb	r2, [r3, #20]
 159:../LSM9DS1_Driver.c **** 
 160:../LSM9DS1_Driver.c **** 	settings.accel.enabled = TRUE;
 690              		.loc 1 160 0
 691 0108 40F20003 		movw	r3, #:lower16:settings
 692 010c C0F20003 		movt	r3, #:upper16:settings
 693 0110 4FF00102 		mov	r2, #1
 694 0114 9A75     		strb	r2, [r3, #22]
 161:../LSM9DS1_Driver.c **** 	settings.accel.enableX = TRUE;
 695              		.loc 1 161 0
 696 0116 40F20003 		movw	r3, #:lower16:settings
 697 011a C0F20003 		movt	r3, #:upper16:settings
 698 011e 4FF00102 		mov	r2, #1
 699 0122 5A76     		strb	r2, [r3, #25]
 162:../LSM9DS1_Driver.c **** 	settings.accel.enableY = TRUE;
 700              		.loc 1 162 0
 701 0124 40F20003 		movw	r3, #:lower16:settings
 702 0128 C0F20003 		movt	r3, #:upper16:settings
 703 012c 4FF00102 		mov	r2, #1
 704 0130 9A76     		strb	r2, [r3, #26]
 163:../LSM9DS1_Driver.c **** 	settings.accel.enableZ = TRUE;
 705              		.loc 1 163 0
 706 0132 40F20003 		movw	r3, #:lower16:settings
 707 0136 C0F20003 		movt	r3, #:upper16:settings
 708 013a 4FF00102 		mov	r2, #1
 709 013e DA76     		strb	r2, [r3, #27]
 164:../LSM9DS1_Driver.c **** 	// accel scale can be 2, 4, 8, or 16
 165:../LSM9DS1_Driver.c **** 	settings.accel.scale = 2;
 710              		.loc 1 165 0
 711 0140 40F20003 		movw	r3, #:lower16:settings
 712 0144 C0F20003 		movt	r3, #:upper16:settings
 713 0148 4FF00202 		mov	r2, #2
 714 014c DA75     		strb	r2, [r3, #23]
 166:../LSM9DS1_Driver.c **** 	// accel sample rate can be 1-6
 167:../LSM9DS1_Driver.c **** 	// 1 = 10 Hz    4 = 238 Hz
 168:../LSM9DS1_Driver.c **** 	// 2 = 50 Hz    5 = 476 Hz
 169:../LSM9DS1_Driver.c **** 	// 3 = 119 Hz   6 = 952 Hz
 170:../LSM9DS1_Driver.c **** 	settings.accel.sampleRate = 6;
 715              		.loc 1 170 0
 716 014e 40F20003 		movw	r3, #:lower16:settings
 717 0152 C0F20003 		movt	r3, #:upper16:settings
 718 0156 4FF00602 		mov	r2, #6
 719 015a 1A76     		strb	r2, [r3, #24]
 171:../LSM9DS1_Driver.c **** 	// Accel cutoff freqeuncy can be any value between -1 - 3.
 172:../LSM9DS1_Driver.c **** 	// -1 = bandwidth determined by sample rate
 173:../LSM9DS1_Driver.c **** 	// 0 = 408 Hz   2 = 105 Hz
 174:../LSM9DS1_Driver.c **** 	// 1 = 211 Hz   3 = 50 Hz
 175:../LSM9DS1_Driver.c **** 	settings.accel.bandwidth = -1;
 720              		.loc 1 175 0
 721 015c 40F20003 		movw	r3, #:lower16:settings
 722 0160 C0F20003 		movt	r3, #:upper16:settings
 723 0164 4FF0FF02 		mov	r2, #255
 724 0168 1A77     		strb	r2, [r3, #28]
 176:../LSM9DS1_Driver.c **** 	settings.accel.highResEnable = FALSE;
 725              		.loc 1 176 0
 726 016a 40F20003 		movw	r3, #:lower16:settings
 727 016e C0F20003 		movt	r3, #:upper16:settings
 728 0172 4FF00002 		mov	r2, #0
 729 0176 5A77     		strb	r2, [r3, #29]
 177:../LSM9DS1_Driver.c **** 	// accelHighResBandwidth can be any value between 0-3
 178:../LSM9DS1_Driver.c **** 	// LP cutoff is set to a factor of sample rate
 179:../LSM9DS1_Driver.c **** 	// 0 = ODR/50    2 = ODR/9
 180:../LSM9DS1_Driver.c **** 	// 1 = ODR/100   3 = ODR/400
 181:../LSM9DS1_Driver.c **** 	settings.accel.highResBandwidth = 0;
 730              		.loc 1 181 0
 731 0178 40F20003 		movw	r3, #:lower16:settings
 732 017c C0F20003 		movt	r3, #:upper16:settings
 733 0180 4FF00002 		mov	r2, #0
 734 0184 9A77     		strb	r2, [r3, #30]
 182:../LSM9DS1_Driver.c **** 
 183:../LSM9DS1_Driver.c **** 	settings.mag.enabled = TRUE;
 735              		.loc 1 183 0
 736 0186 40F20003 		movw	r3, #:lower16:settings
 737 018a C0F20003 		movt	r3, #:upper16:settings
 738 018e 4FF00102 		mov	r2, #1
 739 0192 DA77     		strb	r2, [r3, #31]
 184:../LSM9DS1_Driver.c **** 	// mag scale can be 4, 8, 12, or 16
 185:../LSM9DS1_Driver.c **** 	settings.mag.scale = 4;
 740              		.loc 1 185 0
 741 0194 40F20003 		movw	r3, #:lower16:settings
 742 0198 C0F20003 		movt	r3, #:upper16:settings
 743 019c 4FF00402 		mov	r2, #4
 744 01a0 83F82020 		strb	r2, [r3, #32]
 186:../LSM9DS1_Driver.c **** 	// mag data rate can be 0-7
 187:../LSM9DS1_Driver.c **** 	// 0 = 0.625 Hz  4 = 10 Hz
 188:../LSM9DS1_Driver.c **** 	// 1 = 1.25 Hz   5 = 20 Hz
 189:../LSM9DS1_Driver.c **** 	// 2 = 2.5 Hz    6 = 40 Hz
 190:../LSM9DS1_Driver.c **** 	// 3 = 5 Hz      7 = 80 Hz
 191:../LSM9DS1_Driver.c **** 	settings.mag.sampleRate = 7;
 745              		.loc 1 191 0
 746 01a4 40F20003 		movw	r3, #:lower16:settings
 747 01a8 C0F20003 		movt	r3, #:upper16:settings
 748 01ac 4FF00702 		mov	r2, #7
 749 01b0 83F82120 		strb	r2, [r3, #33]
 192:../LSM9DS1_Driver.c **** 	settings.mag.tempCompensationEnable = FALSE;
 750              		.loc 1 192 0
 751 01b4 40F20003 		movw	r3, #:lower16:settings
 752 01b8 C0F20003 		movt	r3, #:upper16:settings
 753 01bc 4FF00002 		mov	r2, #0
 754 01c0 83F82220 		strb	r2, [r3, #34]
 193:../LSM9DS1_Driver.c **** 	// magPerformance can be any value between 0-3
 194:../LSM9DS1_Driver.c **** 	// 0 = Low power mode      2 = high performance
 195:../LSM9DS1_Driver.c **** 	// 1 = medium performance  3 = ultra-high performance
 196:../LSM9DS1_Driver.c **** 	settings.mag.XYPerformance = 3;
 755              		.loc 1 196 0
 756 01c4 40F20003 		movw	r3, #:lower16:settings
 757 01c8 C0F20003 		movt	r3, #:upper16:settings
 758 01cc 4FF00302 		mov	r2, #3
 759 01d0 83F82320 		strb	r2, [r3, #35]
 197:../LSM9DS1_Driver.c **** 	settings.mag.ZPerformance = 3;
 760              		.loc 1 197 0
 761 01d4 40F20003 		movw	r3, #:lower16:settings
 762 01d8 C0F20003 		movt	r3, #:upper16:settings
 763 01dc 4FF00302 		mov	r2, #3
 764 01e0 83F82420 		strb	r2, [r3, #36]
 198:../LSM9DS1_Driver.c **** 	settings.mag.lowPowerEnable = FALSE;
 765              		.loc 1 198 0
 766 01e4 40F20003 		movw	r3, #:lower16:settings
 767 01e8 C0F20003 		movt	r3, #:upper16:settings
 768 01ec 4FF00002 		mov	r2, #0
 769 01f0 83F82520 		strb	r2, [r3, #37]
 199:../LSM9DS1_Driver.c **** 	// magOperatingMode can be 0-2
 200:../LSM9DS1_Driver.c **** 	// 0 = continuous conversion
 201:../LSM9DS1_Driver.c **** 	// 1 = single-conversion
 202:../LSM9DS1_Driver.c **** 	// 2 = power down
 203:../LSM9DS1_Driver.c **** 	settings.mag.operatingMode = 0;
 770              		.loc 1 203 0
 771 01f4 40F20003 		movw	r3, #:lower16:settings
 772 01f8 C0F20003 		movt	r3, #:upper16:settings
 773 01fc 4FF00002 		mov	r2, #0
 774 0200 83F82620 		strb	r2, [r3, #38]
 204:../LSM9DS1_Driver.c **** 
 205:../LSM9DS1_Driver.c **** 	settings.temp.enabled = TRUE;
 775              		.loc 1 205 0
 776 0204 40F20003 		movw	r3, #:lower16:settings
 777 0208 C0F20003 		movt	r3, #:upper16:settings
 778 020c 4FF00102 		mov	r2, #1
 779 0210 83F82720 		strb	r2, [r3, #39]
 780              	.LBB4:
 206:../LSM9DS1_Driver.c **** 
 207:../LSM9DS1_Driver.c **** 	for (int i=0; i<3; i++)
 781              		.loc 1 207 0
 782 0214 4FF00003 		mov	r3, #0
 783 0218 FB60     		str	r3, [r7, #12]
 784 021a 3FE0     		b	.L11
 785              	.L12:
 208:../LSM9DS1_Driver.c **** 	{
 209:../LSM9DS1_Driver.c **** 		gBias[i] = 0;
 786              		.loc 1 209 0 discriminator 2
 787 021c 40F20003 		movw	r3, #:lower16:gBias
 788 0220 C0F20003 		movt	r3, #:upper16:gBias
 789 0224 FA68     		ldr	r2, [r7, #12]
 790 0226 4FEA8202 		lsl	r2, r2, #2
 791 022a 9B18     		adds	r3, r3, r2
 792 022c 4FF00002 		mov	r2, #0
 793 0230 1A60     		str	r2, [r3, #0]	@ float
 210:../LSM9DS1_Driver.c **** 		aBias[i] = 0;
 794              		.loc 1 210 0 discriminator 2
 795 0232 40F20003 		movw	r3, #:lower16:aBias
 796 0236 C0F20003 		movt	r3, #:upper16:aBias
 797 023a FA68     		ldr	r2, [r7, #12]
 798 023c 4FEA8202 		lsl	r2, r2, #2
 799 0240 9B18     		adds	r3, r3, r2
 800 0242 4FF00002 		mov	r2, #0
 801 0246 1A60     		str	r2, [r3, #0]	@ float
 211:../LSM9DS1_Driver.c **** 		mBias[i] = 0;
 802              		.loc 1 211 0 discriminator 2
 803 0248 40F20003 		movw	r3, #:lower16:mBias
 804 024c C0F20003 		movt	r3, #:upper16:mBias
 805 0250 FA68     		ldr	r2, [r7, #12]
 806 0252 4FEA8202 		lsl	r2, r2, #2
 807 0256 9B18     		adds	r3, r3, r2
 808 0258 4FF00002 		mov	r2, #0
 809 025c 1A60     		str	r2, [r3, #0]	@ float
 212:../LSM9DS1_Driver.c **** 		gBiasRaw[i] = 0;
 810              		.loc 1 212 0 discriminator 2
 811 025e 40F20003 		movw	r3, #:lower16:gBiasRaw
 812 0262 C0F20003 		movt	r3, #:upper16:gBiasRaw
 813 0266 FA68     		ldr	r2, [r7, #12]
 814 0268 4FF00001 		mov	r1, #0
 815 026c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 213:../LSM9DS1_Driver.c **** 		aBiasRaw[i] = 0;
 816              		.loc 1 213 0 discriminator 2
 817 0270 40F20003 		movw	r3, #:lower16:aBiasRaw
 818 0274 C0F20003 		movt	r3, #:upper16:aBiasRaw
 819 0278 FA68     		ldr	r2, [r7, #12]
 820 027a 4FF00001 		mov	r1, #0
 821 027e 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 214:../LSM9DS1_Driver.c **** 		mBiasRaw[i] = 0;
 822              		.loc 1 214 0 discriminator 2
 823 0282 40F20003 		movw	r3, #:lower16:mBiasRaw
 824 0286 C0F20003 		movt	r3, #:upper16:mBiasRaw
 825 028a FA68     		ldr	r2, [r7, #12]
 826 028c 4FF00001 		mov	r1, #0
 827 0290 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 207:../LSM9DS1_Driver.c **** 	for (int i=0; i<3; i++)
 828              		.loc 1 207 0 discriminator 2
 829 0294 FB68     		ldr	r3, [r7, #12]
 830 0296 03F10103 		add	r3, r3, #1
 831 029a FB60     		str	r3, [r7, #12]
 832              	.L11:
 207:../LSM9DS1_Driver.c **** 	for (int i=0; i<3; i++)
 833              		.loc 1 207 0 is_stmt 0 discriminator 1
 834 029c FB68     		ldr	r3, [r7, #12]
 835 029e 022B     		cmp	r3, #2
 836 02a0 BCDD     		ble	.L12
 837              	.LBE4:
 215:../LSM9DS1_Driver.c **** 	}
 216:../LSM9DS1_Driver.c **** 
 217:../LSM9DS1_Driver.c **** 	_autoCalc = FALSE;
 838              		.loc 1 217 0 is_stmt 1
 839 02a2 40F20003 		movw	r3, #:lower16:_autoCalc
 840 02a6 C0F20003 		movt	r3, #:upper16:_autoCalc
 841 02aa 4FF00002 		mov	r2, #0
 842 02ae 1A70     		strb	r2, [r3, #0]
 218:../LSM9DS1_Driver.c **** }
 843              		.loc 1 218 0
 844 02b0 07F11407 		add	r7, r7, #20
 845 02b4 BD46     		mov	sp, r7
 846 02b6 80BC     		pop	{r7}
 847 02b8 7047     		bx	lr
 848              		.cfi_endproc
 849              	.LFE121:
 851 02ba 00BF     		.section	.text.begin,"ax",%progbits
 852              		.align	2
 853              		.global	begin
 854              		.thumb
 855              		.thumb_func
 857              	begin:
 858              	.LFB122:
 219:../LSM9DS1_Driver.c **** 
 220:../LSM9DS1_Driver.c **** uint16_t begin(void)
 221:../LSM9DS1_Driver.c **** {
 859              		.loc 1 221 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 8
 862              		@ frame_needed = 1, uses_anonymous_args = 0
 863 0000 80B5     		push	{r7, lr}
 864              	.LCFI13:
 865              		.cfi_def_cfa_offset 8
 866              		.cfi_offset 7, -8
 867              		.cfi_offset 14, -4
 868 0002 82B0     		sub	sp, sp, #8
 869              	.LCFI14:
 870              		.cfi_def_cfa_offset 16
 871 0004 00AF     		add	r7, sp, #0
 872              	.LCFI15:
 873              		.cfi_def_cfa_register 7
 222:../LSM9DS1_Driver.c **** 	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
 223:../LSM9DS1_Driver.c **** 	_xgAddress = settings.device.agAddress;
 874              		.loc 1 223 0
 875 0006 40F20003 		movw	r3, #:lower16:settings
 876 000a C0F20003 		movt	r3, #:upper16:settings
 877 000e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 878 0010 40F20003 		movw	r3, #:lower16:_xgAddress
 879 0014 C0F20003 		movt	r3, #:upper16:_xgAddress
 880 0018 1A70     		strb	r2, [r3, #0]
 224:../LSM9DS1_Driver.c **** 	_mAddress = settings.device.mAddress;
 881              		.loc 1 224 0
 882 001a 40F20003 		movw	r3, #:lower16:settings
 883 001e C0F20003 		movt	r3, #:upper16:settings
 884 0022 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 885 0024 40F20003 		movw	r3, #:lower16:_mAddress
 886 0028 C0F20003 		movt	r3, #:upper16:_mAddress
 887 002c 1A70     		strb	r2, [r3, #0]
 225:../LSM9DS1_Driver.c **** 
 226:../LSM9DS1_Driver.c **** 	constrainScales();
 888              		.loc 1 226 0
 889 002e FFF7FEFF 		bl	constrainScales
 227:../LSM9DS1_Driver.c **** 
 228:../LSM9DS1_Driver.c **** 	// Once we have the scale values, we can calculate the resolution
 229:../LSM9DS1_Driver.c **** 	// of each sensor. That's what these functions are for. One for each sensor
 230:../LSM9DS1_Driver.c **** 	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 890              		.loc 1 230 0
 891 0032 FFF7FEFF 		bl	calcgRes
 231:../LSM9DS1_Driver.c **** 	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 892              		.loc 1 231 0
 893 0036 FFF7FEFF 		bl	calcmRes
 232:../LSM9DS1_Driver.c **** 	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 894              		.loc 1 232 0
 895 003a FFF7FEFF 		bl	calcaRes
 233:../LSM9DS1_Driver.c **** 
 234:../LSM9DS1_Driver.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 896              		.loc 1 234 0
 897 003e 40F20003 		movw	r3, #:lower16:settings
 898 0042 C0F20003 		movt	r3, #:upper16:settings
 899 0046 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 900 0048 012B     		cmp	r3, #1
 901 004a 02D1     		bne	.L14
 235:../LSM9DS1_Driver.c **** 		initI2C();	// Initialize I2C
 902              		.loc 1 235 0
 903 004c FFF7FEFF 		bl	initI2C
 904 0050 08E0     		b	.L15
 905              	.L14:
 236:../LSM9DS1_Driver.c **** 	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 906              		.loc 1 236 0
 907 0052 40F20003 		movw	r3, #:lower16:settings
 908 0056 C0F20003 		movt	r3, #:upper16:settings
 909 005a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 910 005c 002B     		cmp	r3, #0
 911 005e 01D1     		bne	.L15
 237:../LSM9DS1_Driver.c **** 		initSPI();	// Initialize SPI
 912              		.loc 1 237 0
 913 0060 FFF7FEFF 		bl	initSPI
 914              	.L15:
 238:../LSM9DS1_Driver.c **** 
 239:../LSM9DS1_Driver.c **** 	// To verify communication, we can read from the WHO_AM_I register of
 240:../LSM9DS1_Driver.c **** 	// each device. Store those in a variable so we can return them.
 241:../LSM9DS1_Driver.c **** 	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 915              		.loc 1 241 0
 916 0064 4FF00F00 		mov	r0, #15
 917 0068 FFF7FEFF 		bl	mReadByte
 918 006c 0346     		mov	r3, r0
 919 006e FB71     		strb	r3, [r7, #7]
 242:../LSM9DS1_Driver.c **** 	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 920              		.loc 1 242 0
 921 0070 4FF00F00 		mov	r0, #15
 922 0074 FFF7FEFF 		bl	xgReadByte
 923 0078 0346     		mov	r3, r0
 924 007a BB71     		strb	r3, [r7, #6]
 243:../LSM9DS1_Driver.c **** 
 244:../LSM9DS1_Driver.c **** 	uint16_t whoAmICombined = (xgTest << 8) | mTest;
 925              		.loc 1 244 0
 926 007c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 927 007e 4FEA0323 		lsl	r3, r3, #8
 928 0082 9AB2     		uxth	r2, r3
 929 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 930 0086 9BB2     		uxth	r3, r3
 931 0088 1343     		orrs	r3, r3, r2
 932 008a 9BB2     		uxth	r3, r3
 933 008c BB80     		strh	r3, [r7, #4]	@ movhi
 245:../LSM9DS1_Driver.c **** 
 246:../LSM9DS1_Driver.c **** 	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 934              		.loc 1 246 0
 935 008e BA88     		ldrh	r2, [r7, #4]
 936 0090 46F63D03 		movw	r3, #26685
 937 0094 9A42     		cmp	r2, r3
 938 0096 02D0     		beq	.L16
 247:../LSM9DS1_Driver.c **** 	{
 248:../LSM9DS1_Driver.c **** 		return 0;
 939              		.loc 1 248 0
 940 0098 4FF00003 		mov	r3, #0
 941 009c 06E0     		b	.L17
 942              	.L16:
 249:../LSM9DS1_Driver.c **** 	}
 250:../LSM9DS1_Driver.c **** 
 251:../LSM9DS1_Driver.c **** 	// Gyro initialization stuff:
 252:../LSM9DS1_Driver.c **** 	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 943              		.loc 1 252 0
 944 009e FFF7FEFF 		bl	initGyro
 253:../LSM9DS1_Driver.c **** 
 254:../LSM9DS1_Driver.c **** 	// Accelerometer initialization stuff:
 255:../LSM9DS1_Driver.c **** 	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 945              		.loc 1 255 0
 946 00a2 FFF7FEFF 		bl	initAccel
 256:../LSM9DS1_Driver.c **** 
 257:../LSM9DS1_Driver.c **** 	// Magnetometer initialization stuff:
 258:../LSM9DS1_Driver.c **** 	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 947              		.loc 1 258 0
 948 00a6 FFF7FEFF 		bl	initMag
 259:../LSM9DS1_Driver.c **** 
 260:../LSM9DS1_Driver.c **** 	// Once everything is initialized, return the WHO_AM_I registers we read:
 261:../LSM9DS1_Driver.c **** 	return whoAmICombined;
 949              		.loc 1 261 0
 950 00aa BB88     		ldrh	r3, [r7, #4]
 951              	.L17:
 262:../LSM9DS1_Driver.c **** 
 263:../LSM9DS1_Driver.c **** }
 952              		.loc 1 263 0
 953 00ac 1846     		mov	r0, r3
 954 00ae 07F10807 		add	r7, r7, #8
 955 00b2 BD46     		mov	sp, r7
 956 00b4 80BD     		pop	{r7, pc}
 957              		.cfi_endproc
 958              	.LFE122:
 960 00b6 00BF     		.section	.text.constrainScales,"ax",%progbits
 961              		.align	2
 962              		.global	constrainScales
 963              		.thumb
 964              		.thumb_func
 966              	constrainScales:
 967              	.LFB123:
 264:../LSM9DS1_Driver.c **** 
 265:../LSM9DS1_Driver.c **** void constrainScales()
 266:../LSM9DS1_Driver.c **** {
 968              		.loc 1 266 0
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 0
 971              		@ frame_needed = 1, uses_anonymous_args = 0
 972              		@ link register save eliminated.
 973 0000 80B4     		push	{r7}
 974              	.LCFI16:
 975              		.cfi_def_cfa_offset 4
 976              		.cfi_offset 7, -4
 977 0002 00AF     		add	r7, sp, #0
 978              	.LCFI17:
 979              		.cfi_def_cfa_register 7
 267:../LSM9DS1_Driver.c **** 	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && (settings.gyro.scale != 2000))
 980              		.loc 1 267 0
 981 0004 40F20003 		movw	r3, #:lower16:settings
 982 0008 C0F20003 		movt	r3, #:upper16:settings
 983 000c DB88     		ldrh	r3, [r3, #6]
 984 000e F52B     		cmp	r3, #245
 985 0010 16D0     		beq	.L19
 986              		.loc 1 267 0 is_stmt 0 discriminator 1
 987 0012 40F20003 		movw	r3, #:lower16:settings
 988 0016 C0F20003 		movt	r3, #:upper16:settings
 989 001a DB88     		ldrh	r3, [r3, #6]
 990 001c B3F5FA7F 		cmp	r3, #500
 991 0020 0ED0     		beq	.L19
 992 0022 40F20003 		movw	r3, #:lower16:settings
 993 0026 C0F20003 		movt	r3, #:upper16:settings
 994 002a DB88     		ldrh	r3, [r3, #6]
 995 002c B3F5FA6F 		cmp	r3, #2000
 996 0030 06D0     		beq	.L19
 268:../LSM9DS1_Driver.c **** 	{
 269:../LSM9DS1_Driver.c **** 		settings.gyro.scale = 245;
 997              		.loc 1 269 0 is_stmt 1
 998 0032 40F20003 		movw	r3, #:lower16:settings
 999 0036 C0F20003 		movt	r3, #:upper16:settings
 1000 003a 4FF0F502 		mov	r2, #245
 1001 003e DA80     		strh	r2, [r3, #6]	@ movhi
 1002              	.L19:
 270:../LSM9DS1_Driver.c **** 	}
 271:../LSM9DS1_Driver.c **** 
 272:../LSM9DS1_Driver.c **** 	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) && (settings.accel.scale != 8) && (
 1003              		.loc 1 272 0
 1004 0040 40F20003 		movw	r3, #:lower16:settings
 1005 0044 C0F20003 		movt	r3, #:upper16:settings
 1006 0048 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 1007 004a 022B     		cmp	r3, #2
 1008 004c 1BD0     		beq	.L20
 1009              		.loc 1 272 0 is_stmt 0 discriminator 1
 1010 004e 40F20003 		movw	r3, #:lower16:settings
 1011 0052 C0F20003 		movt	r3, #:upper16:settings
 1012 0056 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 1013 0058 042B     		cmp	r3, #4
 1014 005a 14D0     		beq	.L20
 1015 005c 40F20003 		movw	r3, #:lower16:settings
 1016 0060 C0F20003 		movt	r3, #:upper16:settings
 1017 0064 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 1018 0066 082B     		cmp	r3, #8
 1019 0068 0DD0     		beq	.L20
 1020 006a 40F20003 		movw	r3, #:lower16:settings
 1021 006e C0F20003 		movt	r3, #:upper16:settings
 1022 0072 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 1023 0074 102B     		cmp	r3, #16
 1024 0076 06D0     		beq	.L20
 273:../LSM9DS1_Driver.c **** 	{
 274:../LSM9DS1_Driver.c **** 		settings.accel.scale = 2;
 1025              		.loc 1 274 0 is_stmt 1
 1026 0078 40F20003 		movw	r3, #:lower16:settings
 1027 007c C0F20003 		movt	r3, #:upper16:settings
 1028 0080 4FF00202 		mov	r2, #2
 1029 0084 DA75     		strb	r2, [r3, #23]
 1030              	.L20:
 275:../LSM9DS1_Driver.c **** 	}
 276:../LSM9DS1_Driver.c **** 
 277:../LSM9DS1_Driver.c **** 	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) && (settings.mag.scale != 12) && (setti
 1031              		.loc 1 277 0
 1032 0086 40F20003 		movw	r3, #:lower16:settings
 1033 008a C0F20003 		movt	r3, #:upper16:settings
 1034 008e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1035 0092 042B     		cmp	r3, #4
 1036 0094 1FD0     		beq	.L18
 1037              		.loc 1 277 0 is_stmt 0 discriminator 1
 1038 0096 40F20003 		movw	r3, #:lower16:settings
 1039 009a C0F20003 		movt	r3, #:upper16:settings
 1040 009e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1041 00a2 082B     		cmp	r3, #8
 1042 00a4 17D0     		beq	.L18
 1043 00a6 40F20003 		movw	r3, #:lower16:settings
 1044 00aa C0F20003 		movt	r3, #:upper16:settings
 1045 00ae 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1046 00b2 0C2B     		cmp	r3, #12
 1047 00b4 0FD0     		beq	.L18
 1048 00b6 40F20003 		movw	r3, #:lower16:settings
 1049 00ba C0F20003 		movt	r3, #:upper16:settings
 1050 00be 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1051 00c2 102B     		cmp	r3, #16
 1052 00c4 07D0     		beq	.L18
 278:../LSM9DS1_Driver.c **** 	{
 279:../LSM9DS1_Driver.c **** 		settings.mag.scale = 4;
 1053              		.loc 1 279 0 is_stmt 1
 1054 00c6 40F20003 		movw	r3, #:lower16:settings
 1055 00ca C0F20003 		movt	r3, #:upper16:settings
 1056 00ce 4FF00402 		mov	r2, #4
 1057 00d2 83F82020 		strb	r2, [r3, #32]
 1058              	.L18:
 280:../LSM9DS1_Driver.c **** 	}
 281:../LSM9DS1_Driver.c **** }
 1059              		.loc 1 281 0
 1060 00d6 BD46     		mov	sp, r7
 1061 00d8 80BC     		pop	{r7}
 1062 00da 7047     		bx	lr
 1063              		.cfi_endproc
 1064              	.LFE123:
 1066              		.section	.text.initI2C,"ax",%progbits
 1067              		.align	2
 1068              		.global	initI2C
 1069              		.thumb
 1070              		.thumb_func
 1072              	initI2C:
 1073              	.LFB124:
 282:../LSM9DS1_Driver.c **** 
 283:../LSM9DS1_Driver.c **** 
 284:../LSM9DS1_Driver.c **** void initI2C(void)
 285:../LSM9DS1_Driver.c **** {
 1074              		.loc 1 285 0
 1075              		.cfi_startproc
 1076              		@ args = 0, pretend = 0, frame = 0
 1077              		@ frame_needed = 1, uses_anonymous_args = 0
 1078              		@ link register save eliminated.
 1079 0000 80B4     		push	{r7}
 1080              	.LCFI18:
 1081              		.cfi_def_cfa_offset 4
 1082              		.cfi_offset 7, -4
 1083 0002 00AF     		add	r7, sp, #0
 1084              	.LCFI19:
 1085              		.cfi_def_cfa_register 7
 286:../LSM9DS1_Driver.c **** 	;
 287:../LSM9DS1_Driver.c **** }
 1086              		.loc 1 287 0
 1087 0004 BD46     		mov	sp, r7
 1088 0006 80BC     		pop	{r7}
 1089 0008 7047     		bx	lr
 1090              		.cfi_endproc
 1091              	.LFE124:
 1093 000a 00BF     		.section	.text.initSPI,"ax",%progbits
 1094              		.align	2
 1095              		.global	initSPI
 1096              		.thumb
 1097              		.thumb_func
 1099              	initSPI:
 1100              	.LFB125:
 288:../LSM9DS1_Driver.c **** 
 289:../LSM9DS1_Driver.c **** void initSPI(void)
 290:../LSM9DS1_Driver.c **** {
 1101              		.loc 1 290 0
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 0
 1104              		@ frame_needed = 1, uses_anonymous_args = 0
 1105              		@ link register save eliminated.
 1106 0000 80B4     		push	{r7}
 1107              	.LCFI20:
 1108              		.cfi_def_cfa_offset 4
 1109              		.cfi_offset 7, -4
 1110 0002 00AF     		add	r7, sp, #0
 1111              	.LCFI21:
 1112              		.cfi_def_cfa_register 7
 291:../LSM9DS1_Driver.c **** 	;
 292:../LSM9DS1_Driver.c **** }
 1113              		.loc 1 292 0
 1114 0004 BD46     		mov	sp, r7
 1115 0006 80BC     		pop	{r7}
 1116 0008 7047     		bx	lr
 1117              		.cfi_endproc
 1118              	.LFE125:
 1120 000a 00BF     		.section	.text.calcgRes,"ax",%progbits
 1121              		.align	2
 1122              		.global	calcgRes
 1123              		.thumb
 1124              		.thumb_func
 1126              	calcgRes:
 1127              	.LFB126:
 293:../LSM9DS1_Driver.c **** 
 294:../LSM9DS1_Driver.c **** void calcgRes()
 295:../LSM9DS1_Driver.c **** {
 1128              		.loc 1 295 0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 0
 1131              		@ frame_needed = 1, uses_anonymous_args = 0
 1132              		@ link register save eliminated.
 1133 0000 80B4     		push	{r7}
 1134              	.LCFI22:
 1135              		.cfi_def_cfa_offset 4
 1136              		.cfi_offset 7, -4
 1137 0002 00AF     		add	r7, sp, #0
 1138              	.LCFI23:
 1139              		.cfi_def_cfa_register 7
 296:../LSM9DS1_Driver.c **** 	gRes = ((float) settings.gyro.scale) / 32768.0;
 1140              		.loc 1 296 0
 1141 0004 40F20003 		movw	r3, #:lower16:settings
 1142 0008 C0F20003 		movt	r3, #:upper16:settings
 1143 000c DB88     		ldrh	r3, [r3, #6]
 1144 000e 07EE903A 		fmsr	s15, r3	@ int
 1145 0012 B8EE677A 		fuitos	s14, s15
 1146 0016 DFED067A 		flds	s15, .L25
 1147 001a C7EE277A 		fdivs	s15, s14, s15
 1148 001e 40F20003 		movw	r3, #:lower16:gRes
 1149 0022 C0F20003 		movt	r3, #:upper16:gRes
 1150 0026 C3ED007A 		fsts	s15, [r3, #0]
 297:../LSM9DS1_Driver.c **** }
 1151              		.loc 1 297 0
 1152 002a BD46     		mov	sp, r7
 1153 002c 80BC     		pop	{r7}
 1154 002e 7047     		bx	lr
 1155              	.L26:
 1156              		.align	2
 1157              	.L25:
 1158 0030 00000047 		.word	1191182336
 1159              		.cfi_endproc
 1160              	.LFE126:
 1162              		.section	.text.calcaRes,"ax",%progbits
 1163              		.align	2
 1164              		.global	calcaRes
 1165              		.thumb
 1166              		.thumb_func
 1168              	calcaRes:
 1169              	.LFB127:
 298:../LSM9DS1_Driver.c **** 
 299:../LSM9DS1_Driver.c **** void calcaRes()
 300:../LSM9DS1_Driver.c **** {
 1170              		.loc 1 300 0
 1171              		.cfi_startproc
 1172              		@ args = 0, pretend = 0, frame = 0
 1173              		@ frame_needed = 1, uses_anonymous_args = 0
 1174              		@ link register save eliminated.
 1175 0000 80B4     		push	{r7}
 1176              	.LCFI24:
 1177              		.cfi_def_cfa_offset 4
 1178              		.cfi_offset 7, -4
 1179 0002 00AF     		add	r7, sp, #0
 1180              	.LCFI25:
 1181              		.cfi_def_cfa_register 7
 301:../LSM9DS1_Driver.c **** 	aRes = ((float) settings.accel.scale) / 32768.0;
 1182              		.loc 1 301 0
 1183 0004 40F20003 		movw	r3, #:lower16:settings
 1184 0008 C0F20003 		movt	r3, #:upper16:settings
 1185 000c DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 1186 000e 07EE903A 		fmsr	s15, r3	@ int
 1187 0012 B8EE677A 		fuitos	s14, s15
 1188 0016 DFED067A 		flds	s15, .L28
 1189 001a C7EE277A 		fdivs	s15, s14, s15
 1190 001e 40F20003 		movw	r3, #:lower16:aRes
 1191 0022 C0F20003 		movt	r3, #:upper16:aRes
 1192 0026 C3ED007A 		fsts	s15, [r3, #0]
 302:../LSM9DS1_Driver.c **** }
 1193              		.loc 1 302 0
 1194 002a BD46     		mov	sp, r7
 1195 002c 80BC     		pop	{r7}
 1196 002e 7047     		bx	lr
 1197              	.L29:
 1198              		.align	2
 1199              	.L28:
 1200 0030 00000047 		.word	1191182336
 1201              		.cfi_endproc
 1202              	.LFE127:
 1204              		.section	.text.calcmRes,"ax",%progbits
 1205              		.align	2
 1206              		.global	calcmRes
 1207              		.thumb
 1208              		.thumb_func
 1210              	calcmRes:
 1211              	.LFB128:
 303:../LSM9DS1_Driver.c **** 
 304:../LSM9DS1_Driver.c **** 
 305:../LSM9DS1_Driver.c **** void calcmRes()
 306:../LSM9DS1_Driver.c **** {
 1212              		.loc 1 306 0
 1213              		.cfi_startproc
 1214              		@ args = 0, pretend = 0, frame = 0
 1215              		@ frame_needed = 1, uses_anonymous_args = 0
 1216              		@ link register save eliminated.
 1217 0000 80B4     		push	{r7}
 1218              	.LCFI26:
 1219              		.cfi_def_cfa_offset 4
 1220              		.cfi_offset 7, -4
 1221 0002 00AF     		add	r7, sp, #0
 1222              	.LCFI27:
 1223              		.cfi_def_cfa_register 7
 307:../LSM9DS1_Driver.c **** 	//mRes = ((float) settings.mag.scale) / 32768.0;
 308:../LSM9DS1_Driver.c **** 	switch (settings.mag.scale)
 1224              		.loc 1 308 0
 1225 0004 40F20003 		movw	r3, #:lower16:settings
 1226 0008 C0F20003 		movt	r3, #:upper16:settings
 1227 000c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1228 0010 A3F10403 		sub	r3, r3, #4
 1229 0014 0C2B     		cmp	r3, #12
 1230 0016 49D8     		bhi	.L30
 1231 0018 01A2     		adr	r2, .L36
 1232 001a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1233 001e 00BF     		.align	2
 1234              	.L36:
 1235 0020 55000000 		.word	.L32+1
 1236 0024 AD000000 		.word	.L30+1
 1237 0028 AD000000 		.word	.L30+1
 1238 002c AD000000 		.word	.L30+1
 1239 0030 6B000000 		.word	.L33+1
 1240 0034 AD000000 		.word	.L30+1
 1241 0038 AD000000 		.word	.L30+1
 1242 003c AD000000 		.word	.L30+1
 1243 0040 81000000 		.word	.L34+1
 1244 0044 AD000000 		.word	.L30+1
 1245 0048 AD000000 		.word	.L30+1
 1246 004c AD000000 		.word	.L30+1
 1247 0050 97000000 		.word	.L35+1
 1248              	.L32:
 309:../LSM9DS1_Driver.c **** 	{
 310:../LSM9DS1_Driver.c **** 		case 4:
 311:../LSM9DS1_Driver.c **** 			mRes = magSensitivity[0];
 1249              		.loc 1 311 0
 1250 0054 40F20003 		movw	r3, #:lower16:magSensitivity
 1251 0058 C0F20003 		movt	r3, #:upper16:magSensitivity
 1252 005c 1A68     		ldr	r2, [r3, #0]	@ float
 1253 005e 40F20003 		movw	r3, #:lower16:mRes
 1254 0062 C0F20003 		movt	r3, #:upper16:mRes
 1255 0066 1A60     		str	r2, [r3, #0]	@ float
 312:../LSM9DS1_Driver.c **** 			break;
 1256              		.loc 1 312 0
 1257 0068 20E0     		b	.L30
 1258              	.L33:
 313:../LSM9DS1_Driver.c **** 		case 8:
 314:../LSM9DS1_Driver.c **** 			mRes = magSensitivity[1];
 1259              		.loc 1 314 0
 1260 006a 40F20003 		movw	r3, #:lower16:magSensitivity
 1261 006e C0F20003 		movt	r3, #:upper16:magSensitivity
 1262 0072 5A68     		ldr	r2, [r3, #4]	@ float
 1263 0074 40F20003 		movw	r3, #:lower16:mRes
 1264 0078 C0F20003 		movt	r3, #:upper16:mRes
 1265 007c 1A60     		str	r2, [r3, #0]	@ float
 315:../LSM9DS1_Driver.c **** 			break;
 1266              		.loc 1 315 0
 1267 007e 15E0     		b	.L30
 1268              	.L34:
 316:../LSM9DS1_Driver.c **** 		case 12:
 317:../LSM9DS1_Driver.c **** 			mRes = magSensitivity[2];
 1269              		.loc 1 317 0
 1270 0080 40F20003 		movw	r3, #:lower16:magSensitivity
 1271 0084 C0F20003 		movt	r3, #:upper16:magSensitivity
 1272 0088 9A68     		ldr	r2, [r3, #8]	@ float
 1273 008a 40F20003 		movw	r3, #:lower16:mRes
 1274 008e C0F20003 		movt	r3, #:upper16:mRes
 1275 0092 1A60     		str	r2, [r3, #0]	@ float
 318:../LSM9DS1_Driver.c **** 			break;
 1276              		.loc 1 318 0
 1277 0094 0AE0     		b	.L30
 1278              	.L35:
 319:../LSM9DS1_Driver.c **** 		case 16:
 320:../LSM9DS1_Driver.c **** 			mRes = magSensitivity[3];
 1279              		.loc 1 320 0
 1280 0096 40F20003 		movw	r3, #:lower16:magSensitivity
 1281 009a C0F20003 		movt	r3, #:upper16:magSensitivity
 1282 009e DA68     		ldr	r2, [r3, #12]	@ float
 1283 00a0 40F20003 		movw	r3, #:lower16:mRes
 1284 00a4 C0F20003 		movt	r3, #:upper16:mRes
 1285 00a8 1A60     		str	r2, [r3, #0]	@ float
 321:../LSM9DS1_Driver.c **** 			break;
 1286              		.loc 1 321 0
 1287 00aa 00BF     		nop
 1288              	.L30:
 322:../LSM9DS1_Driver.c **** 	}
 323:../LSM9DS1_Driver.c **** 
 324:../LSM9DS1_Driver.c **** }
 1289              		.loc 1 324 0
 1290 00ac BD46     		mov	sp, r7
 1291 00ae 80BC     		pop	{r7}
 1292 00b0 7047     		bx	lr
 1293              		.cfi_endproc
 1294              	.LFE128:
 1296 00b2 00BF     		.section	.text.delay,"ax",%progbits
 1297              		.align	2
 1298              		.global	delay
 1299              		.thumb
 1300              		.thumb_func
 1302              	delay:
 1303              	.LFB129:
 325:../LSM9DS1_Driver.c **** 
 326:../LSM9DS1_Driver.c **** void delay(int d)
 327:../LSM9DS1_Driver.c **** {
 1304              		.loc 1 327 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 16
 1307              		@ frame_needed = 1, uses_anonymous_args = 0
 1308              		@ link register save eliminated.
 1309 0000 80B4     		push	{r7}
 1310              	.LCFI28:
 1311              		.cfi_def_cfa_offset 4
 1312              		.cfi_offset 7, -4
 1313 0002 85B0     		sub	sp, sp, #20
 1314              	.LCFI29:
 1315              		.cfi_def_cfa_offset 24
 1316 0004 00AF     		add	r7, sp, #0
 1317              	.LCFI30:
 1318              		.cfi_def_cfa_register 7
 1319 0006 7860     		str	r0, [r7, #4]
 1320              	.LBB5:
 328:../LSM9DS1_Driver.c **** 	for(int i = 0; i < d; i++) i++;
 1321              		.loc 1 328 0
 1322 0008 4FF00003 		mov	r3, #0
 1323 000c FB60     		str	r3, [r7, #12]
 1324 000e 07E0     		b	.L38
 1325              	.L39:
 1326              		.loc 1 328 0 is_stmt 0 discriminator 2
 1327 0010 FB68     		ldr	r3, [r7, #12]
 1328 0012 03F10103 		add	r3, r3, #1
 1329 0016 FB60     		str	r3, [r7, #12]
 1330 0018 FB68     		ldr	r3, [r7, #12]
 1331 001a 03F10103 		add	r3, r3, #1
 1332 001e FB60     		str	r3, [r7, #12]
 1333              	.L38:
 1334              		.loc 1 328 0 discriminator 1
 1335 0020 FA68     		ldr	r2, [r7, #12]
 1336 0022 7B68     		ldr	r3, [r7, #4]
 1337 0024 9A42     		cmp	r2, r3
 1338 0026 F3DB     		blt	.L39
 1339              	.LBE5:
 329:../LSM9DS1_Driver.c **** }
 1340              		.loc 1 329 0 is_stmt 1
 1341 0028 07F11407 		add	r7, r7, #20
 1342 002c BD46     		mov	sp, r7
 1343 002e 80BC     		pop	{r7}
 1344 0030 7047     		bx	lr
 1345              		.cfi_endproc
 1346              	.LFE129:
 1348 0032 00BF     		.section	.text.I2CreadByte,"ax",%progbits
 1349              		.align	2
 1350              		.global	I2CreadByte
 1351              		.thumb
 1352              		.thumb_func
 1354              	I2CreadByte:
 1355              	.LFB130:
 330:../LSM9DS1_Driver.c **** 
 331:../LSM9DS1_Driver.c **** uint8_t I2CreadByte(uint8_t address, uint8_t subAddress)
 332:../LSM9DS1_Driver.c **** {
 1356              		.loc 1 332 0
 1357              		.cfi_startproc
 1358              		@ args = 0, pretend = 0, frame = 40
 1359              		@ frame_needed = 1, uses_anonymous_args = 0
 1360 0000 80B5     		push	{r7, lr}
 1361              	.LCFI31:
 1362              		.cfi_def_cfa_offset 8
 1363              		.cfi_offset 7, -8
 1364              		.cfi_offset 14, -4
 1365 0002 8AB0     		sub	sp, sp, #40
 1366              	.LCFI32:
 1367              		.cfi_def_cfa_offset 48
 1368 0004 00AF     		add	r7, sp, #0
 1369              	.LCFI33:
 1370              		.cfi_def_cfa_register 7
 1371 0006 0246     		mov	r2, r0
 1372 0008 0B46     		mov	r3, r1
 1373 000a FA71     		strb	r2, [r7, #7]
 1374 000c BB71     		strb	r3, [r7, #6]
 333:../LSM9DS1_Driver.c **** 	uint32_t stageOfReading = 0;
 1375              		.loc 1 333 0
 1376 000e 4FF00003 		mov	r3, #0
 1377 0012 7B62     		str	r3, [r7, #36]
 334:../LSM9DS1_Driver.c **** 
 335:../LSM9DS1_Driver.c **** 	//deviceAddress address = *((deviceAddress*)T);
 336:../LSM9DS1_Driver.c **** 
 337:../LSM9DS1_Driver.c **** 		I2C001_DataType data1;
 338:../LSM9DS1_Driver.c **** 		data1.Data1.TDF_Type = I2C_TDF_MStart;
 1378              		.loc 1 338 0
 1379 0014 4FF00403 		mov	r3, #4
 1380 0018 87F82130 		strb	r3, [r7, #33]
 339:../LSM9DS1_Driver.c **** 		data1.Data1.Data = ((address<<1) | I2C_WRITE);
 1381              		.loc 1 339 0
 1382 001c FB79     		ldrb	r3, [r7, #7]
 1383 001e 4FEA4303 		lsl	r3, r3, #1
 1384 0022 DBB2     		uxtb	r3, r3
 1385 0024 87F82030 		strb	r3, [r7, #32]
 340:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data1));
 1386              		.loc 1 340 0
 1387 0028 00BF     		nop
 1388              	.L41:
 1389              		.loc 1 340 0 is_stmt 0 discriminator 1
 1390 002a 07F12003 		add	r3, r7, #32
 1391 002e 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 1392 0032 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 1393 0036 1946     		mov	r1, r3
 1394 0038 FFF7FEFF 		bl	I2C001_WriteData
 1395 003c 0346     		mov	r3, r0
 1396 003e 002B     		cmp	r3, #0
 1397 0040 F3D0     		beq	.L41
 341:../LSM9DS1_Driver.c **** 
 342:../LSM9DS1_Driver.c **** 		delay(10000);
 1398              		.loc 1 342 0 is_stmt 1
 1399 0042 42F21070 		movw	r0, #10000
 1400 0046 FFF7FEFF 		bl	delay
 343:../LSM9DS1_Driver.c **** 
 344:../LSM9DS1_Driver.c **** 		I2C001_DataType data2;
 345:../LSM9DS1_Driver.c **** 		data2.Data1.TDF_Type = I2C_TDF_MTxData;
 1401              		.loc 1 345 0
 1402 004a 4FF00003 		mov	r3, #0
 1403 004e 7B77     		strb	r3, [r7, #29]
 346:../LSM9DS1_Driver.c **** 		data2.Data1.Data = subAddress;
 1404              		.loc 1 346 0
 1405 0050 BB79     		ldrb	r3, [r7, #6]
 1406 0052 3B77     		strb	r3, [r7, #28]
 347:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data2));
 1407              		.loc 1 347 0
 1408 0054 00BF     		nop
 1409              	.L42:
 1410              		.loc 1 347 0 is_stmt 0 discriminator 1
 1411 0056 07F11C03 		add	r3, r7, #28
 1412 005a 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 1413 005e C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 1414 0062 1946     		mov	r1, r3
 1415 0064 FFF7FEFF 		bl	I2C001_WriteData
 1416 0068 0346     		mov	r3, r0
 1417 006a 002B     		cmp	r3, #0
 1418 006c F3D0     		beq	.L42
 348:../LSM9DS1_Driver.c **** 
 349:../LSM9DS1_Driver.c **** 		delay(10000);
 1419              		.loc 1 349 0 is_stmt 1
 1420 006e 42F21070 		movw	r0, #10000
 1421 0072 FFF7FEFF 		bl	delay
 350:../LSM9DS1_Driver.c **** 
 351:../LSM9DS1_Driver.c **** 
 352:../LSM9DS1_Driver.c **** 		I2C001_DataType data3;
 353:../LSM9DS1_Driver.c **** 		data3.Data1.TDF_Type = I2C_TDF_MRStart;
 1422              		.loc 1 353 0
 1423 0076 4FF00503 		mov	r3, #5
 1424 007a 7B76     		strb	r3, [r7, #25]
 354:../LSM9DS1_Driver.c **** 		data3.Data1.Data = ((address<<1) | I2C_READ);
 1425              		.loc 1 354 0
 1426 007c FB79     		ldrb	r3, [r7, #7]
 1427 007e 4FEA4303 		lsl	r3, r3, #1
 1428 0082 DBB2     		uxtb	r3, r3
 1429 0084 43F00103 		orr	r3, r3, #1
 1430 0088 DBB2     		uxtb	r3, r3
 1431 008a 3B76     		strb	r3, [r7, #24]
 355:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data3));
 1432              		.loc 1 355 0
 1433 008c 00BF     		nop
 1434              	.L43:
 1435              		.loc 1 355 0 is_stmt 0 discriminator 1
 1436 008e 07F11803 		add	r3, r7, #24
 1437 0092 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 1438 0096 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 1439 009a 1946     		mov	r1, r3
 1440 009c FFF7FEFF 		bl	I2C001_WriteData
 1441 00a0 0346     		mov	r3, r0
 1442 00a2 002B     		cmp	r3, #0
 1443 00a4 F3D0     		beq	.L43
 356:../LSM9DS1_Driver.c **** 
 357:../LSM9DS1_Driver.c **** 		delay(10000);
 1444              		.loc 1 357 0 is_stmt 1
 1445 00a6 42F21070 		movw	r0, #10000
 1446 00aa FFF7FEFF 		bl	delay
 358:../LSM9DS1_Driver.c **** 
 359:../LSM9DS1_Driver.c **** 
 360:../LSM9DS1_Driver.c **** 		I2C001_DataType data4;
 361:../LSM9DS1_Driver.c **** 		data4.Data1.TDF_Type = I2C_TDF_MRxAck1;
 1447              		.loc 1 361 0
 1448 00ae 4FF00303 		mov	r3, #3
 1449 00b2 7B75     		strb	r3, [r7, #21]
 362:../LSM9DS1_Driver.c **** 		data4.Data1.Data = ubyteFF;
 1450              		.loc 1 362 0
 1451 00b4 4FF0FF03 		mov	r3, #255
 1452 00b8 3B75     		strb	r3, [r7, #20]
 363:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data4));
 1453              		.loc 1 363 0
 1454 00ba 00BF     		nop
 1455              	.L44:
 1456              		.loc 1 363 0 is_stmt 0 discriminator 1
 1457 00bc 07F11403 		add	r3, r7, #20
 1458 00c0 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 1459 00c4 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 1460 00c8 1946     		mov	r1, r3
 1461 00ca FFF7FEFF 		bl	I2C001_WriteData
 1462 00ce 0346     		mov	r3, r0
 1463 00d0 002B     		cmp	r3, #0
 1464 00d2 F3D0     		beq	.L44
 364:../LSM9DS1_Driver.c **** 
 365:../LSM9DS1_Driver.c **** 		delay(10000);
 1465              		.loc 1 365 0 is_stmt 1
 1466 00d4 42F21070 		movw	r0, #10000
 1467 00d8 FFF7FEFF 		bl	delay
 366:../LSM9DS1_Driver.c **** 
 367:../LSM9DS1_Driver.c **** 		I2C001_DataType data5;
 368:../LSM9DS1_Driver.c **** 		data5.Data1.TDF_Type = I2C_TDF_MStop;
 1468              		.loc 1 368 0
 1469 00dc 4FF00603 		mov	r3, #6
 1470 00e0 7B74     		strb	r3, [r7, #17]
 369:../LSM9DS1_Driver.c **** 		data5.Data1.Data = ubyteFF;
 1471              		.loc 1 369 0
 1472 00e2 4FF0FF03 		mov	r3, #255
 1473 00e6 3B74     		strb	r3, [r7, #16]
 370:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data5));
 1474              		.loc 1 370 0
 1475 00e8 00BF     		nop
 1476              	.L45:
 1477              		.loc 1 370 0 is_stmt 0 discriminator 1
 1478 00ea 07F11003 		add	r3, r7, #16
 1479 00ee 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 1480 00f2 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 1481 00f6 1946     		mov	r1, r3
 1482 00f8 FFF7FEFF 		bl	I2C001_WriteData
 1483 00fc 0346     		mov	r3, r0
 1484 00fe 002B     		cmp	r3, #0
 1485 0100 F3D0     		beq	.L45
 371:../LSM9DS1_Driver.c **** 		stageOfReading++;
 1486              		.loc 1 371 0 is_stmt 1
 1487 0102 7B6A     		ldr	r3, [r7, #36]
 1488 0104 03F10103 		add	r3, r3, #1
 1489 0108 7B62     		str	r3, [r7, #36]
 372:../LSM9DS1_Driver.c **** 
 373:../LSM9DS1_Driver.c **** 		delay(10000);
 1490              		.loc 1 373 0
 1491 010a 42F21070 		movw	r0, #10000
 1492 010e FFF7FEFF 		bl	delay
 374:../LSM9DS1_Driver.c **** 
 375:../LSM9DS1_Driver.c **** 		uint16_t DataReceive1 = 0;
 1493              		.loc 1 375 0
 1494 0112 4FF00003 		mov	r3, #0
 1495 0116 FB81     		strh	r3, [r7, #14]	@ movhi
 376:../LSM9DS1_Driver.c **** 		if(I2C001_ReadData(&I2C001_Handle0,&DataReceive1))
 1496              		.loc 1 376 0
 1497 0118 07F10E03 		add	r3, r7, #14
 1498 011c 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 1499 0120 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 1500 0124 1946     		mov	r1, r3
 1501 0126 FFF7FEFF 		bl	I2C001_ReadData
 1502 012a 0346     		mov	r3, r0
 1503 012c 002B     		cmp	r3, #0
 1504 012e 04D0     		beq	.L46
 377:../LSM9DS1_Driver.c **** 		{
 378:../LSM9DS1_Driver.c **** 			stageOfReading++;
 1505              		.loc 1 378 0
 1506 0130 7B6A     		ldr	r3, [r7, #36]
 1507 0132 03F10103 		add	r3, r3, #1
 1508 0136 7B62     		str	r3, [r7, #36]
 1509 0138 03E0     		b	.L47
 1510              	.L46:
 379:../LSM9DS1_Driver.c **** 		}
 380:../LSM9DS1_Driver.c **** 		else
 381:../LSM9DS1_Driver.c **** 		{
 382:../LSM9DS1_Driver.c **** 			stageOfReading--;
 1511              		.loc 1 382 0
 1512 013a 7B6A     		ldr	r3, [r7, #36]
 1513 013c 03F1FF33 		add	r3, r3, #-1
 1514 0140 7B62     		str	r3, [r7, #36]
 1515              	.L47:
 383:../LSM9DS1_Driver.c **** 		}
 384:../LSM9DS1_Driver.c **** 
 385:../LSM9DS1_Driver.c **** 		return (uint8_t)DataReceive1;
 1516              		.loc 1 385 0
 1517 0142 FB89     		ldrh	r3, [r7, #14]
 1518 0144 DBB2     		uxtb	r3, r3
 386:../LSM9DS1_Driver.c **** }
 1519              		.loc 1 386 0
 1520 0146 1846     		mov	r0, r3
 1521 0148 07F12807 		add	r7, r7, #40
 1522 014c BD46     		mov	sp, r7
 1523 014e 80BD     		pop	{r7, pc}
 1524              		.cfi_endproc
 1525              	.LFE130:
 1527              		.section	.text.mReadByte,"ax",%progbits
 1528              		.align	2
 1529              		.global	mReadByte
 1530              		.thumb
 1531              		.thumb_func
 1533              	mReadByte:
 1534              	.LFB131:
 387:../LSM9DS1_Driver.c **** 
 388:../LSM9DS1_Driver.c **** 
 389:../LSM9DS1_Driver.c **** uint8_t mReadByte(uint8_t subAddress)
 390:../LSM9DS1_Driver.c **** {
 1535              		.loc 1 390 0
 1536              		.cfi_startproc
 1537              		@ args = 0, pretend = 0, frame = 8
 1538              		@ frame_needed = 1, uses_anonymous_args = 0
 1539 0000 80B5     		push	{r7, lr}
 1540              	.LCFI34:
 1541              		.cfi_def_cfa_offset 8
 1542              		.cfi_offset 7, -8
 1543              		.cfi_offset 14, -4
 1544 0002 82B0     		sub	sp, sp, #8
 1545              	.LCFI35:
 1546              		.cfi_def_cfa_offset 16
 1547 0004 00AF     		add	r7, sp, #0
 1548              	.LCFI36:
 1549              		.cfi_def_cfa_register 7
 1550 0006 0346     		mov	r3, r0
 1551 0008 FB71     		strb	r3, [r7, #7]
 391:../LSM9DS1_Driver.c **** 	// Whether we're using I2C or SPI, read a byte using the
 392:../LSM9DS1_Driver.c **** 	// accelerometer-specific I2C address or SPI CS pin.
 393:../LSM9DS1_Driver.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)
 1552              		.loc 1 393 0
 1553 000a 40F20003 		movw	r3, #:lower16:settings
 1554 000e C0F20003 		movt	r3, #:upper16:settings
 1555 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1556 0014 012B     		cmp	r3, #1
 1557 0016 0BD1     		bne	.L50
 394:../LSM9DS1_Driver.c **** 		return I2CreadByte(_mAddress, subAddress);
 1558              		.loc 1 394 0
 1559 0018 40F20003 		movw	r3, #:lower16:_mAddress
 1560 001c C0F20003 		movt	r3, #:upper16:_mAddress
 1561 0020 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1562 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1563 0024 1046     		mov	r0, r2
 1564 0026 1946     		mov	r1, r3
 1565 0028 FFF7FEFF 		bl	I2CreadByte
 1566 002c 0346     		mov	r3, r0
 1567 002e FFE7     		b	.L49
 1568              	.L50:
 1569              	.L49:
 395:../LSM9DS1_Driver.c **** 	/*else if (settings.device.commInterface == IMU_MODE_SPI)
 396:../LSM9DS1_Driver.c **** 		return SPIreadByte(_mAddress, subAddress);*/
 397:../LSM9DS1_Driver.c **** }
 1570              		.loc 1 397 0
 1571 0030 1846     		mov	r0, r3
 1572 0032 07F10807 		add	r7, r7, #8
 1573 0036 BD46     		mov	sp, r7
 1574 0038 80BD     		pop	{r7, pc}
 1575              		.cfi_endproc
 1576              	.LFE131:
 1578 003a 00BF     		.section	.text.xgReadByte,"ax",%progbits
 1579              		.align	2
 1580              		.global	xgReadByte
 1581              		.thumb
 1582              		.thumb_func
 1584              	xgReadByte:
 1585              	.LFB132:
 398:../LSM9DS1_Driver.c **** 
 399:../LSM9DS1_Driver.c **** uint8_t xgReadByte(uint8_t subAddress)
 400:../LSM9DS1_Driver.c **** {
 1586              		.loc 1 400 0
 1587              		.cfi_startproc
 1588              		@ args = 0, pretend = 0, frame = 8
 1589              		@ frame_needed = 1, uses_anonymous_args = 0
 1590 0000 80B5     		push	{r7, lr}
 1591              	.LCFI37:
 1592              		.cfi_def_cfa_offset 8
 1593              		.cfi_offset 7, -8
 1594              		.cfi_offset 14, -4
 1595 0002 82B0     		sub	sp, sp, #8
 1596              	.LCFI38:
 1597              		.cfi_def_cfa_offset 16
 1598 0004 00AF     		add	r7, sp, #0
 1599              	.LCFI39:
 1600              		.cfi_def_cfa_register 7
 1601 0006 0346     		mov	r3, r0
 1602 0008 FB71     		strb	r3, [r7, #7]
 401:../LSM9DS1_Driver.c **** 	// Whether we're using I2C or SPI, read a byte using the
 402:../LSM9DS1_Driver.c **** 	// gyro-specific I2C address or SPI CS pin.
 403:../LSM9DS1_Driver.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)
 1603              		.loc 1 403 0
 1604 000a 40F20003 		movw	r3, #:lower16:settings
 1605 000e C0F20003 		movt	r3, #:upper16:settings
 1606 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1607 0014 012B     		cmp	r3, #1
 1608 0016 0BD1     		bne	.L53
 404:../LSM9DS1_Driver.c **** 		return I2CreadByte(_xgAddress, subAddress);
 1609              		.loc 1 404 0
 1610 0018 40F20003 		movw	r3, #:lower16:_xgAddress
 1611 001c C0F20003 		movt	r3, #:upper16:_xgAddress
 1612 0020 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1613 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1614 0024 1046     		mov	r0, r2
 1615 0026 1946     		mov	r1, r3
 1616 0028 FFF7FEFF 		bl	I2CreadByte
 1617 002c 0346     		mov	r3, r0
 1618 002e FFE7     		b	.L52
 1619              	.L53:
 1620              	.L52:
 405:../LSM9DS1_Driver.c **** 	/*else if (settings.device.commInterface == IMU_MODE_SPI)
 406:../LSM9DS1_Driver.c **** 		return SPIreadByte(_xgAddress, subAddress);*/
 407:../LSM9DS1_Driver.c **** }
 1621              		.loc 1 407 0
 1622 0030 1846     		mov	r0, r3
 1623 0032 07F10807 		add	r7, r7, #8
 1624 0036 BD46     		mov	sp, r7
 1625 0038 80BD     		pop	{r7, pc}
 1626              		.cfi_endproc
 1627              	.LFE132:
 1629 003a 00BF     		.section	.text.initGyro,"ax",%progbits
 1630              		.align	2
 1631              		.global	initGyro
 1632              		.thumb
 1633              		.thumb_func
 1635              	initGyro:
 1636              	.LFB133:
 408:../LSM9DS1_Driver.c **** 
 409:../LSM9DS1_Driver.c **** void initGyro(void)
 410:../LSM9DS1_Driver.c **** {
 1637              		.loc 1 410 0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 8
 1640              		@ frame_needed = 1, uses_anonymous_args = 0
 1641 0000 80B5     		push	{r7, lr}
 1642              	.LCFI40:
 1643              		.cfi_def_cfa_offset 8
 1644              		.cfi_offset 7, -8
 1645              		.cfi_offset 14, -4
 1646 0002 82B0     		sub	sp, sp, #8
 1647              	.LCFI41:
 1648              		.cfi_def_cfa_offset 16
 1649 0004 00AF     		add	r7, sp, #0
 1650              	.LCFI42:
 1651              		.cfi_def_cfa_register 7
 411:../LSM9DS1_Driver.c **** 	uint8_t tempRegValue = 0;
 1652              		.loc 1 411 0
 1653 0006 4FF00003 		mov	r3, #0
 1654 000a FB71     		strb	r3, [r7, #7]
 412:../LSM9DS1_Driver.c **** 
 413:../LSM9DS1_Driver.c **** 	// CTRL_REG1_G (Default value: 0x00)
 414:../LSM9DS1_Driver.c **** 	// [ODR_G2][ODR_G1][ODR_G0][FS_G1][FS_G0][0][BW_G1][BW_G0]
 415:../LSM9DS1_Driver.c **** 	// ODR_G[2:0] - Output data rate selection
 416:../LSM9DS1_Driver.c **** 	// FS_G[1:0] - Gyroscope full-scale selection
 417:../LSM9DS1_Driver.c **** 	// BW_G[1:0] - Gyroscope bandwidth selection
 418:../LSM9DS1_Driver.c **** 
 419:../LSM9DS1_Driver.c **** 	// To disable gyro, set sample rate bits to 0. We'll only set sample
 420:../LSM9DS1_Driver.c **** 	// rate if the gyro is enabled.
 421:../LSM9DS1_Driver.c **** 	if (settings.gyro.enabled)
 1655              		.loc 1 421 0
 1656 000c 40F20003 		movw	r3, #:lower16:settings
 1657 0010 C0F20003 		movt	r3, #:upper16:settings
 1658 0014 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1659 0016 002B     		cmp	r3, #0
 1660 0018 07D0     		beq	.L56
 422:../LSM9DS1_Driver.c **** 	{
 423:../LSM9DS1_Driver.c **** 		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 1661              		.loc 1 423 0
 1662 001a 40F20003 		movw	r3, #:lower16:settings
 1663 001e C0F20003 		movt	r3, #:upper16:settings
 1664 0022 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1665 0024 4FEA4313 		lsl	r3, r3, #5
 1666 0028 FB71     		strb	r3, [r7, #7]
 1667              	.L56:
 424:../LSM9DS1_Driver.c **** 	}
 425:../LSM9DS1_Driver.c **** 
 426:../LSM9DS1_Driver.c **** 	switch (settings.gyro.scale)
 1668              		.loc 1 426 0
 1669 002a 40F20003 		movw	r3, #:lower16:settings
 1670 002e C0F20003 		movt	r3, #:upper16:settings
 1671 0032 DB88     		ldrh	r3, [r3, #6]
 1672 0034 B3F5FA7F 		cmp	r3, #500
 1673 0038 03D0     		beq	.L58
 1674 003a B3F5FA6F 		cmp	r3, #2000
 1675 003e 05D0     		beq	.L59
 1676 0040 09E0     		b	.L57
 1677              	.L58:
 427:../LSM9DS1_Driver.c **** 	{
 428:../LSM9DS1_Driver.c **** 		case 500:
 429:../LSM9DS1_Driver.c **** 			tempRegValue |= (0x1 << 3);
 1678              		.loc 1 429 0
 1679 0042 FB79     		ldrb	r3, [r7, #7]
 1680 0044 43F00803 		orr	r3, r3, #8
 1681 0048 FB71     		strb	r3, [r7, #7]
 430:../LSM9DS1_Driver.c **** 			break;
 1682              		.loc 1 430 0
 1683 004a 04E0     		b	.L57
 1684              	.L59:
 431:../LSM9DS1_Driver.c **** 		case 2000:
 432:../LSM9DS1_Driver.c **** 			tempRegValue |= (0x3 << 3);
 1685              		.loc 1 432 0
 1686 004c FB79     		ldrb	r3, [r7, #7]
 1687 004e 43F01803 		orr	r3, r3, #24
 1688 0052 FB71     		strb	r3, [r7, #7]
 433:../LSM9DS1_Driver.c **** 			break;
 1689              		.loc 1 433 0
 1690 0054 00BF     		nop
 1691              	.L57:
 434:../LSM9DS1_Driver.c **** 		// Otherwise we'll set it to 245 dps (0x0 << 4)
 435:../LSM9DS1_Driver.c **** 	}
 436:../LSM9DS1_Driver.c **** 	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 1692              		.loc 1 436 0
 1693 0056 40F20003 		movw	r3, #:lower16:settings
 1694 005a C0F20003 		movt	r3, #:upper16:settings
 1695 005e 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 1696 0060 DBB2     		uxtb	r3, r3
 1697 0062 03F00303 		and	r3, r3, #3
 1698 0066 DAB2     		uxtb	r2, r3
 1699 0068 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1700 006a 1343     		orrs	r3, r3, r2
 1701 006c DBB2     		uxtb	r3, r3
 1702 006e FB71     		strb	r3, [r7, #7]
 437:../LSM9DS1_Driver.c **** 	xgWriteByte(CTRL_REG1_G, tempRegValue);
 1703              		.loc 1 437 0
 1704 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1705 0072 4FF01000 		mov	r0, #16
 1706 0076 1946     		mov	r1, r3
 1707 0078 FFF7FEFF 		bl	xgWriteByte
 438:../LSM9DS1_Driver.c **** 
 439:../LSM9DS1_Driver.c **** 	// CTRL_REG2_G (Default value: 0x00)
 440:../LSM9DS1_Driver.c **** 	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
 441:../LSM9DS1_Driver.c **** 	// INT_SEL[1:0] - INT selection configuration
 442:../LSM9DS1_Driver.c **** 	// OUT_SEL[1:0] - Out selection configuration
 443:../LSM9DS1_Driver.c **** 	xgWriteByte(CTRL_REG2_G, 0x00);
 1708              		.loc 1 443 0
 1709 007c 4FF01100 		mov	r0, #17
 1710 0080 4FF00001 		mov	r1, #0
 1711 0084 FFF7FEFF 		bl	xgWriteByte
 444:../LSM9DS1_Driver.c **** 
 445:../LSM9DS1_Driver.c **** 	// CTRL_REG3_G (Default value: 0x00)
 446:../LSM9DS1_Driver.c **** 	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
 447:../LSM9DS1_Driver.c **** 	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
 448:../LSM9DS1_Driver.c **** 	// HP_EN - HPF enable (0:disabled, 1: enabled)
 449:../LSM9DS1_Driver.c **** 	// HPCF_G[3:0] - HPF cutoff frequency
 450:../LSM9DS1_Driver.c **** 	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 1712              		.loc 1 450 0
 1713 0088 40F20003 		movw	r3, #:lower16:settings
 1714 008c C0F20003 		movt	r3, #:upper16:settings
 1715 0090 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1716 0092 002B     		cmp	r3, #0
 1717 0094 02D0     		beq	.L60
 1718              		.loc 1 450 0 is_stmt 0 discriminator 1
 1719 0096 4FF08003 		mov	r3, #128
 1720 009a 01E0     		b	.L61
 1721              	.L60:
 1722              		.loc 1 450 0 discriminator 2
 1723 009c 4FF00003 		mov	r3, #0
 1724              	.L61:
 1725              		.loc 1 450 0 discriminator 3
 1726 00a0 FB71     		strb	r3, [r7, #7]
 451:../LSM9DS1_Driver.c **** 	if (settings.gyro.HPFEnable)
 1727              		.loc 1 451 0 is_stmt 1 discriminator 3
 1728 00a2 40F20003 		movw	r3, #:lower16:settings
 1729 00a6 C0F20003 		movt	r3, #:upper16:settings
 1730 00aa DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1731 00ac 002B     		cmp	r3, #0
 1732 00ae 0FD0     		beq	.L62
 452:../LSM9DS1_Driver.c **** 	{
 453:../LSM9DS1_Driver.c **** 		tempRegValue |= ((1<<6) | (settings.gyro.HPFCutoff & 0x0F));
 1733              		.loc 1 453 0
 1734 00b0 40F20003 		movw	r3, #:lower16:settings
 1735 00b4 C0F20003 		movt	r3, #:upper16:settings
 1736 00b8 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1737 00ba DBB2     		uxtb	r3, r3
 1738 00bc 03F00F03 		and	r3, r3, #15
 1739 00c0 DBB2     		uxtb	r3, r3
 1740 00c2 43F04003 		orr	r3, r3, #64
 1741 00c6 DAB2     		uxtb	r2, r3
 1742 00c8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1743 00ca 1343     		orrs	r3, r3, r2
 1744 00cc DBB2     		uxtb	r3, r3
 1745 00ce FB71     		strb	r3, [r7, #7]
 1746              	.L62:
 454:../LSM9DS1_Driver.c **** 	}
 455:../LSM9DS1_Driver.c **** 	xgWriteByte(CTRL_REG3_G, tempRegValue);
 1747              		.loc 1 455 0
 1748 00d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1749 00d2 4FF01200 		mov	r0, #18
 1750 00d6 1946     		mov	r1, r3
 1751 00d8 FFF7FEFF 		bl	xgWriteByte
 456:../LSM9DS1_Driver.c **** 
 457:../LSM9DS1_Driver.c **** 	// CTRL_REG4 (Default value: 0x38)
 458:../LSM9DS1_Driver.c **** 	// [0][0][Zen_G][Yen_G][Xen_G][0][LIR_XL1][4D_XL1]
 459:../LSM9DS1_Driver.c **** 	// Zen_G - Z-axis output enable (0:disable, 1:enable)
 460:../LSM9DS1_Driver.c **** 	// Yen_G - Y-axis output enable (0:disable, 1:enable)
 461:../LSM9DS1_Driver.c **** 	// Xen_G - X-axis output enable (0:disable, 1:enable)
 462:../LSM9DS1_Driver.c **** 	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
 463:../LSM9DS1_Driver.c **** 	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
 464:../LSM9DS1_Driver.c **** 	tempRegValue = 0;
 1752              		.loc 1 464 0
 1753 00dc 4FF00003 		mov	r3, #0
 1754 00e0 FB71     		strb	r3, [r7, #7]
 465:../LSM9DS1_Driver.c **** 	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 1755              		.loc 1 465 0
 1756 00e2 40F20003 		movw	r3, #:lower16:settings
 1757 00e6 C0F20003 		movt	r3, #:upper16:settings
 1758 00ea DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 1759 00ec 002B     		cmp	r3, #0
 1760 00ee 03D0     		beq	.L63
 1761              		.loc 1 465 0 is_stmt 0 discriminator 1
 1762 00f0 FB79     		ldrb	r3, [r7, #7]
 1763 00f2 43F02003 		orr	r3, r3, #32
 1764 00f6 FB71     		strb	r3, [r7, #7]
 1765              	.L63:
 466:../LSM9DS1_Driver.c **** 	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 1766              		.loc 1 466 0 is_stmt 1
 1767 00f8 40F20003 		movw	r3, #:lower16:settings
 1768 00fc C0F20003 		movt	r3, #:upper16:settings
 1769 0100 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 1770 0102 002B     		cmp	r3, #0
 1771 0104 03D0     		beq	.L64
 1772              		.loc 1 466 0 is_stmt 0 discriminator 1
 1773 0106 FB79     		ldrb	r3, [r7, #7]
 1774 0108 43F01003 		orr	r3, r3, #16
 1775 010c FB71     		strb	r3, [r7, #7]
 1776              	.L64:
 467:../LSM9DS1_Driver.c **** 	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 1777              		.loc 1 467 0 is_stmt 1
 1778 010e 40F20003 		movw	r3, #:lower16:settings
 1779 0112 C0F20003 		movt	r3, #:upper16:settings
 1780 0116 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 1781 0118 002B     		cmp	r3, #0
 1782 011a 03D0     		beq	.L65
 1783              		.loc 1 467 0 is_stmt 0 discriminator 1
 1784 011c FB79     		ldrb	r3, [r7, #7]
 1785 011e 43F00803 		orr	r3, r3, #8
 1786 0122 FB71     		strb	r3, [r7, #7]
 1787              	.L65:
 468:../LSM9DS1_Driver.c **** 	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 1788              		.loc 1 468 0 is_stmt 1
 1789 0124 40F20003 		movw	r3, #:lower16:settings
 1790 0128 C0F20003 		movt	r3, #:upper16:settings
 1791 012c 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1792 012e 002B     		cmp	r3, #0
 1793 0130 03D0     		beq	.L66
 1794              		.loc 1 468 0 is_stmt 0 discriminator 1
 1795 0132 FB79     		ldrb	r3, [r7, #7]
 1796 0134 43F00203 		orr	r3, r3, #2
 1797 0138 FB71     		strb	r3, [r7, #7]
 1798              	.L66:
 469:../LSM9DS1_Driver.c **** 	xgWriteByte(CTRL_REG4, tempRegValue);
 1799              		.loc 1 469 0 is_stmt 1
 1800 013a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1801 013c 4FF01E00 		mov	r0, #30
 1802 0140 1946     		mov	r1, r3
 1803 0142 FFF7FEFF 		bl	xgWriteByte
 470:../LSM9DS1_Driver.c **** 
 471:../LSM9DS1_Driver.c **** 	// ORIENT_CFG_G (Default value: 0x00)
 472:../LSM9DS1_Driver.c **** 	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
 473:../LSM9DS1_Driver.c **** 	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
 474:../LSM9DS1_Driver.c **** 	// Orient [2:0] - Directional user orientation selection
 475:../LSM9DS1_Driver.c **** 	tempRegValue = 0;
 1804              		.loc 1 475 0
 1805 0146 4FF00003 		mov	r3, #0
 1806 014a FB71     		strb	r3, [r7, #7]
 476:../LSM9DS1_Driver.c **** 	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 1807              		.loc 1 476 0
 1808 014c 40F20003 		movw	r3, #:lower16:settings
 1809 0150 C0F20003 		movt	r3, #:upper16:settings
 1810 0154 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 1811 0156 002B     		cmp	r3, #0
 1812 0158 03D0     		beq	.L67
 1813              		.loc 1 476 0 is_stmt 0 discriminator 1
 1814 015a FB79     		ldrb	r3, [r7, #7]
 1815 015c 43F02003 		orr	r3, r3, #32
 1816 0160 FB71     		strb	r3, [r7, #7]
 1817              	.L67:
 477:../LSM9DS1_Driver.c **** 	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 1818              		.loc 1 477 0 is_stmt 1
 1819 0162 40F20003 		movw	r3, #:lower16:settings
 1820 0166 C0F20003 		movt	r3, #:upper16:settings
 1821 016a 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1822 016c 002B     		cmp	r3, #0
 1823 016e 03D0     		beq	.L68
 1824              		.loc 1 477 0 is_stmt 0 discriminator 1
 1825 0170 FB79     		ldrb	r3, [r7, #7]
 1826 0172 43F01003 		orr	r3, r3, #16
 1827 0176 FB71     		strb	r3, [r7, #7]
 1828              	.L68:
 478:../LSM9DS1_Driver.c **** 	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 1829              		.loc 1 478 0 is_stmt 1
 1830 0178 40F20003 		movw	r3, #:lower16:settings
 1831 017c C0F20003 		movt	r3, #:upper16:settings
 1832 0180 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 1833 0182 002B     		cmp	r3, #0
 1834 0184 03D0     		beq	.L69
 1835              		.loc 1 478 0 is_stmt 0 discriminator 1
 1836 0186 FB79     		ldrb	r3, [r7, #7]
 1837 0188 43F00803 		orr	r3, r3, #8
 1838 018c FB71     		strb	r3, [r7, #7]
 1839              	.L69:
 479:../LSM9DS1_Driver.c **** 	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 1840              		.loc 1 479 0 is_stmt 1
 1841 018e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1842 0190 4FF01300 		mov	r0, #19
 1843 0194 1946     		mov	r1, r3
 1844 0196 FFF7FEFF 		bl	xgWriteByte
 480:../LSM9DS1_Driver.c **** }
 1845              		.loc 1 480 0
 1846 019a 07F10807 		add	r7, r7, #8
 1847 019e BD46     		mov	sp, r7
 1848 01a0 80BD     		pop	{r7, pc}
 1849              		.cfi_endproc
 1850              	.LFE133:
 1852 01a2 00BF     		.section	.text.xgWriteByte,"ax",%progbits
 1853              		.align	2
 1854              		.global	xgWriteByte
 1855              		.thumb
 1856              		.thumb_func
 1858              	xgWriteByte:
 1859              	.LFB134:
 481:../LSM9DS1_Driver.c **** 
 482:../LSM9DS1_Driver.c **** 
 483:../LSM9DS1_Driver.c **** void xgWriteByte(uint8_t subAddress, uint8_t data)
 484:../LSM9DS1_Driver.c **** {
 1860              		.loc 1 484 0
 1861              		.cfi_startproc
 1862              		@ args = 0, pretend = 0, frame = 8
 1863              		@ frame_needed = 1, uses_anonymous_args = 0
 1864 0000 80B5     		push	{r7, lr}
 1865              	.LCFI43:
 1866              		.cfi_def_cfa_offset 8
 1867              		.cfi_offset 7, -8
 1868              		.cfi_offset 14, -4
 1869 0002 82B0     		sub	sp, sp, #8
 1870              	.LCFI44:
 1871              		.cfi_def_cfa_offset 16
 1872 0004 00AF     		add	r7, sp, #0
 1873              	.LCFI45:
 1874              		.cfi_def_cfa_register 7
 1875 0006 0246     		mov	r2, r0
 1876 0008 0B46     		mov	r3, r1
 1877 000a FA71     		strb	r2, [r7, #7]
 1878 000c BB71     		strb	r3, [r7, #6]
 485:../LSM9DS1_Driver.c **** 	// Whether we're using I2C or SPI, write a byte using the
 486:../LSM9DS1_Driver.c **** 	// gyro-specific I2C address or SPI CS pin.
 487:../LSM9DS1_Driver.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)
 1879              		.loc 1 487 0
 1880 000e 40F20003 		movw	r3, #:lower16:settings
 1881 0012 C0F20003 		movt	r3, #:upper16:settings
 1882 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1883 0018 012B     		cmp	r3, #1
 1884 001a 0BD1     		bne	.L70
 488:../LSM9DS1_Driver.c **** 	{
 489:../LSM9DS1_Driver.c **** 		I2CwriteByte(_xgAddress, subAddress, data);
 1885              		.loc 1 489 0
 1886 001c 40F20003 		movw	r3, #:lower16:_xgAddress
 1887 0020 C0F20003 		movt	r3, #:upper16:_xgAddress
 1888 0024 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1889 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1890 0028 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1891 002a 0846     		mov	r0, r1
 1892 002c 1146     		mov	r1, r2
 1893 002e 1A46     		mov	r2, r3
 1894 0030 FFF7FEFF 		bl	I2CwriteByte
 1895              	.L70:
 490:../LSM9DS1_Driver.c **** 	}
 491:../LSM9DS1_Driver.c **** }
 1896              		.loc 1 491 0
 1897 0034 07F10807 		add	r7, r7, #8
 1898 0038 BD46     		mov	sp, r7
 1899 003a 80BD     		pop	{r7, pc}
 1900              		.cfi_endproc
 1901              	.LFE134:
 1903              		.section	.text.I2CwriteByte,"ax",%progbits
 1904              		.align	2
 1905              		.global	I2CwriteByte
 1906              		.thumb
 1907              		.thumb_func
 1909              	I2CwriteByte:
 1910              	.LFB135:
 492:../LSM9DS1_Driver.c **** 
 493:../LSM9DS1_Driver.c **** void I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
 494:../LSM9DS1_Driver.c **** {
 1911              		.loc 1 494 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 24
 1914              		@ frame_needed = 1, uses_anonymous_args = 0
 1915 0000 80B5     		push	{r7, lr}
 1916              	.LCFI46:
 1917              		.cfi_def_cfa_offset 8
 1918              		.cfi_offset 7, -8
 1919              		.cfi_offset 14, -4
 1920 0002 86B0     		sub	sp, sp, #24
 1921              	.LCFI47:
 1922              		.cfi_def_cfa_offset 32
 1923 0004 00AF     		add	r7, sp, #0
 1924              	.LCFI48:
 1925              		.cfi_def_cfa_register 7
 1926 0006 1346     		mov	r3, r2
 1927 0008 0246     		mov	r2, r0
 1928 000a FA71     		strb	r2, [r7, #7]
 1929 000c 0A46     		mov	r2, r1
 1930 000e BA71     		strb	r2, [r7, #6]
 1931 0010 7B71     		strb	r3, [r7, #5]
 495:../LSM9DS1_Driver.c **** 
 496:../LSM9DS1_Driver.c **** 		I2C001_DataType data1;
 497:../LSM9DS1_Driver.c **** 		data1.Data1.TDF_Type = I2C_TDF_MStart;
 1932              		.loc 1 497 0
 1933 0012 4FF00403 		mov	r3, #4
 1934 0016 7B75     		strb	r3, [r7, #21]
 498:../LSM9DS1_Driver.c **** 		data1.Data1.Data = ((address<<1) | I2C_WRITE);
 1935              		.loc 1 498 0
 1936 0018 FB79     		ldrb	r3, [r7, #7]
 1937 001a 4FEA4303 		lsl	r3, r3, #1
 1938 001e DBB2     		uxtb	r3, r3
 1939 0020 3B75     		strb	r3, [r7, #20]
 499:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data1));
 1940              		.loc 1 499 0
 1941 0022 00BF     		nop
 1942              	.L73:
 1943              		.loc 1 499 0 is_stmt 0 discriminator 1
 1944 0024 07F11403 		add	r3, r7, #20
 1945 0028 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 1946 002c C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 1947 0030 1946     		mov	r1, r3
 1948 0032 FFF7FEFF 		bl	I2C001_WriteData
 1949 0036 0346     		mov	r3, r0
 1950 0038 002B     		cmp	r3, #0
 1951 003a F3D0     		beq	.L73
 500:../LSM9DS1_Driver.c **** 
 501:../LSM9DS1_Driver.c **** 		delay(10000);
 1952              		.loc 1 501 0 is_stmt 1
 1953 003c 42F21070 		movw	r0, #10000
 1954 0040 FFF7FEFF 		bl	delay
 502:../LSM9DS1_Driver.c **** 
 503:../LSM9DS1_Driver.c **** 		I2C001_DataType data2;
 504:../LSM9DS1_Driver.c **** 		data2.Data1.TDF_Type = I2C_TDF_MTxData;
 1955              		.loc 1 504 0
 1956 0044 4FF00003 		mov	r3, #0
 1957 0048 7B74     		strb	r3, [r7, #17]
 505:../LSM9DS1_Driver.c **** 		data2.Data1.Data = subAddress;
 1958              		.loc 1 505 0
 1959 004a BB79     		ldrb	r3, [r7, #6]
 1960 004c 3B74     		strb	r3, [r7, #16]
 506:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data2));
 1961              		.loc 1 506 0
 1962 004e 00BF     		nop
 1963              	.L74:
 1964              		.loc 1 506 0 is_stmt 0 discriminator 1
 1965 0050 07F11003 		add	r3, r7, #16
 1966 0054 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 1967 0058 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 1968 005c 1946     		mov	r1, r3
 1969 005e FFF7FEFF 		bl	I2C001_WriteData
 1970 0062 0346     		mov	r3, r0
 1971 0064 002B     		cmp	r3, #0
 1972 0066 F3D0     		beq	.L74
 507:../LSM9DS1_Driver.c **** 
 508:../LSM9DS1_Driver.c **** 		delay(10000);
 1973              		.loc 1 508 0 is_stmt 1
 1974 0068 42F21070 		movw	r0, #10000
 1975 006c FFF7FEFF 		bl	delay
 509:../LSM9DS1_Driver.c **** 
 510:../LSM9DS1_Driver.c **** 		I2C001_DataType data3;
 511:../LSM9DS1_Driver.c **** 		data3.Data1.TDF_Type = I2C_TDF_MTxData;
 1976              		.loc 1 511 0
 1977 0070 4FF00003 		mov	r3, #0
 1978 0074 7B73     		strb	r3, [r7, #13]
 512:../LSM9DS1_Driver.c **** 		data3.Data1.Data = data;
 1979              		.loc 1 512 0
 1980 0076 7B79     		ldrb	r3, [r7, #5]
 1981 0078 3B73     		strb	r3, [r7, #12]
 513:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data3));
 1982              		.loc 1 513 0
 1983 007a 00BF     		nop
 1984              	.L75:
 1985              		.loc 1 513 0 is_stmt 0 discriminator 1
 1986 007c 07F10C03 		add	r3, r7, #12
 1987 0080 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 1988 0084 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 1989 0088 1946     		mov	r1, r3
 1990 008a FFF7FEFF 		bl	I2C001_WriteData
 1991 008e 0346     		mov	r3, r0
 1992 0090 002B     		cmp	r3, #0
 1993 0092 F3D0     		beq	.L75
 514:../LSM9DS1_Driver.c **** 
 515:../LSM9DS1_Driver.c **** 		delay(10000);
 1994              		.loc 1 515 0 is_stmt 1
 1995 0094 42F21070 		movw	r0, #10000
 1996 0098 FFF7FEFF 		bl	delay
 516:../LSM9DS1_Driver.c **** 
 517:../LSM9DS1_Driver.c **** 		I2C001_DataType data4;
 518:../LSM9DS1_Driver.c **** 		data4.Data1.TDF_Type = I2C_TDF_MStop;
 1997              		.loc 1 518 0
 1998 009c 4FF00603 		mov	r3, #6
 1999 00a0 7B72     		strb	r3, [r7, #9]
 519:../LSM9DS1_Driver.c **** 		data4.Data1.Data = ubyteFF;
 2000              		.loc 1 519 0
 2001 00a2 4FF0FF03 		mov	r3, #255
 2002 00a6 3B72     		strb	r3, [r7, #8]
 520:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data4));
 2003              		.loc 1 520 0
 2004 00a8 00BF     		nop
 2005              	.L76:
 2006              		.loc 1 520 0 is_stmt 0 discriminator 1
 2007 00aa 07F10803 		add	r3, r7, #8
 2008 00ae 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 2009 00b2 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 2010 00b6 1946     		mov	r1, r3
 2011 00b8 FFF7FEFF 		bl	I2C001_WriteData
 2012 00bc 0346     		mov	r3, r0
 2013 00be 002B     		cmp	r3, #0
 2014 00c0 F3D0     		beq	.L76
 521:../LSM9DS1_Driver.c **** 
 522:../LSM9DS1_Driver.c **** 		delay(10000);
 2015              		.loc 1 522 0 is_stmt 1
 2016 00c2 42F21070 		movw	r0, #10000
 2017 00c6 FFF7FEFF 		bl	delay
 523:../LSM9DS1_Driver.c **** }
 2018              		.loc 1 523 0
 2019 00ca 07F11807 		add	r7, r7, #24
 2020 00ce BD46     		mov	sp, r7
 2021 00d0 80BD     		pop	{r7, pc}
 2022              		.cfi_endproc
 2023              	.LFE135:
 2025 00d2 00BF     		.section	.text.initAccel,"ax",%progbits
 2026              		.align	2
 2027              		.global	initAccel
 2028              		.thumb
 2029              		.thumb_func
 2031              	initAccel:
 2032              	.LFB136:
 524:../LSM9DS1_Driver.c **** 
 525:../LSM9DS1_Driver.c **** void initAccel(void)
 526:../LSM9DS1_Driver.c **** {
 2033              		.loc 1 526 0
 2034              		.cfi_startproc
 2035              		@ args = 0, pretend = 0, frame = 8
 2036              		@ frame_needed = 1, uses_anonymous_args = 0
 2037 0000 80B5     		push	{r7, lr}
 2038              	.LCFI49:
 2039              		.cfi_def_cfa_offset 8
 2040              		.cfi_offset 7, -8
 2041              		.cfi_offset 14, -4
 2042 0002 82B0     		sub	sp, sp, #8
 2043              	.LCFI50:
 2044              		.cfi_def_cfa_offset 16
 2045 0004 00AF     		add	r7, sp, #0
 2046              	.LCFI51:
 2047              		.cfi_def_cfa_register 7
 527:../LSM9DS1_Driver.c **** 	uint8_t tempRegValue = 0;
 2048              		.loc 1 527 0
 2049 0006 4FF00003 		mov	r3, #0
 2050 000a FB71     		strb	r3, [r7, #7]
 528:../LSM9DS1_Driver.c **** 
 529:../LSM9DS1_Driver.c **** 	//	CTRL_REG5_XL (0x1F) (Default value: 0x38)
 530:../LSM9DS1_Driver.c **** 	//	[DEC_1][DEC_0][Zen_XL][Yen_XL][Zen_XL][0][0][0]
 531:../LSM9DS1_Driver.c **** 	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
 532:../LSM9DS1_Driver.c **** 	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
 533:../LSM9DS1_Driver.c **** 	//	Zen_XL - Z-axis output enabled
 534:../LSM9DS1_Driver.c **** 	//	Yen_XL - Y-axis output enabled
 535:../LSM9DS1_Driver.c **** 	//	Xen_XL - X-axis output enabled
 536:../LSM9DS1_Driver.c **** 	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 2051              		.loc 1 536 0
 2052 000c 40F20003 		movw	r3, #:lower16:settings
 2053 0010 C0F20003 		movt	r3, #:upper16:settings
 2054 0014 DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 2055 0016 002B     		cmp	r3, #0
 2056 0018 03D0     		beq	.L78
 2057              		.loc 1 536 0 is_stmt 0 discriminator 1
 2058 001a FB79     		ldrb	r3, [r7, #7]
 2059 001c 43F02003 		orr	r3, r3, #32
 2060 0020 FB71     		strb	r3, [r7, #7]
 2061              	.L78:
 537:../LSM9DS1_Driver.c **** 	if (settings.accel.enableY) tempRegValue |= (1<<4);
 2062              		.loc 1 537 0 is_stmt 1
 2063 0022 40F20003 		movw	r3, #:lower16:settings
 2064 0026 C0F20003 		movt	r3, #:upper16:settings
 2065 002a 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 2066 002c 002B     		cmp	r3, #0
 2067 002e 03D0     		beq	.L79
 2068              		.loc 1 537 0 is_stmt 0 discriminator 1
 2069 0030 FB79     		ldrb	r3, [r7, #7]
 2070 0032 43F01003 		orr	r3, r3, #16
 2071 0036 FB71     		strb	r3, [r7, #7]
 2072              	.L79:
 538:../LSM9DS1_Driver.c **** 	if (settings.accel.enableX) tempRegValue |= (1<<3);
 2073              		.loc 1 538 0 is_stmt 1
 2074 0038 40F20003 		movw	r3, #:lower16:settings
 2075 003c C0F20003 		movt	r3, #:upper16:settings
 2076 0040 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 2077 0042 002B     		cmp	r3, #0
 2078 0044 03D0     		beq	.L80
 2079              		.loc 1 538 0 is_stmt 0 discriminator 1
 2080 0046 FB79     		ldrb	r3, [r7, #7]
 2081 0048 43F00803 		orr	r3, r3, #8
 2082 004c FB71     		strb	r3, [r7, #7]
 2083              	.L80:
 539:../LSM9DS1_Driver.c **** 
 540:../LSM9DS1_Driver.c **** 	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 2084              		.loc 1 540 0 is_stmt 1
 2085 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2086 0050 4FF01F00 		mov	r0, #31
 2087 0054 1946     		mov	r1, r3
 2088 0056 FFF7FEFF 		bl	xgWriteByte
 541:../LSM9DS1_Driver.c **** 
 542:../LSM9DS1_Driver.c **** 	// CTRL_REG6_XL (0x20) (Default value: 0x00)
 543:../LSM9DS1_Driver.c **** 	// [ODR_XL2][ODR_XL1][ODR_XL0][FS1_XL][FS0_XL][BW_SCAL_ODR][BW_XL1][BW_XL0]
 544:../LSM9DS1_Driver.c **** 	// ODR_XL[2:0] - Output data rate & power mode selection
 545:../LSM9DS1_Driver.c **** 	// FS_XL[1:0] - Full-scale selection
 546:../LSM9DS1_Driver.c **** 	// BW_SCAL_ODR - Bandwidth selection
 547:../LSM9DS1_Driver.c **** 	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
 548:../LSM9DS1_Driver.c **** 	tempRegValue = 0;
 2089              		.loc 1 548 0
 2090 005a 4FF00003 		mov	r3, #0
 2091 005e FB71     		strb	r3, [r7, #7]
 549:../LSM9DS1_Driver.c **** 	// To disable the accel, set the sampleRate bits to 0.
 550:../LSM9DS1_Driver.c **** 	if (settings.accel.enabled)
 2092              		.loc 1 550 0
 2093 0060 40F20003 		movw	r3, #:lower16:settings
 2094 0064 C0F20003 		movt	r3, #:upper16:settings
 2095 0068 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2096 006a 002B     		cmp	r3, #0
 2097 006c 0BD0     		beq	.L81
 551:../LSM9DS1_Driver.c **** 	{
 552:../LSM9DS1_Driver.c **** 		tempRegValue |= ((settings.accel.sampleRate & 0x07) << 5);
 2098              		.loc 1 552 0
 2099 006e 40F20003 		movw	r3, #:lower16:settings
 2100 0072 C0F20003 		movt	r3, #:upper16:settings
 2101 0076 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 2102 0078 4FEA4313 		lsl	r3, r3, #5
 2103 007c DAB2     		uxtb	r2, r3
 2104 007e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2105 0080 1343     		orrs	r3, r3, r2
 2106 0082 DBB2     		uxtb	r3, r3
 2107 0084 FB71     		strb	r3, [r7, #7]
 2108              	.L81:
 553:../LSM9DS1_Driver.c **** 	}
 554:../LSM9DS1_Driver.c **** 	switch (settings.accel.scale)
 2109              		.loc 1 554 0
 2110 0086 40F20003 		movw	r3, #:lower16:settings
 2111 008a C0F20003 		movt	r3, #:upper16:settings
 2112 008e DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 2113 0090 082B     		cmp	r3, #8
 2114 0092 08D0     		beq	.L84
 2115 0094 102B     		cmp	r3, #16
 2116 0096 0BD0     		beq	.L85
 2117 0098 042B     		cmp	r3, #4
 2118 009a 0ED1     		bne	.L82
 2119              	.L83:
 555:../LSM9DS1_Driver.c **** 	{
 556:../LSM9DS1_Driver.c **** 		case 4:
 557:../LSM9DS1_Driver.c **** 			tempRegValue |= (0x2 << 3);
 2120              		.loc 1 557 0
 2121 009c FB79     		ldrb	r3, [r7, #7]
 2122 009e 43F01003 		orr	r3, r3, #16
 2123 00a2 FB71     		strb	r3, [r7, #7]
 558:../LSM9DS1_Driver.c **** 			break;
 2124              		.loc 1 558 0
 2125 00a4 09E0     		b	.L82
 2126              	.L84:
 559:../LSM9DS1_Driver.c **** 		case 8:
 560:../LSM9DS1_Driver.c **** 			tempRegValue |= (0x3 << 3);
 2127              		.loc 1 560 0
 2128 00a6 FB79     		ldrb	r3, [r7, #7]
 2129 00a8 43F01803 		orr	r3, r3, #24
 2130 00ac FB71     		strb	r3, [r7, #7]
 561:../LSM9DS1_Driver.c **** 			break;
 2131              		.loc 1 561 0
 2132 00ae 04E0     		b	.L82
 2133              	.L85:
 562:../LSM9DS1_Driver.c **** 		case 16:
 563:../LSM9DS1_Driver.c **** 			tempRegValue |= (0x1 << 3);
 2134              		.loc 1 563 0
 2135 00b0 FB79     		ldrb	r3, [r7, #7]
 2136 00b2 43F00803 		orr	r3, r3, #8
 2137 00b6 FB71     		strb	r3, [r7, #7]
 564:../LSM9DS1_Driver.c **** 			break;
 2138              		.loc 1 564 0
 2139 00b8 00BF     		nop
 2140              	.L82:
 565:../LSM9DS1_Driver.c **** 		// Otherwise it'll be set to 2g (0x0 << 3)
 566:../LSM9DS1_Driver.c **** 	}
 567:../LSM9DS1_Driver.c **** 	if (settings.accel.bandwidth >= 0)
 2141              		.loc 1 567 0
 2142 00ba 40F20003 		movw	r3, #:lower16:settings
 2143 00be C0F20003 		movt	r3, #:upper16:settings
 2144 00c2 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2145 00c4 5BB2     		sxtb	r3, r3
 2146 00c6 002B     		cmp	r3, #0
 2147 00c8 0FDB     		blt	.L86
 568:../LSM9DS1_Driver.c **** 	{
 569:../LSM9DS1_Driver.c **** 		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
 2148              		.loc 1 569 0
 2149 00ca FB79     		ldrb	r3, [r7, #7]
 2150 00cc 43F00403 		orr	r3, r3, #4
 2151 00d0 FB71     		strb	r3, [r7, #7]
 570:../LSM9DS1_Driver.c **** 		tempRegValue |= (settings.accel.bandwidth & 0x03);
 2152              		.loc 1 570 0
 2153 00d2 40F20003 		movw	r3, #:lower16:settings
 2154 00d6 C0F20003 		movt	r3, #:upper16:settings
 2155 00da 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2156 00dc 03F00303 		and	r3, r3, #3
 2157 00e0 DAB2     		uxtb	r2, r3
 2158 00e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2159 00e4 1343     		orrs	r3, r3, r2
 2160 00e6 DBB2     		uxtb	r3, r3
 2161 00e8 FB71     		strb	r3, [r7, #7]
 2162              	.L86:
 571:../LSM9DS1_Driver.c **** 	}
 572:../LSM9DS1_Driver.c **** 	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 2163              		.loc 1 572 0
 2164 00ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2165 00ec 4FF02000 		mov	r0, #32
 2166 00f0 1946     		mov	r1, r3
 2167 00f2 FFF7FEFF 		bl	xgWriteByte
 573:../LSM9DS1_Driver.c **** 
 574:../LSM9DS1_Driver.c **** 	// CTRL_REG7_XL (0x21) (Default value: 0x00)
 575:../LSM9DS1_Driver.c **** 	// [HR][DCF1][DCF0][0][0][FDS][0][HPIS1]
 576:../LSM9DS1_Driver.c **** 	// HR - High resolution mode (0: disable, 1: enable)
 577:../LSM9DS1_Driver.c **** 	// DCF[1:0] - Digital filter cutoff frequency
 578:../LSM9DS1_Driver.c **** 	// FDS - Filtered data selection
 579:../LSM9DS1_Driver.c **** 	// HPIS1 - HPF enabled for interrupt function
 580:../LSM9DS1_Driver.c **** 	tempRegValue = 0;
 2168              		.loc 1 580 0
 2169 00f6 4FF00003 		mov	r3, #0
 2170 00fa FB71     		strb	r3, [r7, #7]
 581:../LSM9DS1_Driver.c **** 	if (settings.accel.highResEnable)
 2171              		.loc 1 581 0
 2172 00fc 40F20003 		movw	r3, #:lower16:settings
 2173 0100 C0F20003 		movt	r3, #:upper16:settings
 2174 0104 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 2175 0106 002B     		cmp	r3, #0
 2176 0108 11D0     		beq	.L87
 582:../LSM9DS1_Driver.c **** 	{
 583:../LSM9DS1_Driver.c **** 		tempRegValue |= (1<<7); // Set HR bit
 2177              		.loc 1 583 0
 2178 010a FB79     		ldrb	r3, [r7, #7]
 2179 010c 63F07F03 		orn	r3, r3, #127
 2180 0110 FB71     		strb	r3, [r7, #7]
 584:../LSM9DS1_Driver.c **** 		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 2181              		.loc 1 584 0
 2182 0112 40F20003 		movw	r3, #:lower16:settings
 2183 0116 C0F20003 		movt	r3, #:upper16:settings
 2184 011a 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 2185 011c 03F00303 		and	r3, r3, #3
 2186 0120 4FEA4313 		lsl	r3, r3, #5
 2187 0124 DAB2     		uxtb	r2, r3
 2188 0126 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2189 0128 1343     		orrs	r3, r3, r2
 2190 012a DBB2     		uxtb	r3, r3
 2191 012c FB71     		strb	r3, [r7, #7]
 2192              	.L87:
 585:../LSM9DS1_Driver.c **** 	}
 586:../LSM9DS1_Driver.c **** 	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 2193              		.loc 1 586 0
 2194 012e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2195 0130 4FF02100 		mov	r0, #33
 2196 0134 1946     		mov	r1, r3
 2197 0136 FFF7FEFF 		bl	xgWriteByte
 587:../LSM9DS1_Driver.c **** }
 2198              		.loc 1 587 0
 2199 013a 07F10807 		add	r7, r7, #8
 2200 013e BD46     		mov	sp, r7
 2201 0140 80BD     		pop	{r7, pc}
 2202              		.cfi_endproc
 2203              	.LFE136:
 2205 0142 00BF     		.section	.text.initMag,"ax",%progbits
 2206              		.align	2
 2207              		.global	initMag
 2208              		.thumb
 2209              		.thumb_func
 2211              	initMag:
 2212              	.LFB137:
 588:../LSM9DS1_Driver.c **** 
 589:../LSM9DS1_Driver.c **** void initMag(void)
 590:../LSM9DS1_Driver.c **** {
 2213              		.loc 1 590 0
 2214              		.cfi_startproc
 2215              		@ args = 0, pretend = 0, frame = 8
 2216              		@ frame_needed = 1, uses_anonymous_args = 0
 2217 0000 80B5     		push	{r7, lr}
 2218              	.LCFI52:
 2219              		.cfi_def_cfa_offset 8
 2220              		.cfi_offset 7, -8
 2221              		.cfi_offset 14, -4
 2222 0002 82B0     		sub	sp, sp, #8
 2223              	.LCFI53:
 2224              		.cfi_def_cfa_offset 16
 2225 0004 00AF     		add	r7, sp, #0
 2226              	.LCFI54:
 2227              		.cfi_def_cfa_register 7
 591:../LSM9DS1_Driver.c **** 	uint8_t tempRegValue = 0;
 2228              		.loc 1 591 0
 2229 0006 4FF00003 		mov	r3, #0
 2230 000a FB71     		strb	r3, [r7, #7]
 592:../LSM9DS1_Driver.c **** 
 593:../LSM9DS1_Driver.c **** 	// CTRL_REG1_M (Default value: 0x10)
 594:../LSM9DS1_Driver.c **** 	// [TEMP_COMP][OM1][OM0][DO2][DO1][DO0][0][ST]
 595:../LSM9DS1_Driver.c **** 	// TEMP_COMP - Temperature compensation
 596:../LSM9DS1_Driver.c **** 	// OM[1:0] - X & Y axes op mode selection
 597:../LSM9DS1_Driver.c **** 	//	00:low-power, 01:medium performance
 598:../LSM9DS1_Driver.c **** 	//	10: high performance, 11:ultra-high performance
 599:../LSM9DS1_Driver.c **** 	// DO[2:0] - Output data rate selection
 600:../LSM9DS1_Driver.c **** 	// ST - Self-test enable
 601:../LSM9DS1_Driver.c **** 	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 2231              		.loc 1 601 0
 2232 000c 40F20003 		movw	r3, #:lower16:settings
 2233 0010 C0F20003 		movt	r3, #:upper16:settings
 2234 0014 93F82230 		ldrb	r3, [r3, #34]	@ zero_extendqisi2
 2235 0018 002B     		cmp	r3, #0
 2236 001a 03D0     		beq	.L89
 2237              		.loc 1 601 0 is_stmt 0 discriminator 1
 2238 001c FB79     		ldrb	r3, [r7, #7]
 2239 001e 63F07F03 		orn	r3, r3, #127
 2240 0022 FB71     		strb	r3, [r7, #7]
 2241              	.L89:
 602:../LSM9DS1_Driver.c **** 	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
 2242              		.loc 1 602 0 is_stmt 1
 2243 0024 40F20003 		movw	r3, #:lower16:settings
 2244 0028 C0F20003 		movt	r3, #:upper16:settings
 2245 002c 93F82330 		ldrb	r3, [r3, #35]	@ zero_extendqisi2
 2246 0030 03F00303 		and	r3, r3, #3
 2247 0034 4FEA4313 		lsl	r3, r3, #5
 2248 0038 DAB2     		uxtb	r2, r3
 2249 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2250 003c 1343     		orrs	r3, r3, r2
 2251 003e DBB2     		uxtb	r3, r3
 2252 0040 FB71     		strb	r3, [r7, #7]
 603:../LSM9DS1_Driver.c **** 	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 2253              		.loc 1 603 0
 2254 0042 40F20003 		movw	r3, #:lower16:settings
 2255 0046 C0F20003 		movt	r3, #:upper16:settings
 2256 004a 93F82130 		ldrb	r3, [r3, #33]	@ zero_extendqisi2
 2257 004e 03F00703 		and	r3, r3, #7
 2258 0052 4FEA8303 		lsl	r3, r3, #2
 2259 0056 DAB2     		uxtb	r2, r3
 2260 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2261 005a 1343     		orrs	r3, r3, r2
 2262 005c DBB2     		uxtb	r3, r3
 2263 005e FB71     		strb	r3, [r7, #7]
 604:../LSM9DS1_Driver.c **** 	mWriteByte(CTRL_REG1_M, tempRegValue);
 2264              		.loc 1 604 0
 2265 0060 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2266 0062 4FF02000 		mov	r0, #32
 2267 0066 1946     		mov	r1, r3
 2268 0068 FFF7FEFF 		bl	mWriteByte
 605:../LSM9DS1_Driver.c **** 
 606:../LSM9DS1_Driver.c **** 	// CTRL_REG2_M (Default value 0x00)
 607:../LSM9DS1_Driver.c **** 	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
 608:../LSM9DS1_Driver.c **** 	// FS[1:0] - Full-scale configuration
 609:../LSM9DS1_Driver.c **** 	// REBOOT - Reboot memory content (0:normal, 1:reboot)
 610:../LSM9DS1_Driver.c **** 	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
 611:../LSM9DS1_Driver.c **** 	tempRegValue = 0;
 2269              		.loc 1 611 0
 2270 006c 4FF00003 		mov	r3, #0
 2271 0070 FB71     		strb	r3, [r7, #7]
 612:../LSM9DS1_Driver.c **** 	switch (settings.mag.scale)
 2272              		.loc 1 612 0
 2273 0072 40F20003 		movw	r3, #:lower16:settings
 2274 0076 C0F20003 		movt	r3, #:upper16:settings
 2275 007a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2276 007e 0C2B     		cmp	r3, #12
 2277 0080 08D0     		beq	.L92
 2278 0082 102B     		cmp	r3, #16
 2279 0084 0BD0     		beq	.L93
 2280 0086 082B     		cmp	r3, #8
 2281 0088 0ED1     		bne	.L90
 2282              	.L91:
 613:../LSM9DS1_Driver.c **** 	{
 614:../LSM9DS1_Driver.c **** 	case 8:
 615:../LSM9DS1_Driver.c **** 		tempRegValue |= (0x1 << 5);
 2283              		.loc 1 615 0
 2284 008a FB79     		ldrb	r3, [r7, #7]
 2285 008c 43F02003 		orr	r3, r3, #32
 2286 0090 FB71     		strb	r3, [r7, #7]
 616:../LSM9DS1_Driver.c **** 		break;
 2287              		.loc 1 616 0
 2288 0092 09E0     		b	.L90
 2289              	.L92:
 617:../LSM9DS1_Driver.c **** 	case 12:
 618:../LSM9DS1_Driver.c **** 		tempRegValue |= (0x2 << 5);
 2290              		.loc 1 618 0
 2291 0094 FB79     		ldrb	r3, [r7, #7]
 2292 0096 43F04003 		orr	r3, r3, #64
 2293 009a FB71     		strb	r3, [r7, #7]
 619:../LSM9DS1_Driver.c **** 		break;
 2294              		.loc 1 619 0
 2295 009c 04E0     		b	.L90
 2296              	.L93:
 620:../LSM9DS1_Driver.c **** 	case 16:
 621:../LSM9DS1_Driver.c **** 		tempRegValue |= (0x3 << 5);
 2297              		.loc 1 621 0
 2298 009e FB79     		ldrb	r3, [r7, #7]
 2299 00a0 43F06003 		orr	r3, r3, #96
 2300 00a4 FB71     		strb	r3, [r7, #7]
 622:../LSM9DS1_Driver.c **** 		break;
 2301              		.loc 1 622 0
 2302 00a6 00BF     		nop
 2303              	.L90:
 623:../LSM9DS1_Driver.c **** 	// Otherwise we'll default to 4 gauss (00)
 624:../LSM9DS1_Driver.c **** 	}
 625:../LSM9DS1_Driver.c **** 	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 2304              		.loc 1 625 0
 2305 00a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2306 00aa 4FF02100 		mov	r0, #33
 2307 00ae 1946     		mov	r1, r3
 2308 00b0 FFF7FEFF 		bl	mWriteByte
 626:../LSM9DS1_Driver.c **** 
 627:../LSM9DS1_Driver.c **** 	// CTRL_REG3_M (Default value: 0x03)
 628:../LSM9DS1_Driver.c **** 	// [I2C_DISABLE][0][LP][0][0][SIM][MD1][MD0]
 629:../LSM9DS1_Driver.c **** 	// I2C_DISABLE - Disable I2C interace (0:enable, 1:disable)
 630:../LSM9DS1_Driver.c **** 	// LP - Low-power mode cofiguration (1:enable)
 631:../LSM9DS1_Driver.c **** 	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
 632:../LSM9DS1_Driver.c **** 	// MD[1:0] - Operating mode
 633:../LSM9DS1_Driver.c **** 	//	00:continuous conversion, 01:single-conversion,
 634:../LSM9DS1_Driver.c **** 	//  10,11: Power-down
 635:../LSM9DS1_Driver.c **** 	tempRegValue = 0;
 2309              		.loc 1 635 0
 2310 00b4 4FF00003 		mov	r3, #0
 2311 00b8 FB71     		strb	r3, [r7, #7]
 636:../LSM9DS1_Driver.c **** 	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 2312              		.loc 1 636 0
 2313 00ba 40F20003 		movw	r3, #:lower16:settings
 2314 00be C0F20003 		movt	r3, #:upper16:settings
 2315 00c2 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 2316 00c6 002B     		cmp	r3, #0
 2317 00c8 03D0     		beq	.L94
 2318              		.loc 1 636 0 is_stmt 0 discriminator 1
 2319 00ca FB79     		ldrb	r3, [r7, #7]
 2320 00cc 43F02003 		orr	r3, r3, #32
 2321 00d0 FB71     		strb	r3, [r7, #7]
 2322              	.L94:
 637:../LSM9DS1_Driver.c **** 	tempRegValue |= (settings.mag.operatingMode & 0x3);
 2323              		.loc 1 637 0 is_stmt 1
 2324 00d2 40F20003 		movw	r3, #:lower16:settings
 2325 00d6 C0F20003 		movt	r3, #:upper16:settings
 2326 00da 93F82630 		ldrb	r3, [r3, #38]	@ zero_extendqisi2
 2327 00de DBB2     		uxtb	r3, r3
 2328 00e0 03F00303 		and	r3, r3, #3
 2329 00e4 DAB2     		uxtb	r2, r3
 2330 00e6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2331 00e8 1343     		orrs	r3, r3, r2
 2332 00ea DBB2     		uxtb	r3, r3
 2333 00ec FB71     		strb	r3, [r7, #7]
 638:../LSM9DS1_Driver.c **** 	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 2334              		.loc 1 638 0
 2335 00ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2336 00f0 4FF02200 		mov	r0, #34
 2337 00f4 1946     		mov	r1, r3
 2338 00f6 FFF7FEFF 		bl	mWriteByte
 639:../LSM9DS1_Driver.c **** 
 640:../LSM9DS1_Driver.c **** 	// CTRL_REG4_M (Default value: 0x00)
 641:../LSM9DS1_Driver.c **** 	// [0][0][0][0][OMZ1][OMZ0][BLE][0]
 642:../LSM9DS1_Driver.c **** 	// OMZ[1:0] - Z-axis operative mode selection
 643:../LSM9DS1_Driver.c **** 	//	00:low-power mode, 01:medium performance
 644:../LSM9DS1_Driver.c **** 	//	10:high performance, 10:ultra-high performance
 645:../LSM9DS1_Driver.c **** 	// BLE - Big/little endian data
 646:../LSM9DS1_Driver.c **** 	tempRegValue = 0;
 2339              		.loc 1 646 0
 2340 00fa 4FF00003 		mov	r3, #0
 2341 00fe FB71     		strb	r3, [r7, #7]
 647:../LSM9DS1_Driver.c **** 	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
 2342              		.loc 1 647 0
 2343 0100 40F20003 		movw	r3, #:lower16:settings
 2344 0104 C0F20003 		movt	r3, #:upper16:settings
 2345 0108 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2346 010c 03F00303 		and	r3, r3, #3
 2347 0110 DBB2     		uxtb	r3, r3
 2348 0112 4FEA8303 		lsl	r3, r3, #2
 2349 0116 FB71     		strb	r3, [r7, #7]
 648:../LSM9DS1_Driver.c **** 	mWriteByte(CTRL_REG4_M, tempRegValue);
 2350              		.loc 1 648 0
 2351 0118 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2352 011a 4FF02300 		mov	r0, #35
 2353 011e 1946     		mov	r1, r3
 2354 0120 FFF7FEFF 		bl	mWriteByte
 649:../LSM9DS1_Driver.c **** 
 650:../LSM9DS1_Driver.c **** 	// CTRL_REG5_M (Default value: 0x00)
 651:../LSM9DS1_Driver.c **** 	// [0][BDU][0][0][0][0][0][0]
 652:../LSM9DS1_Driver.c **** 	// BDU - Block data update for magnetic data
 653:../LSM9DS1_Driver.c **** 	//	0:continuous, 1:not updated until MSB/LSB are read
 654:../LSM9DS1_Driver.c **** 	tempRegValue = 0;
 2355              		.loc 1 654 0
 2356 0124 4FF00003 		mov	r3, #0
 2357 0128 FB71     		strb	r3, [r7, #7]
 655:../LSM9DS1_Driver.c **** 	mWriteByte(CTRL_REG5_M, tempRegValue);
 2358              		.loc 1 655 0
 2359 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2360 012c 4FF02400 		mov	r0, #36
 2361 0130 1946     		mov	r1, r3
 2362 0132 FFF7FEFF 		bl	mWriteByte
 656:../LSM9DS1_Driver.c **** }
 2363              		.loc 1 656 0
 2364 0136 07F10807 		add	r7, r7, #8
 2365 013a BD46     		mov	sp, r7
 2366 013c 80BD     		pop	{r7, pc}
 2367              		.cfi_endproc
 2368              	.LFE137:
 2370 013e 00BF     		.section	.text.mWriteByte,"ax",%progbits
 2371              		.align	2
 2372              		.global	mWriteByte
 2373              		.thumb
 2374              		.thumb_func
 2376              	mWriteByte:
 2377              	.LFB138:
 657:../LSM9DS1_Driver.c **** 
 658:../LSM9DS1_Driver.c **** void mWriteByte(uint8_t subAddress, uint8_t data)
 659:../LSM9DS1_Driver.c **** {
 2378              		.loc 1 659 0
 2379              		.cfi_startproc
 2380              		@ args = 0, pretend = 0, frame = 8
 2381              		@ frame_needed = 1, uses_anonymous_args = 0
 2382 0000 80B5     		push	{r7, lr}
 2383              	.LCFI55:
 2384              		.cfi_def_cfa_offset 8
 2385              		.cfi_offset 7, -8
 2386              		.cfi_offset 14, -4
 2387 0002 82B0     		sub	sp, sp, #8
 2388              	.LCFI56:
 2389              		.cfi_def_cfa_offset 16
 2390 0004 00AF     		add	r7, sp, #0
 2391              	.LCFI57:
 2392              		.cfi_def_cfa_register 7
 2393 0006 0246     		mov	r2, r0
 2394 0008 0B46     		mov	r3, r1
 2395 000a FA71     		strb	r2, [r7, #7]
 2396 000c BB71     		strb	r3, [r7, #6]
 660:../LSM9DS1_Driver.c **** 	// Whether we're using I2C or SPI, write a byte using the
 661:../LSM9DS1_Driver.c **** 	// accelerometer-specific I2C address or SPI CS pin.
 662:../LSM9DS1_Driver.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)
 2397              		.loc 1 662 0
 2398 000e 40F20003 		movw	r3, #:lower16:settings
 2399 0012 C0F20003 		movt	r3, #:upper16:settings
 2400 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2401 0018 012B     		cmp	r3, #1
 2402 001a 0CD1     		bne	.L95
 663:../LSM9DS1_Driver.c **** 	{
 664:../LSM9DS1_Driver.c **** 		return I2CwriteByte(_mAddress, subAddress, data);
 2403              		.loc 1 664 0
 2404 001c 40F20003 		movw	r3, #:lower16:_mAddress
 2405 0020 C0F20003 		movt	r3, #:upper16:_mAddress
 2406 0024 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 2407 0026 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2408 0028 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2409 002a 0846     		mov	r0, r1
 2410 002c 1146     		mov	r1, r2
 2411 002e 1A46     		mov	r2, r3
 2412 0030 FFF7FEFF 		bl	I2CwriteByte
 2413 0034 00BF     		nop
 2414              	.L95:
 665:../LSM9DS1_Driver.c **** 	}
 666:../LSM9DS1_Driver.c **** }
 2415              		.loc 1 666 0
 2416 0036 07F10807 		add	r7, r7, #8
 2417 003a BD46     		mov	sp, r7
 2418 003c 80BD     		pop	{r7, pc}
 2419              		.cfi_endproc
 2420              	.LFE138:
 2422 003e 00BF     		.section	.text.enableFIFO,"ax",%progbits
 2423              		.align	2
 2424              		.global	enableFIFO
 2425              		.thumb
 2426              		.thumb_func
 2428              	enableFIFO:
 2429              	.LFB139:
 667:../LSM9DS1_Driver.c **** 
 668:../LSM9DS1_Driver.c **** void enableFIFO(bool enable)
 669:../LSM9DS1_Driver.c **** {
 2430              		.loc 1 669 0
 2431              		.cfi_startproc
 2432              		@ args = 0, pretend = 0, frame = 16
 2433              		@ frame_needed = 1, uses_anonymous_args = 0
 2434 0000 80B5     		push	{r7, lr}
 2435              	.LCFI58:
 2436              		.cfi_def_cfa_offset 8
 2437              		.cfi_offset 7, -8
 2438              		.cfi_offset 14, -4
 2439 0002 84B0     		sub	sp, sp, #16
 2440              	.LCFI59:
 2441              		.cfi_def_cfa_offset 24
 2442 0004 00AF     		add	r7, sp, #0
 2443              	.LCFI60:
 2444              		.cfi_def_cfa_register 7
 2445 0006 0346     		mov	r3, r0
 2446 0008 FB71     		strb	r3, [r7, #7]
 670:../LSM9DS1_Driver.c **** 	uint8_t temp = xgReadByte(CTRL_REG9);
 2447              		.loc 1 670 0
 2448 000a 4FF02300 		mov	r0, #35
 2449 000e FFF7FEFF 		bl	xgReadByte
 2450 0012 0346     		mov	r3, r0
 2451 0014 FB73     		strb	r3, [r7, #15]
 671:../LSM9DS1_Driver.c **** 	if(enable)
 2452              		.loc 1 671 0
 2453 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2454 0018 002B     		cmp	r3, #0
 2455 001a 04D0     		beq	.L98
 672:../LSM9DS1_Driver.c **** 	{
 673:../LSM9DS1_Driver.c **** 		temp |= (1<<1);
 2456              		.loc 1 673 0
 2457 001c FB7B     		ldrb	r3, [r7, #15]
 2458 001e 43F00203 		orr	r3, r3, #2
 2459 0022 FB73     		strb	r3, [r7, #15]
 2460 0024 03E0     		b	.L99
 2461              	.L98:
 674:../LSM9DS1_Driver.c **** 	}
 675:../LSM9DS1_Driver.c **** 	else
 676:../LSM9DS1_Driver.c **** 	{
 677:../LSM9DS1_Driver.c **** 		temp &= ~(1<<1);
 2462              		.loc 1 677 0
 2463 0026 FB7B     		ldrb	r3, [r7, #15]
 2464 0028 23F00203 		bic	r3, r3, #2
 2465 002c FB73     		strb	r3, [r7, #15]
 2466              	.L99:
 678:../LSM9DS1_Driver.c **** 	}
 679:../LSM9DS1_Driver.c **** 
 680:../LSM9DS1_Driver.c **** 	xgWriteByte(CTRL_REG9, temp);
 2467              		.loc 1 680 0
 2468 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2469 0030 4FF02300 		mov	r0, #35
 2470 0034 1946     		mov	r1, r3
 2471 0036 FFF7FEFF 		bl	xgWriteByte
 681:../LSM9DS1_Driver.c **** }
 2472              		.loc 1 681 0
 2473 003a 07F11007 		add	r7, r7, #16
 2474 003e BD46     		mov	sp, r7
 2475 0040 80BD     		pop	{r7, pc}
 2476              		.cfi_endproc
 2477              	.LFE139:
 2479 0042 00BF     		.section	.text.setFIFO,"ax",%progbits
 2480              		.align	2
 2481              		.global	setFIFO
 2482              		.thumb
 2483              		.thumb_func
 2485              	setFIFO:
 2486              	.LFB140:
 682:../LSM9DS1_Driver.c **** 
 683:../LSM9DS1_Driver.c **** void setFIFO(fifoMode_type fifoMode, uint8_t fifoThs)
 684:../LSM9DS1_Driver.c **** {
 2487              		.loc 1 684 0
 2488              		.cfi_startproc
 2489              		@ args = 0, pretend = 0, frame = 16
 2490              		@ frame_needed = 1, uses_anonymous_args = 0
 2491 0000 80B5     		push	{r7, lr}
 2492              	.LCFI61:
 2493              		.cfi_def_cfa_offset 8
 2494              		.cfi_offset 7, -8
 2495              		.cfi_offset 14, -4
 2496 0002 84B0     		sub	sp, sp, #16
 2497              	.LCFI62:
 2498              		.cfi_def_cfa_offset 24
 2499 0004 00AF     		add	r7, sp, #0
 2500              	.LCFI63:
 2501              		.cfi_def_cfa_register 7
 2502 0006 0246     		mov	r2, r0
 2503 0008 0B46     		mov	r3, r1
 2504 000a FA71     		strb	r2, [r7, #7]
 2505 000c BB71     		strb	r3, [r7, #6]
 685:../LSM9DS1_Driver.c **** 	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
 686:../LSM9DS1_Driver.c **** 	// limit it to the maximum.
 687:../LSM9DS1_Driver.c **** 	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
 2506              		.loc 1 687 0
 2507 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2508 0010 1F2B     		cmp	r3, #31
 2509 0012 28BF     		it	cs
 2510 0014 1F23     		movcs	r3, #31
 2511 0016 FB73     		strb	r3, [r7, #15]
 688:../LSM9DS1_Driver.c **** 	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
 2512              		.loc 1 688 0
 2513 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2514 001a 4FEA4313 		lsl	r3, r3, #5
 2515 001e DAB2     		uxtb	r2, r3
 2516 0020 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2517 0022 03F01F03 		and	r3, r3, #31
 2518 0026 DBB2     		uxtb	r3, r3
 2519 0028 1343     		orrs	r3, r3, r2
 2520 002a DBB2     		uxtb	r3, r3
 2521 002c DBB2     		uxtb	r3, r3
 2522 002e 4FF02E00 		mov	r0, #46
 2523 0032 1946     		mov	r1, r3
 2524 0034 FFF7FEFF 		bl	xgWriteByte
 689:../LSM9DS1_Driver.c **** }
 2525              		.loc 1 689 0
 2526 0038 07F11007 		add	r7, r7, #16
 2527 003c BD46     		mov	sp, r7
 2528 003e 80BD     		pop	{r7, pc}
 2529              		.cfi_endproc
 2530              	.LFE140:
 2532              		.global	__aeabi_f2d
 2533              		.global	__aeabi_ddiv
 2534              		.global	__aeabi_d2iz
 2535              		.section	.text.calibrate,"ax",%progbits
 2536              		.align	2
 2537              		.global	calibrate
 2538              		.thumb
 2539              		.thumb_func
 2541              	calibrate:
 2542              	.LFB141:
 690:../LSM9DS1_Driver.c **** 
 691:../LSM9DS1_Driver.c **** void calibrate(bool autoCalc)
 692:../LSM9DS1_Driver.c **** {
 2543              		.loc 1 692 0
 2544              		.cfi_startproc
 2545              		@ args = 0, pretend = 0, frame = 48
 2546              		@ frame_needed = 1, uses_anonymous_args = 0
 2547 0000 B0B5     		push	{r4, r5, r7, lr}
 2548              	.LCFI64:
 2549              		.cfi_def_cfa_offset 16
 2550              		.cfi_offset 4, -16
 2551              		.cfi_offset 5, -12
 2552              		.cfi_offset 7, -8
 2553              		.cfi_offset 14, -4
 2554 0002 8CB0     		sub	sp, sp, #48
 2555              	.LCFI65:
 2556              		.cfi_def_cfa_offset 64
 2557 0004 00AF     		add	r7, sp, #0
 2558              	.LCFI66:
 2559              		.cfi_def_cfa_register 7
 2560 0006 0346     		mov	r3, r0
 2561 0008 FB71     		strb	r3, [r7, #7]
 693:../LSM9DS1_Driver.c **** 	uint8_t data[6] = {0, 0, 0, 0, 0, 0};
 2562              		.loc 1 693 0
 2563 000a 4FF00003 		mov	r3, #0
 2564 000e 87F82430 		strb	r3, [r7, #36]
 2565 0012 4FF00003 		mov	r3, #0
 2566 0016 87F82530 		strb	r3, [r7, #37]
 2567 001a 4FF00003 		mov	r3, #0
 2568 001e 87F82630 		strb	r3, [r7, #38]
 2569 0022 4FF00003 		mov	r3, #0
 2570 0026 87F82730 		strb	r3, [r7, #39]
 2571 002a 4FF00003 		mov	r3, #0
 2572 002e 87F82830 		strb	r3, [r7, #40]
 2573 0032 4FF00003 		mov	r3, #0
 2574 0036 87F82930 		strb	r3, [r7, #41]
 694:../LSM9DS1_Driver.c **** 	uint8_t samples = 0;
 2575              		.loc 1 694 0
 2576 003a 4FF00003 		mov	r3, #0
 2577 003e 87F82B30 		strb	r3, [r7, #43]
 695:../LSM9DS1_Driver.c **** 	int ii;
 696:../LSM9DS1_Driver.c **** 	int32_t aBiasRawTemp[3] = {0, 0, 0};
 2578              		.loc 1 696 0
 2579 0042 4FF00003 		mov	r3, #0
 2580 0046 BB61     		str	r3, [r7, #24]
 2581 0048 4FF00003 		mov	r3, #0
 2582 004c FB61     		str	r3, [r7, #28]
 2583 004e 4FF00003 		mov	r3, #0
 2584 0052 3B62     		str	r3, [r7, #32]
 697:../LSM9DS1_Driver.c **** 	int32_t gBiasRawTemp[3] = {0, 0, 0};
 2585              		.loc 1 697 0
 2586 0054 4FF00003 		mov	r3, #0
 2587 0058 FB60     		str	r3, [r7, #12]
 2588 005a 4FF00003 		mov	r3, #0
 2589 005e 3B61     		str	r3, [r7, #16]
 2590 0060 4FF00003 		mov	r3, #0
 2591 0064 7B61     		str	r3, [r7, #20]
 698:../LSM9DS1_Driver.c **** 
 699:../LSM9DS1_Driver.c **** 	// Turn on FIFO and set threshold to 32 samples
 700:../LSM9DS1_Driver.c **** 	enableFIFO(TRUE);
 2592              		.loc 1 700 0
 2593 0066 4FF00100 		mov	r0, #1
 2594 006a FFF7FEFF 		bl	enableFIFO
 701:../LSM9DS1_Driver.c **** 	setFIFO(FIFO_THS, 0x1F);
 2595              		.loc 1 701 0
 2596 006e 4FF00100 		mov	r0, #1
 2597 0072 4FF01F01 		mov	r1, #31
 2598 0076 FFF7FEFF 		bl	setFIFO
 702:../LSM9DS1_Driver.c **** 	/*while (samples < 29)
 703:../LSM9DS1_Driver.c **** 	{*/
 704:../LSM9DS1_Driver.c **** 		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
 2599              		.loc 1 704 0
 2600 007a 4FF02F00 		mov	r0, #47
 2601 007e FFF7FEFF 		bl	xgReadByte
 2602 0082 0346     		mov	r3, r0
 2603 0084 03F03F03 		and	r3, r3, #63
 2604 0088 87F82B30 		strb	r3, [r7, #43]
 705:../LSM9DS1_Driver.c **** 		//samples = 10;
 706:../LSM9DS1_Driver.c **** 	//}
 707:../LSM9DS1_Driver.c **** 	for(ii = 0; ii < samples ; ii++)
 2605              		.loc 1 707 0
 2606 008c 4FF00003 		mov	r3, #0
 2607 0090 FB62     		str	r3, [r7, #44]
 2608 0092 59E0     		b	.L102
 2609              	.L103:
 708:../LSM9DS1_Driver.c **** 	{	// Read the gyro data stored in the FIFO
 709:../LSM9DS1_Driver.c **** 		readGyro1();
 2610              		.loc 1 709 0 discriminator 2
 2611 0094 FFF7FEFF 		bl	readGyro1
 710:../LSM9DS1_Driver.c **** 		gBiasRawTemp[0] += gx;
 2612              		.loc 1 710 0 discriminator 2
 2613 0098 FA68     		ldr	r2, [r7, #12]
 2614 009a 40F20003 		movw	r3, #:lower16:gx
 2615 009e C0F20003 		movt	r3, #:upper16:gx
 2616 00a2 1B88     		ldrh	r3, [r3, #0]
 2617 00a4 1BB2     		sxth	r3, r3
 2618 00a6 D318     		adds	r3, r2, r3
 2619 00a8 FB60     		str	r3, [r7, #12]
 711:../LSM9DS1_Driver.c **** 		gBiasRawTemp[1] += gy;
 2620              		.loc 1 711 0 discriminator 2
 2621 00aa 3A69     		ldr	r2, [r7, #16]
 2622 00ac 40F20003 		movw	r3, #:lower16:gy
 2623 00b0 C0F20003 		movt	r3, #:upper16:gy
 2624 00b4 1B88     		ldrh	r3, [r3, #0]
 2625 00b6 1BB2     		sxth	r3, r3
 2626 00b8 D318     		adds	r3, r2, r3
 2627 00ba 3B61     		str	r3, [r7, #16]
 712:../LSM9DS1_Driver.c **** 		gBiasRawTemp[2] += gz;
 2628              		.loc 1 712 0 discriminator 2
 2629 00bc 7A69     		ldr	r2, [r7, #20]
 2630 00be 40F20003 		movw	r3, #:lower16:gz
 2631 00c2 C0F20003 		movt	r3, #:upper16:gz
 2632 00c6 1B88     		ldrh	r3, [r3, #0]
 2633 00c8 1BB2     		sxth	r3, r3
 2634 00ca D318     		adds	r3, r2, r3
 2635 00cc 7B61     		str	r3, [r7, #20]
 713:../LSM9DS1_Driver.c **** 
 714:../LSM9DS1_Driver.c **** 		readAccel1();
 2636              		.loc 1 714 0 discriminator 2
 2637 00ce FFF7FEFF 		bl	readAccel1
 715:../LSM9DS1_Driver.c **** 		aBiasRawTemp[0] += ax;
 2638              		.loc 1 715 0 discriminator 2
 2639 00d2 BA69     		ldr	r2, [r7, #24]
 2640 00d4 40F20003 		movw	r3, #:lower16:ax
 2641 00d8 C0F20003 		movt	r3, #:upper16:ax
 2642 00dc 1B88     		ldrh	r3, [r3, #0]
 2643 00de 1BB2     		sxth	r3, r3
 2644 00e0 D318     		adds	r3, r2, r3
 2645 00e2 BB61     		str	r3, [r7, #24]
 716:../LSM9DS1_Driver.c **** 		aBiasRawTemp[1] += ay;
 2646              		.loc 1 716 0 discriminator 2
 2647 00e4 FA69     		ldr	r2, [r7, #28]
 2648 00e6 40F20003 		movw	r3, #:lower16:ay
 2649 00ea C0F20003 		movt	r3, #:upper16:ay
 2650 00ee 1B88     		ldrh	r3, [r3, #0]
 2651 00f0 1BB2     		sxth	r3, r3
 2652 00f2 D318     		adds	r3, r2, r3
 2653 00f4 FB61     		str	r3, [r7, #28]
 717:../LSM9DS1_Driver.c **** 		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
 2654              		.loc 1 717 0 discriminator 2
 2655 00f6 3C6A     		ldr	r4, [r7, #32]
 2656 00f8 40F20003 		movw	r3, #:lower16:az
 2657 00fc C0F20003 		movt	r3, #:upper16:az
 2658 0100 1B88     		ldrh	r3, [r3, #0]
 2659 0102 1DB2     		sxth	r5, r3
 2660 0104 40F20003 		movw	r3, #:lower16:aRes
 2661 0108 C0F20003 		movt	r3, #:upper16:aRes
 2662 010c 1B68     		ldr	r3, [r3, #0]	@ float
 2663 010e 1846     		mov	r0, r3	@ float
 2664 0110 FFF7FEFF 		bl	__aeabi_f2d
 2665 0114 0246     		mov	r2, r0
 2666 0116 0B46     		mov	r3, r1
 2667 0118 4FF00000 		mov	r0, #0
 2668 011c 4FF00001 		mov	r1, #0
 2669 0120 C3F6F071 		movt	r1, 16368
 2670 0124 FFF7FEFF 		bl	__aeabi_ddiv
 2671 0128 0246     		mov	r2, r0
 2672 012a 0B46     		mov	r3, r1
 2673 012c 1046     		mov	r0, r2
 2674 012e 1946     		mov	r1, r3
 2675 0130 FFF7FEFF 		bl	__aeabi_d2iz
 2676 0134 0346     		mov	r3, r0
 2677 0136 9BB2     		uxth	r3, r3
 2678 0138 1BB2     		sxth	r3, r3
 2679 013a EB1A     		subs	r3, r5, r3
 2680 013c E318     		adds	r3, r4, r3
 2681 013e 3B62     		str	r3, [r7, #32]
 707:../LSM9DS1_Driver.c **** 	for(ii = 0; ii < samples ; ii++)
 2682              		.loc 1 707 0 discriminator 2
 2683 0140 FB6A     		ldr	r3, [r7, #44]
 2684 0142 03F10103 		add	r3, r3, #1
 2685 0146 FB62     		str	r3, [r7, #44]
 2686              	.L102:
 707:../LSM9DS1_Driver.c **** 	for(ii = 0; ii < samples ; ii++)
 2687              		.loc 1 707 0 is_stmt 0 discriminator 1
 2688 0148 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 2689 014c FB6A     		ldr	r3, [r7, #44]
 2690 014e 9A42     		cmp	r2, r3
 2691 0150 A0DC     		bgt	.L103
 718:../LSM9DS1_Driver.c **** 	}
 719:../LSM9DS1_Driver.c **** 	for (ii = 0; ii < samples/*3*/; ii++)
 2692              		.loc 1 719 0 is_stmt 1
 2693 0152 4FF00003 		mov	r3, #0
 2694 0156 FB62     		str	r3, [r7, #44]
 2695 0158 55E0     		b	.L104
 2696              	.L105:
 720:../LSM9DS1_Driver.c **** 	{
 721:../LSM9DS1_Driver.c **** 		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
 2697              		.loc 1 721 0 discriminator 2
 2698 015a FB6A     		ldr	r3, [r7, #44]
 2699 015c 4FEA8303 		lsl	r3, r3, #2
 2700 0160 07F13002 		add	r2, r7, #48
 2701 0164 D318     		adds	r3, r2, r3
 2702 0166 53F8242C 		ldr	r2, [r3, #-36]
 2703 016a 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 2704 016e 92FBF3F3 		sdiv	r3, r2, r3
 2705 0172 99B2     		uxth	r1, r3
 2706 0174 40F20003 		movw	r3, #:lower16:gBiasRaw
 2707 0178 C0F20003 		movt	r3, #:upper16:gBiasRaw
 2708 017c FA6A     		ldr	r2, [r7, #44]
 2709 017e 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 722:../LSM9DS1_Driver.c **** 		gBias[ii] = calcGyro(gBiasRaw[ii]);
 2710              		.loc 1 722 0 discriminator 2
 2711 0182 40F20003 		movw	r3, #:lower16:gBiasRaw
 2712 0186 C0F20003 		movt	r3, #:upper16:gBiasRaw
 2713 018a FA6A     		ldr	r2, [r7, #44]
 2714 018c 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2715 0190 1BB2     		sxth	r3, r3
 2716 0192 1846     		mov	r0, r3
 2717 0194 FFF7FEFF 		bl	calcGyro
 2718 0198 0246     		mov	r2, r0	@ float
 2719 019a 40F20003 		movw	r3, #:lower16:gBias
 2720 019e C0F20003 		movt	r3, #:upper16:gBias
 2721 01a2 F96A     		ldr	r1, [r7, #44]
 2722 01a4 4FEA8101 		lsl	r1, r1, #2
 2723 01a8 5B18     		adds	r3, r3, r1
 2724 01aa 1A60     		str	r2, [r3, #0]	@ float
 723:../LSM9DS1_Driver.c **** 		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
 2725              		.loc 1 723 0 discriminator 2
 2726 01ac FB6A     		ldr	r3, [r7, #44]
 2727 01ae 4FEA8303 		lsl	r3, r3, #2
 2728 01b2 07F13002 		add	r2, r7, #48
 2729 01b6 D318     		adds	r3, r2, r3
 2730 01b8 53F8182C 		ldr	r2, [r3, #-24]
 2731 01bc 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 2732 01c0 92FBF3F3 		sdiv	r3, r2, r3
 2733 01c4 99B2     		uxth	r1, r3
 2734 01c6 40F20003 		movw	r3, #:lower16:aBiasRaw
 2735 01ca C0F20003 		movt	r3, #:upper16:aBiasRaw
 2736 01ce FA6A     		ldr	r2, [r7, #44]
 2737 01d0 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 724:../LSM9DS1_Driver.c **** 		aBias[ii] = calcAccel(aBiasRaw[ii]);
 2738              		.loc 1 724 0 discriminator 2
 2739 01d4 40F20003 		movw	r3, #:lower16:aBiasRaw
 2740 01d8 C0F20003 		movt	r3, #:upper16:aBiasRaw
 2741 01dc FA6A     		ldr	r2, [r7, #44]
 2742 01de 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2743 01e2 1BB2     		sxth	r3, r3
 2744 01e4 1846     		mov	r0, r3
 2745 01e6 FFF7FEFF 		bl	calcAccel
 2746 01ea 0246     		mov	r2, r0	@ float
 2747 01ec 40F20003 		movw	r3, #:lower16:aBias
 2748 01f0 C0F20003 		movt	r3, #:upper16:aBias
 2749 01f4 F96A     		ldr	r1, [r7, #44]
 2750 01f6 4FEA8101 		lsl	r1, r1, #2
 2751 01fa 5B18     		adds	r3, r3, r1
 2752 01fc 1A60     		str	r2, [r3, #0]	@ float
 719:../LSM9DS1_Driver.c **** 	for (ii = 0; ii < samples/*3*/; ii++)
 2753              		.loc 1 719 0 discriminator 2
 2754 01fe FB6A     		ldr	r3, [r7, #44]
 2755 0200 03F10103 		add	r3, r3, #1
 2756 0204 FB62     		str	r3, [r7, #44]
 2757              	.L104:
 719:../LSM9DS1_Driver.c **** 	for (ii = 0; ii < samples/*3*/; ii++)
 2758              		.loc 1 719 0 is_stmt 0 discriminator 1
 2759 0206 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 2760 020a FB6A     		ldr	r3, [r7, #44]
 2761 020c 9A42     		cmp	r2, r3
 2762 020e A4DC     		bgt	.L105
 725:../LSM9DS1_Driver.c **** 	}
 726:../LSM9DS1_Driver.c **** 
 727:../LSM9DS1_Driver.c **** 	enableFIFO(FALSE);
 2763              		.loc 1 727 0 is_stmt 1
 2764 0210 4FF00000 		mov	r0, #0
 2765 0214 FFF7FEFF 		bl	enableFIFO
 728:../LSM9DS1_Driver.c **** 	setFIFO(FIFO_OFF, 0x00);
 2766              		.loc 1 728 0
 2767 0218 4FF00000 		mov	r0, #0
 2768 021c 4FF00001 		mov	r1, #0
 2769 0220 FFF7FEFF 		bl	setFIFO
 729:../LSM9DS1_Driver.c **** 
 730:../LSM9DS1_Driver.c **** 	if (autoCalc) _autoCalc = TRUE;
 2770              		.loc 1 730 0
 2771 0224 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2772 0226 002B     		cmp	r3, #0
 2773 0228 06D0     		beq	.L101
 2774              		.loc 1 730 0 is_stmt 0 discriminator 1
 2775 022a 40F20003 		movw	r3, #:lower16:_autoCalc
 2776 022e C0F20003 		movt	r3, #:upper16:_autoCalc
 2777 0232 4FF00102 		mov	r2, #1
 2778 0236 1A70     		strb	r2, [r3, #0]
 2779              	.L101:
 731:../LSM9DS1_Driver.c **** }
 2780              		.loc 1 731 0 is_stmt 1
 2781 0238 07F13007 		add	r7, r7, #48
 2782 023c BD46     		mov	sp, r7
 2783 023e B0BD     		pop	{r4, r5, r7, pc}
 2784              		.cfi_endproc
 2785              	.LFE141:
 2787              		.section	.text.xgReadBytes,"ax",%progbits
 2788              		.align	2
 2789              		.global	xgReadBytes
 2790              		.thumb
 2791              		.thumb_func
 2793              	xgReadBytes:
 2794              	.LFB142:
 732:../LSM9DS1_Driver.c **** 
 733:../LSM9DS1_Driver.c **** 
 734:../LSM9DS1_Driver.c **** void xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
 735:../LSM9DS1_Driver.c **** {
 2795              		.loc 1 735 0
 2796              		.cfi_startproc
 2797              		@ args = 0, pretend = 0, frame = 8
 2798              		@ frame_needed = 1, uses_anonymous_args = 0
 2799 0000 80B5     		push	{r7, lr}
 2800              	.LCFI67:
 2801              		.cfi_def_cfa_offset 8
 2802              		.cfi_offset 7, -8
 2803              		.cfi_offset 14, -4
 2804 0002 82B0     		sub	sp, sp, #8
 2805              	.LCFI68:
 2806              		.cfi_def_cfa_offset 16
 2807 0004 00AF     		add	r7, sp, #0
 2808              	.LCFI69:
 2809              		.cfi_def_cfa_register 7
 2810 0006 3960     		str	r1, [r7, #0]
 2811 0008 1346     		mov	r3, r2
 2812 000a 0246     		mov	r2, r0
 2813 000c FA71     		strb	r2, [r7, #7]
 2814 000e BB71     		strb	r3, [r7, #6]
 736:../LSM9DS1_Driver.c **** 	// Whether we're using I2C or SPI, read multiple bytes using the
 737:../LSM9DS1_Driver.c **** 	// gyro-specific I2C address or SPI CS pin.
 738:../LSM9DS1_Driver.c **** 	if (settings.device.commInterface == IMU_MODE_I2C)
 2815              		.loc 1 738 0
 2816 0010 40F20003 		movw	r3, #:lower16:settings
 2817 0014 C0F20003 		movt	r3, #:upper16:settings
 2818 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2819 001a 012B     		cmp	r3, #1
 2820 001c 0CD1     		bne	.L108
 739:../LSM9DS1_Driver.c **** 		I2CreadBytes(_xgAddress, subAddress, dest, count);
 2821              		.loc 1 739 0
 2822 001e 40F20003 		movw	r3, #:lower16:_xgAddress
 2823 0022 C0F20003 		movt	r3, #:upper16:_xgAddress
 2824 0026 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 2825 0028 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2826 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2827 002c 0846     		mov	r0, r1
 2828 002e 1146     		mov	r1, r2
 2829 0030 3A68     		ldr	r2, [r7, #0]
 2830 0032 FFF7FEFF 		bl	I2CreadBytes
 2831 0036 12E0     		b	.L107
 2832              	.L108:
 740:../LSM9DS1_Driver.c **** 		//I2CreadBytes1(_xgAddress, subAddress, dest, count);
 741:../LSM9DS1_Driver.c **** 	else if (settings.device.commInterface == IMU_MODE_SPI)
 2833              		.loc 1 741 0
 2834 0038 40F20003 		movw	r3, #:lower16:settings
 2835 003c C0F20003 		movt	r3, #:upper16:settings
 2836 0040 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2837 0042 002B     		cmp	r3, #0
 2838 0044 0BD1     		bne	.L107
 742:../LSM9DS1_Driver.c **** 		SPIreadBytes(_xgAddress, subAddress, dest, count);
 2839              		.loc 1 742 0
 2840 0046 40F20003 		movw	r3, #:lower16:_xgAddress
 2841 004a C0F20003 		movt	r3, #:upper16:_xgAddress
 2842 004e 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 2843 0050 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 2844 0052 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2845 0054 0846     		mov	r0, r1
 2846 0056 1146     		mov	r1, r2
 2847 0058 3A68     		ldr	r2, [r7, #0]
 2848 005a FFF7FEFF 		bl	SPIreadBytes
 2849              	.L107:
 743:../LSM9DS1_Driver.c **** }
 2850              		.loc 1 743 0
 2851 005e 07F10807 		add	r7, r7, #8
 2852 0062 BD46     		mov	sp, r7
 2853 0064 80BD     		pop	{r7, pc}
 2854              		.cfi_endproc
 2855              	.LFE142:
 2857              		.section	.text.SPIreadBytes,"ax",%progbits
 2858              		.align	2
 2859              		.global	SPIreadBytes
 2860              		.thumb
 2861              		.thumb_func
 2863              	SPIreadBytes:
 2864              	.LFB143:
 744:../LSM9DS1_Driver.c **** 
 745:../LSM9DS1_Driver.c **** void SPIreadBytes(uint8_t csPin, uint8_t subAddress, uint8_t * dest, uint8_t count)
 746:../LSM9DS1_Driver.c **** {
 2865              		.loc 1 746 0
 2866              		.cfi_startproc
 2867              		@ args = 0, pretend = 0, frame = 8
 2868              		@ frame_needed = 1, uses_anonymous_args = 0
 2869              		@ link register save eliminated.
 2870 0000 80B4     		push	{r7}
 2871              	.LCFI70:
 2872              		.cfi_def_cfa_offset 4
 2873              		.cfi_offset 7, -4
 2874 0002 83B0     		sub	sp, sp, #12
 2875              	.LCFI71:
 2876              		.cfi_def_cfa_offset 16
 2877 0004 00AF     		add	r7, sp, #0
 2878              	.LCFI72:
 2879              		.cfi_def_cfa_register 7
 2880 0006 3A60     		str	r2, [r7, #0]
 2881 0008 0246     		mov	r2, r0
 2882 000a FA71     		strb	r2, [r7, #7]
 2883 000c 0A46     		mov	r2, r1
 2884 000e BA71     		strb	r2, [r7, #6]
 2885 0010 7B71     		strb	r3, [r7, #5]
 747:../LSM9DS1_Driver.c **** 	;
 748:../LSM9DS1_Driver.c **** }
 2886              		.loc 1 748 0
 2887 0012 07F10C07 		add	r7, r7, #12
 2888 0016 BD46     		mov	sp, r7
 2889 0018 80BC     		pop	{r7}
 2890 001a 7047     		bx	lr
 2891              		.cfi_endproc
 2892              	.LFE143:
 2894              		.section	.text.readGyro1,"ax",%progbits
 2895              		.align	2
 2896              		.global	readGyro1
 2897              		.thumb
 2898              		.thumb_func
 2900              	readGyro1:
 2901              	.LFB144:
 749:../LSM9DS1_Driver.c **** 
 750:../LSM9DS1_Driver.c **** void readGyro1(void)
 751:../LSM9DS1_Driver.c **** {
 2902              		.loc 1 751 0
 2903              		.cfi_startproc
 2904              		@ args = 0, pretend = 0, frame = 8
 2905              		@ frame_needed = 1, uses_anonymous_args = 0
 2906 0000 90B5     		push	{r4, r7, lr}
 2907              	.LCFI73:
 2908              		.cfi_def_cfa_offset 12
 2909              		.cfi_offset 4, -12
 2910              		.cfi_offset 7, -8
 2911              		.cfi_offset 14, -4
 2912 0002 83B0     		sub	sp, sp, #12
 2913              	.LCFI74:
 2914              		.cfi_def_cfa_offset 24
 2915 0004 00AF     		add	r7, sp, #0
 2916              	.LCFI75:
 2917              		.cfi_def_cfa_register 7
 752:../LSM9DS1_Driver.c **** 	uint8_t i = 0; //licznik dla czytania
 2918              		.loc 1 752 0
 2919 0006 4FF00003 		mov	r3, #0
 2920 000a FB71     		strb	r3, [r7, #7]
 753:../LSM9DS1_Driver.c **** 	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
 754:../LSM9DS1_Driver.c **** 	uint8_t subAddr = OUT_X_L_G;
 2921              		.loc 1 754 0
 2922 000c 4FF01803 		mov	r3, #24
 2923 0010 BB71     		strb	r3, [r7, #6]
 755:../LSM9DS1_Driver.c **** 
 756:../LSM9DS1_Driver.c **** 
 757:../LSM9DS1_Driver.c **** 	while(i < 6)
 2924              		.loc 1 757 0
 2925 0012 24E0     		b	.L112
 2926              	.L113:
 758:../LSM9DS1_Driver.c **** 	{
 759:../LSM9DS1_Driver.c **** 		subAddr = OUT_X_L_G;
 2927              		.loc 1 759 0
 2928 0014 4FF01803 		mov	r3, #24
 2929 0018 BB71     		strb	r3, [r7, #6]
 760:../LSM9DS1_Driver.c **** 		subAddr = subAddr + i;
 2930              		.loc 1 760 0
 2931 001a BA79     		ldrb	r2, [r7, #6]
 2932 001c FB79     		ldrb	r3, [r7, #7]
 2933 001e D318     		adds	r3, r2, r3
 2934 0020 BB71     		strb	r3, [r7, #6]
 761:../LSM9DS1_Driver.c **** 		temp[i] = I2CreadBytes(_xgAddress, subAddr, NULL, 0);
 2935              		.loc 1 761 0
 2936 0022 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 2937 0024 40F20003 		movw	r3, #:lower16:_xgAddress
 2938 0028 C0F20003 		movt	r3, #:upper16:_xgAddress
 2939 002c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2940 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2941 0030 1046     		mov	r0, r2
 2942 0032 1946     		mov	r1, r3
 2943 0034 4FF00002 		mov	r2, #0
 2944 0038 4FF00003 		mov	r3, #0
 2945 003c FFF7FEFF 		bl	I2CreadBytes
 2946 0040 0346     		mov	r3, r0
 2947 0042 1A46     		mov	r2, r3
 2948 0044 07F10801 		add	r1, r7, #8
 2949 0048 0B19     		adds	r3, r1, r4
 2950 004a 03F8082C 		strb	r2, [r3, #-8]
 762:../LSM9DS1_Driver.c **** 		delay(10000);
 2951              		.loc 1 762 0
 2952 004e 42F21070 		movw	r0, #10000
 2953 0052 FFF7FEFF 		bl	delay
 763:../LSM9DS1_Driver.c **** 		i++;
 2954              		.loc 1 763 0
 2955 0056 FB79     		ldrb	r3, [r7, #7]
 2956 0058 03F10103 		add	r3, r3, #1
 2957 005c FB71     		strb	r3, [r7, #7]
 2958              	.L112:
 757:../LSM9DS1_Driver.c **** 	while(i < 6)
 2959              		.loc 1 757 0 discriminator 1
 2960 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2961 0060 052B     		cmp	r3, #5
 2962 0062 D7D9     		bls	.L113
 764:../LSM9DS1_Driver.c **** 	}
 765:../LSM9DS1_Driver.c **** 
 766:../LSM9DS1_Driver.c **** 	gx = ((int8_t)temp[1] << 8) | (int8_t)temp[0]; // Store x-axis values into gx
 2963              		.loc 1 766 0
 2964 0064 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2965 0066 DBB2     		uxtb	r3, r3
 2966 0068 5BB2     		sxtb	r3, r3
 2967 006a 4FEA0323 		lsl	r3, r3, #8
 2968 006e 9AB2     		uxth	r2, r3
 2969 0070 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 2970 0072 DBB2     		uxtb	r3, r3
 2971 0074 5BB2     		sxtb	r3, r3
 2972 0076 9BB2     		uxth	r3, r3
 2973 0078 1343     		orrs	r3, r3, r2
 2974 007a 9AB2     		uxth	r2, r3
 2975 007c 40F20003 		movw	r3, #:lower16:gx
 2976 0080 C0F20003 		movt	r3, #:upper16:gx
 2977 0084 1A80     		strh	r2, [r3, #0]	@ movhi
 767:../LSM9DS1_Driver.c **** 
 768:../LSM9DS1_Driver.c **** 	gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 2978              		.loc 1 768 0
 2979 0086 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2980 0088 4FEA0323 		lsl	r3, r3, #8
 2981 008c 9AB2     		uxth	r2, r3
 2982 008e BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 2983 0090 1343     		orrs	r3, r3, r2
 2984 0092 9AB2     		uxth	r2, r3
 2985 0094 40F20003 		movw	r3, #:lower16:gy
 2986 0098 C0F20003 		movt	r3, #:upper16:gy
 2987 009c 1A80     		strh	r2, [r3, #0]	@ movhi
 769:../LSM9DS1_Driver.c **** 
 770:../LSM9DS1_Driver.c **** 	gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 2988              		.loc 1 770 0
 2989 009e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2990 00a0 4FEA0323 		lsl	r3, r3, #8
 2991 00a4 9AB2     		uxth	r2, r3
 2992 00a6 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 2993 00a8 1343     		orrs	r3, r3, r2
 2994 00aa 9AB2     		uxth	r2, r3
 2995 00ac 40F20003 		movw	r3, #:lower16:gz
 2996 00b0 C0F20003 		movt	r3, #:upper16:gz
 2997 00b4 1A80     		strh	r2, [r3, #0]	@ movhi
 771:../LSM9DS1_Driver.c **** 
 772:../LSM9DS1_Driver.c **** 
 773:../LSM9DS1_Driver.c **** 
 774:../LSM9DS1_Driver.c **** 	if (_autoCalc) //kalibracja
 2998              		.loc 1 774 0
 2999 00b6 40F20003 		movw	r3, #:lower16:_autoCalc
 3000 00ba C0F20003 		movt	r3, #:upper16:_autoCalc
 3001 00be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3002 00c0 002B     		cmp	r3, #0
 3003 00c2 3BD0     		beq	.L111
 775:../LSM9DS1_Driver.c **** 	{
 776:../LSM9DS1_Driver.c **** 		gx -= gBiasRaw[X_AXIS];
 3004              		.loc 1 776 0
 3005 00c4 40F20003 		movw	r3, #:lower16:gx
 3006 00c8 C0F20003 		movt	r3, #:upper16:gx
 3007 00cc 1B88     		ldrh	r3, [r3, #0]
 3008 00ce 9AB2     		uxth	r2, r3
 3009 00d0 40F20003 		movw	r3, #:lower16:gBiasRaw
 3010 00d4 C0F20003 		movt	r3, #:upper16:gBiasRaw
 3011 00d8 1B88     		ldrh	r3, [r3, #0]
 3012 00da 9BB2     		uxth	r3, r3
 3013 00dc D31A     		subs	r3, r2, r3
 3014 00de 9BB2     		uxth	r3, r3
 3015 00e0 9AB2     		uxth	r2, r3
 3016 00e2 40F20003 		movw	r3, #:lower16:gx
 3017 00e6 C0F20003 		movt	r3, #:upper16:gx
 3018 00ea 1A80     		strh	r2, [r3, #0]	@ movhi
 777:../LSM9DS1_Driver.c **** 		gy -= gBiasRaw[Y_AXIS];
 3019              		.loc 1 777 0
 3020 00ec 40F20003 		movw	r3, #:lower16:gy
 3021 00f0 C0F20003 		movt	r3, #:upper16:gy
 3022 00f4 1B88     		ldrh	r3, [r3, #0]
 3023 00f6 9AB2     		uxth	r2, r3
 3024 00f8 40F20003 		movw	r3, #:lower16:gBiasRaw
 3025 00fc C0F20003 		movt	r3, #:upper16:gBiasRaw
 3026 0100 5B88     		ldrh	r3, [r3, #2]
 3027 0102 9BB2     		uxth	r3, r3
 3028 0104 D31A     		subs	r3, r2, r3
 3029 0106 9BB2     		uxth	r3, r3
 3030 0108 9AB2     		uxth	r2, r3
 3031 010a 40F20003 		movw	r3, #:lower16:gy
 3032 010e C0F20003 		movt	r3, #:upper16:gy
 3033 0112 1A80     		strh	r2, [r3, #0]	@ movhi
 778:../LSM9DS1_Driver.c **** 		gz -= gBiasRaw[Z_AXIS];
 3034              		.loc 1 778 0
 3035 0114 40F20003 		movw	r3, #:lower16:gz
 3036 0118 C0F20003 		movt	r3, #:upper16:gz
 3037 011c 1B88     		ldrh	r3, [r3, #0]
 3038 011e 9AB2     		uxth	r2, r3
 3039 0120 40F20003 		movw	r3, #:lower16:gBiasRaw
 3040 0124 C0F20003 		movt	r3, #:upper16:gBiasRaw
 3041 0128 9B88     		ldrh	r3, [r3, #4]
 3042 012a 9BB2     		uxth	r3, r3
 3043 012c D31A     		subs	r3, r2, r3
 3044 012e 9BB2     		uxth	r3, r3
 3045 0130 9AB2     		uxth	r2, r3
 3046 0132 40F20003 		movw	r3, #:lower16:gz
 3047 0136 C0F20003 		movt	r3, #:upper16:gz
 3048 013a 1A80     		strh	r2, [r3, #0]	@ movhi
 3049              	.L111:
 779:../LSM9DS1_Driver.c **** 	}
 780:../LSM9DS1_Driver.c **** 	/*gx = calcGyro(gx);
 781:../LSM9DS1_Driver.c **** 	gy = calcGyro(gy);
 782:../LSM9DS1_Driver.c **** 	gz = calcGyro(gz);*/
 783:../LSM9DS1_Driver.c **** }
 3050              		.loc 1 783 0
 3051 013c 07F10C07 		add	r7, r7, #12
 3052 0140 BD46     		mov	sp, r7
 3053 0142 90BD     		pop	{r4, r7, pc}
 3054              		.cfi_endproc
 3055              	.LFE144:
 3057              		.section	.text.readAccel1,"ax",%progbits
 3058              		.align	2
 3059              		.global	readAccel1
 3060              		.thumb
 3061              		.thumb_func
 3063              	readAccel1:
 3064              	.LFB145:
 784:../LSM9DS1_Driver.c **** 
 785:../LSM9DS1_Driver.c **** void readAccel1(void)
 786:../LSM9DS1_Driver.c **** {
 3065              		.loc 1 786 0
 3066              		.cfi_startproc
 3067              		@ args = 0, pretend = 0, frame = 8
 3068              		@ frame_needed = 1, uses_anonymous_args = 0
 3069 0000 90B5     		push	{r4, r7, lr}
 3070              	.LCFI76:
 3071              		.cfi_def_cfa_offset 12
 3072              		.cfi_offset 4, -12
 3073              		.cfi_offset 7, -8
 3074              		.cfi_offset 14, -4
 3075 0002 83B0     		sub	sp, sp, #12
 3076              	.LCFI77:
 3077              		.cfi_def_cfa_offset 24
 3078 0004 00AF     		add	r7, sp, #0
 3079              	.LCFI78:
 3080              		.cfi_def_cfa_register 7
 787:../LSM9DS1_Driver.c **** 	uint8_t i = 0; //licznik dla czytania
 3081              		.loc 1 787 0
 3082 0006 4FF00003 		mov	r3, #0
 3083 000a FB71     		strb	r3, [r7, #7]
 788:../LSM9DS1_Driver.c **** 	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
 789:../LSM9DS1_Driver.c **** 	uint8_t subAddr = OUT_X_L_XL;
 3084              		.loc 1 789 0
 3085 000c 4FF02803 		mov	r3, #40
 3086 0010 BB71     		strb	r3, [r7, #6]
 790:../LSM9DS1_Driver.c **** 
 791:../LSM9DS1_Driver.c **** 	while(i < 6)
 3087              		.loc 1 791 0
 3088 0012 20E0     		b	.L116
 3089              	.L117:
 792:../LSM9DS1_Driver.c **** 	{
 793:../LSM9DS1_Driver.c **** 		subAddr = OUT_X_L_XL;
 3090              		.loc 1 793 0
 3091 0014 4FF02803 		mov	r3, #40
 3092 0018 BB71     		strb	r3, [r7, #6]
 794:../LSM9DS1_Driver.c **** 		subAddr = subAddr + i;
 3093              		.loc 1 794 0
 3094 001a BA79     		ldrb	r2, [r7, #6]
 3095 001c FB79     		ldrb	r3, [r7, #7]
 3096 001e D318     		adds	r3, r2, r3
 3097 0020 BB71     		strb	r3, [r7, #6]
 795:../LSM9DS1_Driver.c **** 		temp[i] = I2CreadBytes(_xgAddress, subAddr, NULL, 0);
 3098              		.loc 1 795 0
 3099 0022 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 3100 0024 40F20003 		movw	r3, #:lower16:_xgAddress
 3101 0028 C0F20003 		movt	r3, #:upper16:_xgAddress
 3102 002c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3103 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 3104 0030 1046     		mov	r0, r2
 3105 0032 1946     		mov	r1, r3
 3106 0034 4FF00002 		mov	r2, #0
 3107 0038 4FF00003 		mov	r3, #0
 3108 003c FFF7FEFF 		bl	I2CreadBytes
 3109 0040 0346     		mov	r3, r0
 3110 0042 1A46     		mov	r2, r3
 3111 0044 07F10801 		add	r1, r7, #8
 3112 0048 0B19     		adds	r3, r1, r4
 3113 004a 03F8082C 		strb	r2, [r3, #-8]
 796:../LSM9DS1_Driver.c **** 		i++;
 3114              		.loc 1 796 0
 3115 004e FB79     		ldrb	r3, [r7, #7]
 3116 0050 03F10103 		add	r3, r3, #1
 3117 0054 FB71     		strb	r3, [r7, #7]
 3118              	.L116:
 791:../LSM9DS1_Driver.c **** 	while(i < 6)
 3119              		.loc 1 791 0 discriminator 1
 3120 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3121 0058 052B     		cmp	r3, #5
 3122 005a DBD9     		bls	.L117
 797:../LSM9DS1_Driver.c **** 	}
 798:../LSM9DS1_Driver.c **** 
 799:../LSM9DS1_Driver.c **** 	ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 3123              		.loc 1 799 0
 3124 005c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3125 005e 4FEA0323 		lsl	r3, r3, #8
 3126 0062 9AB2     		uxth	r2, r3
 3127 0064 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 3128 0066 1343     		orrs	r3, r3, r2
 3129 0068 9AB2     		uxth	r2, r3
 3130 006a 40F20003 		movw	r3, #:lower16:ax
 3131 006e C0F20003 		movt	r3, #:upper16:ax
 3132 0072 1A80     		strh	r2, [r3, #0]	@ movhi
 800:../LSM9DS1_Driver.c **** 	ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 3133              		.loc 1 800 0
 3134 0074 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3135 0076 4FEA0323 		lsl	r3, r3, #8
 3136 007a 9AB2     		uxth	r2, r3
 3137 007c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 3138 007e 1343     		orrs	r3, r3, r2
 3139 0080 9AB2     		uxth	r2, r3
 3140 0082 40F20003 		movw	r3, #:lower16:ay
 3141 0086 C0F20003 		movt	r3, #:upper16:ay
 3142 008a 1A80     		strh	r2, [r3, #0]	@ movhi
 801:../LSM9DS1_Driver.c **** 	az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 3143              		.loc 1 801 0
 3144 008c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 3145 008e 4FEA0323 		lsl	r3, r3, #8
 3146 0092 9AB2     		uxth	r2, r3
 3147 0094 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 3148 0096 1343     		orrs	r3, r3, r2
 3149 0098 9AB2     		uxth	r2, r3
 3150 009a 40F20003 		movw	r3, #:lower16:az
 3151 009e C0F20003 		movt	r3, #:upper16:az
 3152 00a2 1A80     		strh	r2, [r3, #0]	@ movhi
 802:../LSM9DS1_Driver.c **** 
 803:../LSM9DS1_Driver.c **** 	if (_autoCalc) //kalibracja
 3153              		.loc 1 803 0
 3154 00a4 40F20003 		movw	r3, #:lower16:_autoCalc
 3155 00a8 C0F20003 		movt	r3, #:upper16:_autoCalc
 3156 00ac 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3157 00ae 002B     		cmp	r3, #0
 3158 00b0 3BD0     		beq	.L115
 804:../LSM9DS1_Driver.c **** 	{
 805:../LSM9DS1_Driver.c **** 		ax -= aBiasRaw[X_AXIS];
 3159              		.loc 1 805 0
 3160 00b2 40F20003 		movw	r3, #:lower16:ax
 3161 00b6 C0F20003 		movt	r3, #:upper16:ax
 3162 00ba 1B88     		ldrh	r3, [r3, #0]
 3163 00bc 9AB2     		uxth	r2, r3
 3164 00be 40F20003 		movw	r3, #:lower16:aBiasRaw
 3165 00c2 C0F20003 		movt	r3, #:upper16:aBiasRaw
 3166 00c6 1B88     		ldrh	r3, [r3, #0]
 3167 00c8 9BB2     		uxth	r3, r3
 3168 00ca D31A     		subs	r3, r2, r3
 3169 00cc 9BB2     		uxth	r3, r3
 3170 00ce 9AB2     		uxth	r2, r3
 3171 00d0 40F20003 		movw	r3, #:lower16:ax
 3172 00d4 C0F20003 		movt	r3, #:upper16:ax
 3173 00d8 1A80     		strh	r2, [r3, #0]	@ movhi
 806:../LSM9DS1_Driver.c **** 		ay -= aBiasRaw[Y_AXIS];
 3174              		.loc 1 806 0
 3175 00da 40F20003 		movw	r3, #:lower16:ay
 3176 00de C0F20003 		movt	r3, #:upper16:ay
 3177 00e2 1B88     		ldrh	r3, [r3, #0]
 3178 00e4 9AB2     		uxth	r2, r3
 3179 00e6 40F20003 		movw	r3, #:lower16:aBiasRaw
 3180 00ea C0F20003 		movt	r3, #:upper16:aBiasRaw
 3181 00ee 5B88     		ldrh	r3, [r3, #2]
 3182 00f0 9BB2     		uxth	r3, r3
 3183 00f2 D31A     		subs	r3, r2, r3
 3184 00f4 9BB2     		uxth	r3, r3
 3185 00f6 9AB2     		uxth	r2, r3
 3186 00f8 40F20003 		movw	r3, #:lower16:ay
 3187 00fc C0F20003 		movt	r3, #:upper16:ay
 3188 0100 1A80     		strh	r2, [r3, #0]	@ movhi
 807:../LSM9DS1_Driver.c **** 		az -= aBiasRaw[Z_AXIS];
 3189              		.loc 1 807 0
 3190 0102 40F20003 		movw	r3, #:lower16:az
 3191 0106 C0F20003 		movt	r3, #:upper16:az
 3192 010a 1B88     		ldrh	r3, [r3, #0]
 3193 010c 9AB2     		uxth	r2, r3
 3194 010e 40F20003 		movw	r3, #:lower16:aBiasRaw
 3195 0112 C0F20003 		movt	r3, #:upper16:aBiasRaw
 3196 0116 9B88     		ldrh	r3, [r3, #4]
 3197 0118 9BB2     		uxth	r3, r3
 3198 011a D31A     		subs	r3, r2, r3
 3199 011c 9BB2     		uxth	r3, r3
 3200 011e 9AB2     		uxth	r2, r3
 3201 0120 40F20003 		movw	r3, #:lower16:az
 3202 0124 C0F20003 		movt	r3, #:upper16:az
 3203 0128 1A80     		strh	r2, [r3, #0]	@ movhi
 3204              	.L115:
 808:../LSM9DS1_Driver.c **** 	}
 809:../LSM9DS1_Driver.c **** 
 810:../LSM9DS1_Driver.c **** 	/*ax = calcAccel(ax);
 811:../LSM9DS1_Driver.c **** 	ay = calcAccel(ay);
 812:../LSM9DS1_Driver.c **** 	az = calcAccel(az);*/
 813:../LSM9DS1_Driver.c **** }
 3205              		.loc 1 813 0
 3206 012a 07F10C07 		add	r7, r7, #12
 3207 012e BD46     		mov	sp, r7
 3208 0130 90BD     		pop	{r4, r7, pc}
 3209              		.cfi_endproc
 3210              	.LFE145:
 3212 0132 00BF     		.section	.text.readAccelToSensor,"ax",%progbits
 3213              		.align	2
 3214              		.global	readAccelToSensor
 3215              		.thumb
 3216              		.thumb_func
 3218              	readAccelToSensor:
 3219              	.LFB146:
 814:../LSM9DS1_Driver.c **** 
 815:../LSM9DS1_Driver.c **** void readAccelToSensor(accel *pomiar)
 816:../LSM9DS1_Driver.c **** {
 3220              		.loc 1 816 0
 3221              		.cfi_startproc
 3222              		@ args = 0, pretend = 0, frame = 16
 3223              		@ frame_needed = 1, uses_anonymous_args = 0
 3224 0000 90B5     		push	{r4, r7, lr}
 3225              	.LCFI79:
 3226              		.cfi_def_cfa_offset 12
 3227              		.cfi_offset 4, -12
 3228              		.cfi_offset 7, -8
 3229              		.cfi_offset 14, -4
 3230 0002 85B0     		sub	sp, sp, #20
 3231              	.LCFI80:
 3232              		.cfi_def_cfa_offset 32
 3233 0004 00AF     		add	r7, sp, #0
 3234              	.LCFI81:
 3235              		.cfi_def_cfa_register 7
 3236 0006 7860     		str	r0, [r7, #4]
 817:../LSM9DS1_Driver.c **** 	uint8_t i = 0; //licznik dla czytania
 3237              		.loc 1 817 0
 3238 0008 4FF00003 		mov	r3, #0
 3239 000c FB73     		strb	r3, [r7, #15]
 818:../LSM9DS1_Driver.c **** 	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
 819:../LSM9DS1_Driver.c **** 	uint8_t subAddr = OUT_X_L_XL;
 3240              		.loc 1 819 0
 3241 000e 4FF02803 		mov	r3, #40
 3242 0012 BB73     		strb	r3, [r7, #14]
 820:../LSM9DS1_Driver.c **** 
 821:../LSM9DS1_Driver.c **** 	while(i < 6)
 3243              		.loc 1 821 0
 3244 0014 20E0     		b	.L120
 3245              	.L121:
 822:../LSM9DS1_Driver.c **** 	{
 823:../LSM9DS1_Driver.c **** 		subAddr = OUT_X_L_XL;
 3246              		.loc 1 823 0
 3247 0016 4FF02803 		mov	r3, #40
 3248 001a BB73     		strb	r3, [r7, #14]
 824:../LSM9DS1_Driver.c **** 		subAddr = subAddr + i;
 3249              		.loc 1 824 0
 3250 001c BA7B     		ldrb	r2, [r7, #14]
 3251 001e FB7B     		ldrb	r3, [r7, #15]
 3252 0020 D318     		adds	r3, r2, r3
 3253 0022 BB73     		strb	r3, [r7, #14]
 825:../LSM9DS1_Driver.c **** 		temp[i] = I2CreadBytes(_xgAddress, subAddr, NULL, 0);
 3254              		.loc 1 825 0
 3255 0024 FC7B     		ldrb	r4, [r7, #15]	@ zero_extendqisi2
 3256 0026 40F20003 		movw	r3, #:lower16:_xgAddress
 3257 002a C0F20003 		movt	r3, #:upper16:_xgAddress
 3258 002e 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3259 0030 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3260 0032 1046     		mov	r0, r2
 3261 0034 1946     		mov	r1, r3
 3262 0036 4FF00002 		mov	r2, #0
 3263 003a 4FF00003 		mov	r3, #0
 3264 003e FFF7FEFF 		bl	I2CreadBytes
 3265 0042 0346     		mov	r3, r0
 3266 0044 1A46     		mov	r2, r3
 3267 0046 07F11001 		add	r1, r7, #16
 3268 004a 0B19     		adds	r3, r1, r4
 3269 004c 03F8082C 		strb	r2, [r3, #-8]
 826:../LSM9DS1_Driver.c **** 		i++;
 3270              		.loc 1 826 0
 3271 0050 FB7B     		ldrb	r3, [r7, #15]
 3272 0052 03F10103 		add	r3, r3, #1
 3273 0056 FB73     		strb	r3, [r7, #15]
 3274              	.L120:
 821:../LSM9DS1_Driver.c **** 	while(i < 6)
 3275              		.loc 1 821 0 discriminator 1
 3276 0058 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3277 005a 052B     		cmp	r3, #5
 3278 005c DBD9     		bls	.L121
 827:../LSM9DS1_Driver.c **** 	}
 828:../LSM9DS1_Driver.c **** 
 829:../LSM9DS1_Driver.c **** 	ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 3279              		.loc 1 829 0
 3280 005e 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 3281 0060 4FEA0323 		lsl	r3, r3, #8
 3282 0064 9AB2     		uxth	r2, r3
 3283 0066 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 3284 0068 1343     		orrs	r3, r3, r2
 3285 006a 9AB2     		uxth	r2, r3
 3286 006c 40F20003 		movw	r3, #:lower16:ax
 3287 0070 C0F20003 		movt	r3, #:upper16:ax
 3288 0074 1A80     		strh	r2, [r3, #0]	@ movhi
 830:../LSM9DS1_Driver.c **** 	ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 3289              		.loc 1 830 0
 3290 0076 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3291 0078 4FEA0323 		lsl	r3, r3, #8
 3292 007c 9AB2     		uxth	r2, r3
 3293 007e BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 3294 0080 1343     		orrs	r3, r3, r2
 3295 0082 9AB2     		uxth	r2, r3
 3296 0084 40F20003 		movw	r3, #:lower16:ay
 3297 0088 C0F20003 		movt	r3, #:upper16:ay
 3298 008c 1A80     		strh	r2, [r3, #0]	@ movhi
 831:../LSM9DS1_Driver.c **** 	az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 3299              		.loc 1 831 0
 3300 008e 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 3301 0090 4FEA0323 		lsl	r3, r3, #8
 3302 0094 9AB2     		uxth	r2, r3
 3303 0096 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 3304 0098 1343     		orrs	r3, r3, r2
 3305 009a 9AB2     		uxth	r2, r3
 3306 009c 40F20003 		movw	r3, #:lower16:az
 3307 00a0 C0F20003 		movt	r3, #:upper16:az
 3308 00a4 1A80     		strh	r2, [r3, #0]	@ movhi
 832:../LSM9DS1_Driver.c **** 
 833:../LSM9DS1_Driver.c **** 	if (_autoCalc) //kalibracja
 3309              		.loc 1 833 0
 3310 00a6 40F20003 		movw	r3, #:lower16:_autoCalc
 3311 00aa C0F20003 		movt	r3, #:upper16:_autoCalc
 3312 00ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3313 00b0 002B     		cmp	r3, #0
 3314 00b2 3BD0     		beq	.L122
 834:../LSM9DS1_Driver.c **** 	{
 835:../LSM9DS1_Driver.c **** 		ax -= aBiasRaw[X_AXIS];
 3315              		.loc 1 835 0
 3316 00b4 40F20003 		movw	r3, #:lower16:ax
 3317 00b8 C0F20003 		movt	r3, #:upper16:ax
 3318 00bc 1B88     		ldrh	r3, [r3, #0]
 3319 00be 9AB2     		uxth	r2, r3
 3320 00c0 40F20003 		movw	r3, #:lower16:aBiasRaw
 3321 00c4 C0F20003 		movt	r3, #:upper16:aBiasRaw
 3322 00c8 1B88     		ldrh	r3, [r3, #0]
 3323 00ca 9BB2     		uxth	r3, r3
 3324 00cc D31A     		subs	r3, r2, r3
 3325 00ce 9BB2     		uxth	r3, r3
 3326 00d0 9AB2     		uxth	r2, r3
 3327 00d2 40F20003 		movw	r3, #:lower16:ax
 3328 00d6 C0F20003 		movt	r3, #:upper16:ax
 3329 00da 1A80     		strh	r2, [r3, #0]	@ movhi
 836:../LSM9DS1_Driver.c **** 		ay -= aBiasRaw[Y_AXIS];
 3330              		.loc 1 836 0
 3331 00dc 40F20003 		movw	r3, #:lower16:ay
 3332 00e0 C0F20003 		movt	r3, #:upper16:ay
 3333 00e4 1B88     		ldrh	r3, [r3, #0]
 3334 00e6 9AB2     		uxth	r2, r3
 3335 00e8 40F20003 		movw	r3, #:lower16:aBiasRaw
 3336 00ec C0F20003 		movt	r3, #:upper16:aBiasRaw
 3337 00f0 5B88     		ldrh	r3, [r3, #2]
 3338 00f2 9BB2     		uxth	r3, r3
 3339 00f4 D31A     		subs	r3, r2, r3
 3340 00f6 9BB2     		uxth	r3, r3
 3341 00f8 9AB2     		uxth	r2, r3
 3342 00fa 40F20003 		movw	r3, #:lower16:ay
 3343 00fe C0F20003 		movt	r3, #:upper16:ay
 3344 0102 1A80     		strh	r2, [r3, #0]	@ movhi
 837:../LSM9DS1_Driver.c **** 		az -= aBiasRaw[Z_AXIS];
 3345              		.loc 1 837 0
 3346 0104 40F20003 		movw	r3, #:lower16:az
 3347 0108 C0F20003 		movt	r3, #:upper16:az
 3348 010c 1B88     		ldrh	r3, [r3, #0]
 3349 010e 9AB2     		uxth	r2, r3
 3350 0110 40F20003 		movw	r3, #:lower16:aBiasRaw
 3351 0114 C0F20003 		movt	r3, #:upper16:aBiasRaw
 3352 0118 9B88     		ldrh	r3, [r3, #4]
 3353 011a 9BB2     		uxth	r3, r3
 3354 011c D31A     		subs	r3, r2, r3
 3355 011e 9BB2     		uxth	r3, r3
 3356 0120 9AB2     		uxth	r2, r3
 3357 0122 40F20003 		movw	r3, #:lower16:az
 3358 0126 C0F20003 		movt	r3, #:upper16:az
 3359 012a 1A80     		strh	r2, [r3, #0]	@ movhi
 3360              	.L122:
 838:../LSM9DS1_Driver.c **** 	}
 839:../LSM9DS1_Driver.c **** 
 840:../LSM9DS1_Driver.c **** 	ax = calcAccel(ax);
 3361              		.loc 1 840 0
 3362 012c 40F20003 		movw	r3, #:lower16:ax
 3363 0130 C0F20003 		movt	r3, #:upper16:ax
 3364 0134 1B88     		ldrh	r3, [r3, #0]
 3365 0136 1BB2     		sxth	r3, r3
 3366 0138 1846     		mov	r0, r3
 3367 013a FFF7FEFF 		bl	calcAccel
 3368 013e 07EE900A 		fmsr	s15, r0
 3369 0142 FDEEE77A 		ftosizs	s15, s15
 3370 0146 17EE903A 		fmrs	r3, s15	@ int
 3371 014a 9AB2     		uxth	r2, r3
 3372 014c 40F20003 		movw	r3, #:lower16:ax
 3373 0150 C0F20003 		movt	r3, #:upper16:ax
 3374 0154 1A80     		strh	r2, [r3, #0]	@ movhi
 841:../LSM9DS1_Driver.c **** 	ay = calcAccel(ay);
 3375              		.loc 1 841 0
 3376 0156 40F20003 		movw	r3, #:lower16:ay
 3377 015a C0F20003 		movt	r3, #:upper16:ay
 3378 015e 1B88     		ldrh	r3, [r3, #0]
 3379 0160 1BB2     		sxth	r3, r3
 3380 0162 1846     		mov	r0, r3
 3381 0164 FFF7FEFF 		bl	calcAccel
 3382 0168 07EE900A 		fmsr	s15, r0
 3383 016c FDEEE77A 		ftosizs	s15, s15
 3384 0170 17EE903A 		fmrs	r3, s15	@ int
 3385 0174 9AB2     		uxth	r2, r3
 3386 0176 40F20003 		movw	r3, #:lower16:ay
 3387 017a C0F20003 		movt	r3, #:upper16:ay
 3388 017e 1A80     		strh	r2, [r3, #0]	@ movhi
 842:../LSM9DS1_Driver.c **** 	az = calcAccel(az);
 3389              		.loc 1 842 0
 3390 0180 40F20003 		movw	r3, #:lower16:az
 3391 0184 C0F20003 		movt	r3, #:upper16:az
 3392 0188 1B88     		ldrh	r3, [r3, #0]
 3393 018a 1BB2     		sxth	r3, r3
 3394 018c 1846     		mov	r0, r3
 3395 018e FFF7FEFF 		bl	calcAccel
 3396 0192 07EE900A 		fmsr	s15, r0
 3397 0196 FDEEE77A 		ftosizs	s15, s15
 3398 019a 17EE903A 		fmrs	r3, s15	@ int
 3399 019e 9AB2     		uxth	r2, r3
 3400 01a0 40F20003 		movw	r3, #:lower16:az
 3401 01a4 C0F20003 		movt	r3, #:upper16:az
 3402 01a8 1A80     		strh	r2, [r3, #0]	@ movhi
 843:../LSM9DS1_Driver.c **** 
 844:../LSM9DS1_Driver.c **** 	pomiar->ax = ax;
 3403              		.loc 1 844 0
 3404 01aa 40F20003 		movw	r3, #:lower16:ax
 3405 01ae C0F20003 		movt	r3, #:upper16:ax
 3406 01b2 1A88     		ldrh	r2, [r3, #0]
 3407 01b4 7B68     		ldr	r3, [r7, #4]
 3408 01b6 1A80     		strh	r2, [r3, #0]	@ movhi
 845:../LSM9DS1_Driver.c **** 	pomiar->ay = ay;
 3409              		.loc 1 845 0
 3410 01b8 40F20003 		movw	r3, #:lower16:ay
 3411 01bc C0F20003 		movt	r3, #:upper16:ay
 3412 01c0 1A88     		ldrh	r2, [r3, #0]
 3413 01c2 7B68     		ldr	r3, [r7, #4]
 3414 01c4 5A80     		strh	r2, [r3, #2]	@ movhi
 846:../LSM9DS1_Driver.c **** 	pomiar->az = az;
 3415              		.loc 1 846 0
 3416 01c6 40F20003 		movw	r3, #:lower16:az
 3417 01ca C0F20003 		movt	r3, #:upper16:az
 3418 01ce 1A88     		ldrh	r2, [r3, #0]
 3419 01d0 7B68     		ldr	r3, [r7, #4]
 3420 01d2 9A80     		strh	r2, [r3, #4]	@ movhi
 847:../LSM9DS1_Driver.c **** }
 3421              		.loc 1 847 0
 3422 01d4 07F11407 		add	r7, r7, #20
 3423 01d8 BD46     		mov	sp, r7
 3424 01da 90BD     		pop	{r4, r7, pc}
 3425              		.cfi_endproc
 3426              	.LFE146:
 3428              		.section	.text.I2CreadBytes,"ax",%progbits
 3429              		.align	2
 3430              		.global	I2CreadBytes
 3431              		.thumb
 3432              		.thumb_func
 3434              	I2CreadBytes:
 3435              	.LFB147:
 848:../LSM9DS1_Driver.c **** 
 849:../LSM9DS1_Driver.c **** uint8_t I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
 850:../LSM9DS1_Driver.c **** {
 3436              		.loc 1 850 0
 3437              		.cfi_startproc
 3438              		@ args = 0, pretend = 0, frame = 40
 3439              		@ frame_needed = 1, uses_anonymous_args = 0
 3440 0000 80B5     		push	{r7, lr}
 3441              	.LCFI82:
 3442              		.cfi_def_cfa_offset 8
 3443              		.cfi_offset 7, -8
 3444              		.cfi_offset 14, -4
 3445 0002 8AB0     		sub	sp, sp, #40
 3446              	.LCFI83:
 3447              		.cfi_def_cfa_offset 48
 3448 0004 00AF     		add	r7, sp, #0
 3449              	.LCFI84:
 3450              		.cfi_def_cfa_register 7
 3451 0006 3A60     		str	r2, [r7, #0]
 3452 0008 0246     		mov	r2, r0
 3453 000a FA71     		strb	r2, [r7, #7]
 3454 000c 0A46     		mov	r2, r1
 3455 000e BA71     		strb	r2, [r7, #6]
 3456 0010 7B71     		strb	r3, [r7, #5]
 851:../LSM9DS1_Driver.c **** 		USIC_CH_TypeDef* I2CRegs = I2C001_Handle0.I2CRegs;
 3457              		.loc 1 851 0
 3458 0012 40F20003 		movw	r3, #:lower16:I2C001_Handle0
 3459 0016 C0F20003 		movt	r3, #:upper16:I2C001_Handle0
 3460 001a 5B68     		ldr	r3, [r3, #4]
 3461 001c 7B62     		str	r3, [r7, #36]
 852:../LSM9DS1_Driver.c **** 
 853:../LSM9DS1_Driver.c **** 		I2C001_DataType data1;
 854:../LSM9DS1_Driver.c **** 		data1.Data1.TDF_Type = I2C_TDF_MStart;
 3462              		.loc 1 854 0
 3463 001e 4FF00403 		mov	r3, #4
 3464 0022 7B77     		strb	r3, [r7, #29]
 855:../LSM9DS1_Driver.c **** 		data1.Data1.Data = ((address<<1) | I2C_WRITE);
 3465              		.loc 1 855 0
 3466 0024 FB79     		ldrb	r3, [r7, #7]
 3467 0026 4FEA4303 		lsl	r3, r3, #1
 3468 002a DBB2     		uxtb	r3, r3
 3469 002c 3B77     		strb	r3, [r7, #28]
 856:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data1))
 3470              		.loc 1 856 0
 3471 002e 07E0     		b	.L124
 3472              	.L125:
 857:../LSM9DS1_Driver.c **** 		{
 858:../LSM9DS1_Driver.c **** 			USIC_FlushTxFIFO(I2CRegs);
 3473              		.loc 1 858 0
 3474 0030 7B6A     		ldr	r3, [r7, #36]
 3475 0032 D3F81831 		ldr	r3, [r3, #280]
 3476 0036 43F40042 		orr	r2, r3, #32768
 3477 003a 7B6A     		ldr	r3, [r7, #36]
 3478 003c C3F81821 		str	r2, [r3, #280]
 3479              	.L124:
 856:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data1))
 3480              		.loc 1 856 0 discriminator 1
 3481 0040 07F11C03 		add	r3, r7, #28
 3482 0044 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 3483 0048 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 3484 004c 1946     		mov	r1, r3
 3485 004e FFF7FEFF 		bl	I2C001_WriteData
 3486 0052 0346     		mov	r3, r0
 3487 0054 002B     		cmp	r3, #0
 3488 0056 EBD0     		beq	.L125
 859:../LSM9DS1_Driver.c **** 		}
 860:../LSM9DS1_Driver.c **** 		delay(10000);
 3489              		.loc 1 860 0
 3490 0058 42F21070 		movw	r0, #10000
 3491 005c FFF7FEFF 		bl	delay
 861:../LSM9DS1_Driver.c **** 
 862:../LSM9DS1_Driver.c **** 		I2C001_DataType data2;
 863:../LSM9DS1_Driver.c **** 		data2.Data1.TDF_Type = I2C_TDF_MTxData;
 3492              		.loc 1 863 0
 3493 0060 4FF00003 		mov	r3, #0
 3494 0064 7B76     		strb	r3, [r7, #25]
 864:../LSM9DS1_Driver.c **** 		data2.Data1.Data = (subAddress);
 3495              		.loc 1 864 0
 3496 0066 BB79     		ldrb	r3, [r7, #6]
 3497 0068 3B76     		strb	r3, [r7, #24]
 865:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data2))
 3498              		.loc 1 865 0
 3499 006a 07E0     		b	.L126
 3500              	.L127:
 866:../LSM9DS1_Driver.c **** 		{
 867:../LSM9DS1_Driver.c **** 			USIC_FlushTxFIFO(I2CRegs);
 3501              		.loc 1 867 0
 3502 006c 7B6A     		ldr	r3, [r7, #36]
 3503 006e D3F81831 		ldr	r3, [r3, #280]
 3504 0072 43F40042 		orr	r2, r3, #32768
 3505 0076 7B6A     		ldr	r3, [r7, #36]
 3506 0078 C3F81821 		str	r2, [r3, #280]
 3507              	.L126:
 865:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data2))
 3508              		.loc 1 865 0 discriminator 1
 3509 007c 07F11803 		add	r3, r7, #24
 3510 0080 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 3511 0084 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 3512 0088 1946     		mov	r1, r3
 3513 008a FFF7FEFF 		bl	I2C001_WriteData
 3514 008e 0346     		mov	r3, r0
 3515 0090 002B     		cmp	r3, #0
 3516 0092 EBD0     		beq	.L127
 868:../LSM9DS1_Driver.c **** 		}
 869:../LSM9DS1_Driver.c **** 		delay(10000);
 3517              		.loc 1 869 0
 3518 0094 42F21070 		movw	r0, #10000
 3519 0098 FFF7FEFF 		bl	delay
 870:../LSM9DS1_Driver.c **** 
 871:../LSM9DS1_Driver.c **** 		I2C001_DataType data3;
 872:../LSM9DS1_Driver.c **** 		data3.Data1.TDF_Type = I2C_TDF_MRStart;
 3520              		.loc 1 872 0
 3521 009c 4FF00503 		mov	r3, #5
 3522 00a0 7B75     		strb	r3, [r7, #21]
 873:../LSM9DS1_Driver.c **** 		data3.Data1.Data = ((address<<1) | I2C_READ);
 3523              		.loc 1 873 0
 3524 00a2 FB79     		ldrb	r3, [r7, #7]
 3525 00a4 4FEA4303 		lsl	r3, r3, #1
 3526 00a8 DBB2     		uxtb	r3, r3
 3527 00aa 43F00103 		orr	r3, r3, #1
 3528 00ae DBB2     		uxtb	r3, r3
 3529 00b0 3B75     		strb	r3, [r7, #20]
 874:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data3))
 3530              		.loc 1 874 0
 3531 00b2 07E0     		b	.L128
 3532              	.L129:
 875:../LSM9DS1_Driver.c **** 		{
 876:../LSM9DS1_Driver.c **** 			USIC_FlushTxFIFO(I2CRegs);
 3533              		.loc 1 876 0
 3534 00b4 7B6A     		ldr	r3, [r7, #36]
 3535 00b6 D3F81831 		ldr	r3, [r3, #280]
 3536 00ba 43F40042 		orr	r2, r3, #32768
 3537 00be 7B6A     		ldr	r3, [r7, #36]
 3538 00c0 C3F81821 		str	r2, [r3, #280]
 3539              	.L128:
 874:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data3))
 3540              		.loc 1 874 0 discriminator 1
 3541 00c4 07F11403 		add	r3, r7, #20
 3542 00c8 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 3543 00cc C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 3544 00d0 1946     		mov	r1, r3
 3545 00d2 FFF7FEFF 		bl	I2C001_WriteData
 3546 00d6 0346     		mov	r3, r0
 3547 00d8 002B     		cmp	r3, #0
 3548 00da EBD0     		beq	.L129
 877:../LSM9DS1_Driver.c **** 		}
 878:../LSM9DS1_Driver.c **** 		delay(10000);
 3549              		.loc 1 878 0
 3550 00dc 42F21070 		movw	r0, #10000
 3551 00e0 FFF7FEFF 		bl	delay
 879:../LSM9DS1_Driver.c **** 
 880:../LSM9DS1_Driver.c **** 		I2C001_DataType data4;
 881:../LSM9DS1_Driver.c **** 		data4.Data1.TDF_Type = I2C_TDF_MRxAck1;
 3552              		.loc 1 881 0
 3553 00e4 4FF00303 		mov	r3, #3
 3554 00e8 7B74     		strb	r3, [r7, #17]
 882:../LSM9DS1_Driver.c **** 		data4.Data1.Data = ubyteFF;
 3555              		.loc 1 882 0
 3556 00ea 4FF0FF03 		mov	r3, #255
 3557 00ee 3B74     		strb	r3, [r7, #16]
 883:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data4))
 3558              		.loc 1 883 0
 3559 00f0 07E0     		b	.L130
 3560              	.L131:
 884:../LSM9DS1_Driver.c **** 		{
 885:../LSM9DS1_Driver.c **** 			USIC_FlushTxFIFO(I2CRegs);
 3561              		.loc 1 885 0
 3562 00f2 7B6A     		ldr	r3, [r7, #36]
 3563 00f4 D3F81831 		ldr	r3, [r3, #280]
 3564 00f8 43F40042 		orr	r2, r3, #32768
 3565 00fc 7B6A     		ldr	r3, [r7, #36]
 3566 00fe C3F81821 		str	r2, [r3, #280]
 3567              	.L130:
 883:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data4))
 3568              		.loc 1 883 0 discriminator 1
 3569 0102 07F11003 		add	r3, r7, #16
 3570 0106 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 3571 010a C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 3572 010e 1946     		mov	r1, r3
 3573 0110 FFF7FEFF 		bl	I2C001_WriteData
 3574 0114 0346     		mov	r3, r0
 3575 0116 002B     		cmp	r3, #0
 3576 0118 EBD0     		beq	.L131
 886:../LSM9DS1_Driver.c **** 		}
 887:../LSM9DS1_Driver.c **** 		delay(10000);
 3577              		.loc 1 887 0
 3578 011a 42F21070 		movw	r0, #10000
 3579 011e FFF7FEFF 		bl	delay
 888:../LSM9DS1_Driver.c **** 
 889:../LSM9DS1_Driver.c **** 		I2C001_DataType data5;
 890:../LSM9DS1_Driver.c **** 		data5.Data1.TDF_Type = I2C_TDF_MStop;
 3580              		.loc 1 890 0
 3581 0122 4FF00603 		mov	r3, #6
 3582 0126 7B73     		strb	r3, [r7, #13]
 891:../LSM9DS1_Driver.c **** 		data5.Data1.Data = ubyteFF;
 3583              		.loc 1 891 0
 3584 0128 4FF0FF03 		mov	r3, #255
 3585 012c 3B73     		strb	r3, [r7, #12]
 892:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data5))
 3586              		.loc 1 892 0
 3587 012e 07E0     		b	.L132
 3588              	.L133:
 893:../LSM9DS1_Driver.c **** 		{
 894:../LSM9DS1_Driver.c **** 			USIC_FlushTxFIFO(I2CRegs);
 3589              		.loc 1 894 0
 3590 0130 7B6A     		ldr	r3, [r7, #36]
 3591 0132 D3F81831 		ldr	r3, [r3, #280]
 3592 0136 43F40042 		orr	r2, r3, #32768
 3593 013a 7B6A     		ldr	r3, [r7, #36]
 3594 013c C3F81821 		str	r2, [r3, #280]
 3595              	.L132:
 892:../LSM9DS1_Driver.c **** 		while(!I2C001_WriteData(&I2C001_Handle0,&data5))
 3596              		.loc 1 892 0 discriminator 1
 3597 0140 07F10C03 		add	r3, r7, #12
 3598 0144 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 3599 0148 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 3600 014c 1946     		mov	r1, r3
 3601 014e FFF7FEFF 		bl	I2C001_WriteData
 3602 0152 0346     		mov	r3, r0
 3603 0154 002B     		cmp	r3, #0
 3604 0156 EBD0     		beq	.L133
 895:../LSM9DS1_Driver.c **** 		}
 896:../LSM9DS1_Driver.c **** 		delay(10000);
 3605              		.loc 1 896 0
 3606 0158 42F21070 		movw	r0, #10000
 3607 015c FFF7FEFF 		bl	delay
 897:../LSM9DS1_Driver.c **** 
 898:../LSM9DS1_Driver.c **** 		int k = 0;
 3608              		.loc 1 898 0
 3609 0160 4FF00003 		mov	r3, #0
 3610 0164 3B62     		str	r3, [r7, #32]
 899:../LSM9DS1_Driver.c **** 
 900:../LSM9DS1_Driver.c **** 		uint16_t buffer = 0;
 3611              		.loc 1 900 0
 3612 0166 4FF00003 		mov	r3, #0
 3613 016a 7B81     		strh	r3, [r7, #10]	@ movhi
 901:../LSM9DS1_Driver.c **** 		if(I2C001_ReadData(&I2C001_Handle0,&buffer))
 3614              		.loc 1 901 0
 3615 016c 07F10A03 		add	r3, r7, #10
 3616 0170 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 3617 0174 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 3618 0178 1946     		mov	r1, r3
 3619 017a FFF7FEFF 		bl	I2C001_ReadData
 3620 017e 0346     		mov	r3, r0
 3621 0180 002B     		cmp	r3, #0
 3622 0182 04D0     		beq	.L134
 902:../LSM9DS1_Driver.c **** 		{
 903:../LSM9DS1_Driver.c **** 			k++;
 3623              		.loc 1 903 0
 3624 0184 3B6A     		ldr	r3, [r7, #32]
 3625 0186 03F10103 		add	r3, r3, #1
 3626 018a 3B62     		str	r3, [r7, #32]
 3627 018c 03E0     		b	.L135
 3628              	.L134:
 904:../LSM9DS1_Driver.c **** 		}
 905:../LSM9DS1_Driver.c **** 		else
 906:../LSM9DS1_Driver.c **** 		{
 907:../LSM9DS1_Driver.c **** 			k--;
 3629              		.loc 1 907 0
 3630 018e 3B6A     		ldr	r3, [r7, #32]
 3631 0190 03F1FF33 		add	r3, r3, #-1
 3632 0194 3B62     		str	r3, [r7, #32]
 3633              	.L135:
 908:../LSM9DS1_Driver.c **** 		}
 909:../LSM9DS1_Driver.c **** 		delay(10000);
 3634              		.loc 1 909 0
 3635 0196 42F21070 		movw	r0, #10000
 3636 019a FFF7FEFF 		bl	delay
 910:../LSM9DS1_Driver.c **** 		return (uint8_t)buffer;
 3637              		.loc 1 910 0
 3638 019e 7B89     		ldrh	r3, [r7, #10]
 3639 01a0 DBB2     		uxtb	r3, r3
 911:../LSM9DS1_Driver.c **** }
 3640              		.loc 1 911 0
 3641 01a2 1846     		mov	r0, r3
 3642 01a4 07F12807 		add	r7, r7, #40
 3643 01a8 BD46     		mov	sp, r7
 3644 01aa 80BD     		pop	{r7, pc}
 3645              		.cfi_endproc
 3646              	.LFE147:
 3648              		.section	.text.magAvailable,"ax",%progbits
 3649              		.align	2
 3650              		.global	magAvailable
 3651              		.thumb
 3652              		.thumb_func
 3654              	magAvailable:
 3655              	.LFB148:
 912:../LSM9DS1_Driver.c **** 
 913:../LSM9DS1_Driver.c **** uint8_t magAvailable(lsm9ds1_axis axis)
 914:../LSM9DS1_Driver.c **** {
 3656              		.loc 1 914 0
 3657              		.cfi_startproc
 3658              		@ args = 0, pretend = 0, frame = 16
 3659              		@ frame_needed = 1, uses_anonymous_args = 0
 3660 0000 80B5     		push	{r7, lr}
 3661              	.LCFI85:
 3662              		.cfi_def_cfa_offset 8
 3663              		.cfi_offset 7, -8
 3664              		.cfi_offset 14, -4
 3665 0002 84B0     		sub	sp, sp, #16
 3666              	.LCFI86:
 3667              		.cfi_def_cfa_offset 24
 3668 0004 00AF     		add	r7, sp, #0
 3669              	.LCFI87:
 3670              		.cfi_def_cfa_register 7
 3671 0006 0346     		mov	r3, r0
 3672 0008 FB71     		strb	r3, [r7, #7]
 915:../LSM9DS1_Driver.c **** 	uint8_t status;
 916:../LSM9DS1_Driver.c **** 	status = mReadByte(STATUS_REG_M);
 3673              		.loc 1 916 0
 3674 000a 4FF02700 		mov	r0, #39
 3675 000e FFF7FEFF 		bl	mReadByte
 3676 0012 0346     		mov	r3, r0
 3677 0014 FB73     		strb	r3, [r7, #15]
 917:../LSM9DS1_Driver.c **** 
 918:../LSM9DS1_Driver.c **** 	return ((status & (1<<axis)) >> axis);
 3678              		.loc 1 918 0
 3679 0016 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 3680 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3681 001a 4FF00101 		mov	r1, #1
 3682 001e 01FA03F3 		lsl	r3, r1, r3
 3683 0022 1A40     		ands	r2, r2, r3
 3684 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3685 0026 42FA03F3 		asr	r3, r2, r3
 3686 002a DBB2     		uxtb	r3, r3
 919:../LSM9DS1_Driver.c **** }
 3687              		.loc 1 919 0
 3688 002c 1846     		mov	r0, r3
 3689 002e 07F11007 		add	r7, r7, #16
 3690 0032 BD46     		mov	sp, r7
 3691 0034 80BD     		pop	{r7, pc}
 3692              		.cfi_endproc
 3693              	.LFE148:
 3695 0036 00BF     		.section	.text.readMag1,"ax",%progbits
 3696              		.align	2
 3697              		.global	readMag1
 3698              		.thumb
 3699              		.thumb_func
 3701              	readMag1:
 3702              	.LFB149:
 920:../LSM9DS1_Driver.c **** 
 921:../LSM9DS1_Driver.c **** void readMag1(void)
 922:../LSM9DS1_Driver.c **** {
 3703              		.loc 1 922 0
 3704              		.cfi_startproc
 3705              		@ args = 0, pretend = 0, frame = 8
 3706              		@ frame_needed = 1, uses_anonymous_args = 0
 3707 0000 90B5     		push	{r4, r7, lr}
 3708              	.LCFI88:
 3709              		.cfi_def_cfa_offset 12
 3710              		.cfi_offset 4, -12
 3711              		.cfi_offset 7, -8
 3712              		.cfi_offset 14, -4
 3713 0002 83B0     		sub	sp, sp, #12
 3714              	.LCFI89:
 3715              		.cfi_def_cfa_offset 24
 3716 0004 00AF     		add	r7, sp, #0
 3717              	.LCFI90:
 3718              		.cfi_def_cfa_register 7
 923:../LSM9DS1_Driver.c **** 	//for(int kl = 0; kl < 10; kl++){
 924:../LSM9DS1_Driver.c **** 	uint8_t temp[6]; // We'll read six bytes from the mag into temp
 925:../LSM9DS1_Driver.c **** 	uint8_t subAddress = OUT_X_L_M;
 3719              		.loc 1 925 0
 3720 0006 4FF02803 		mov	r3, #40
 3721 000a BB71     		strb	r3, [r7, #6]
 926:../LSM9DS1_Driver.c **** 	uint8_t i = 0;
 3722              		.loc 1 926 0
 3723 000c 4FF00003 		mov	r3, #0
 3724 0010 FB71     		strb	r3, [r7, #7]
 927:../LSM9DS1_Driver.c **** 
 928:../LSM9DS1_Driver.c **** 	while(i < 6)
 3725              		.loc 1 928 0
 3726 0012 19E0     		b	.L140
 3727              	.L141:
 929:../LSM9DS1_Driver.c **** 	{
 930:../LSM9DS1_Driver.c **** 		temp[i] = I2CreadBytes(_mAddress, subAddress, NULL, 0);
 3728              		.loc 1 930 0
 3729 0014 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 3730 0016 40F20003 		movw	r3, #:lower16:_mAddress
 3731 001a C0F20003 		movt	r3, #:upper16:_mAddress
 3732 001e 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3733 0020 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 3734 0022 1046     		mov	r0, r2
 3735 0024 1946     		mov	r1, r3
 3736 0026 4FF00002 		mov	r2, #0
 3737 002a 4FF00003 		mov	r3, #0
 3738 002e FFF7FEFF 		bl	I2CreadBytes
 3739 0032 0346     		mov	r3, r0
 3740 0034 1A46     		mov	r2, r3
 3741 0036 07F10801 		add	r1, r7, #8
 3742 003a 0B19     		adds	r3, r1, r4
 3743 003c 03F8082C 		strb	r2, [r3, #-8]
 931:../LSM9DS1_Driver.c **** 		i++;
 3744              		.loc 1 931 0
 3745 0040 FB79     		ldrb	r3, [r7, #7]
 3746 0042 03F10103 		add	r3, r3, #1
 3747 0046 FB71     		strb	r3, [r7, #7]
 3748              	.L140:
 928:../LSM9DS1_Driver.c **** 	while(i < 6)
 3749              		.loc 1 928 0 discriminator 1
 3750 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3751 004a 052B     		cmp	r3, #5
 3752 004c E2D9     		bls	.L141
 932:../LSM9DS1_Driver.c **** 	}
 933:../LSM9DS1_Driver.c **** 
 934:../LSM9DS1_Driver.c **** 	mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 3753              		.loc 1 934 0
 3754 004e 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3755 0050 4FEA0323 		lsl	r3, r3, #8
 3756 0054 9AB2     		uxth	r2, r3
 3757 0056 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 3758 0058 1343     		orrs	r3, r3, r2
 3759 005a 9AB2     		uxth	r2, r3
 3760 005c 40F20003 		movw	r3, #:lower16:mx
 3761 0060 C0F20003 		movt	r3, #:upper16:mx
 3762 0064 1A80     		strh	r2, [r3, #0]	@ movhi
 935:../LSM9DS1_Driver.c **** 	my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 3763              		.loc 1 935 0
 3764 0066 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3765 0068 4FEA0323 		lsl	r3, r3, #8
 3766 006c 9AB2     		uxth	r2, r3
 3767 006e BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 3768 0070 1343     		orrs	r3, r3, r2
 3769 0072 9AB2     		uxth	r2, r3
 3770 0074 40F20003 		movw	r3, #:lower16:my
 3771 0078 C0F20003 		movt	r3, #:upper16:my
 3772 007c 1A80     		strh	r2, [r3, #0]	@ movhi
 936:../LSM9DS1_Driver.c **** 	mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 3773              		.loc 1 936 0
 3774 007e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 3775 0080 4FEA0323 		lsl	r3, r3, #8
 3776 0084 9AB2     		uxth	r2, r3
 3777 0086 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 3778 0088 1343     		orrs	r3, r3, r2
 3779 008a 9AB2     		uxth	r2, r3
 3780 008c 40F20003 		movw	r3, #:lower16:mz
 3781 0090 C0F20003 		movt	r3, #:upper16:mz
 3782 0094 1A80     		strh	r2, [r3, #0]	@ movhi
 937:../LSM9DS1_Driver.c **** 
 938:../LSM9DS1_Driver.c **** 	/*mx = calcMag(mx);
 939:../LSM9DS1_Driver.c **** 	my = calcMag(my);
 940:../LSM9DS1_Driver.c **** 	mz = calcMag(mz);*?
 941:../LSM9DS1_Driver.c **** 	/*}*/
 942:../LSM9DS1_Driver.c **** 
 943:../LSM9DS1_Driver.c **** 
 944:../LSM9DS1_Driver.c **** }
 3783              		.loc 1 944 0
 3784 0096 07F10C07 		add	r7, r7, #12
 3785 009a BD46     		mov	sp, r7
 3786 009c 90BD     		pop	{r4, r7, pc}
 3787              		.cfi_endproc
 3788              	.LFE149:
 3790 009e 00BF     		.section	.text.calibrateMag,"ax",%progbits
 3791              		.align	2
 3792              		.global	calibrateMag
 3793              		.thumb
 3794              		.thumb_func
 3796              	calibrateMag:
 3797              	.LFB150:
 945:../LSM9DS1_Driver.c **** 
 946:../LSM9DS1_Driver.c **** 
 947:../LSM9DS1_Driver.c **** void calibrateMag(bool loadIn)
 948:../LSM9DS1_Driver.c **** {
 3798              		.loc 1 948 0
 3799              		.cfi_startproc
 3800              		@ args = 0, pretend = 0, frame = 40
 3801              		@ frame_needed = 1, uses_anonymous_args = 0
 3802 0000 80B5     		push	{r7, lr}
 3803              	.LCFI91:
 3804              		.cfi_def_cfa_offset 8
 3805              		.cfi_offset 7, -8
 3806              		.cfi_offset 14, -4
 3807 0002 8AB0     		sub	sp, sp, #40
 3808              	.LCFI92:
 3809              		.cfi_def_cfa_offset 48
 3810 0004 00AF     		add	r7, sp, #0
 3811              	.LCFI93:
 3812              		.cfi_def_cfa_register 7
 3813 0006 0346     		mov	r3, r0
 3814 0008 FB71     		strb	r3, [r7, #7]
 949:../LSM9DS1_Driver.c **** 	int i, j;
 950:../LSM9DS1_Driver.c **** 	int16_t magMin[3] = {0, 0, 0};
 3815              		.loc 1 950 0
 3816 000a 4FF00003 		mov	r3, #0
 3817 000e 3B83     		strh	r3, [r7, #24]	@ movhi
 3818 0010 4FF00003 		mov	r3, #0
 3819 0014 7B83     		strh	r3, [r7, #26]	@ movhi
 3820 0016 4FF00003 		mov	r3, #0
 3821 001a BB83     		strh	r3, [r7, #28]	@ movhi
 951:../LSM9DS1_Driver.c **** 	int16_t magMax[3] = {0, 0, 0}; // The road warrior
 3822              		.loc 1 951 0
 3823 001c 4FF00003 		mov	r3, #0
 3824 0020 3B82     		strh	r3, [r7, #16]	@ movhi
 3825 0022 4FF00003 		mov	r3, #0
 3826 0026 7B82     		strh	r3, [r7, #18]	@ movhi
 3827 0028 4FF00003 		mov	r3, #0
 3828 002c BB82     		strh	r3, [r7, #20]	@ movhi
 952:../LSM9DS1_Driver.c **** 
 953:../LSM9DS1_Driver.c **** 	for (i=0; i<128; i++)
 3829              		.loc 1 953 0
 3830 002e 4FF00003 		mov	r3, #0
 3831 0032 7B62     		str	r3, [r7, #36]
 3832 0034 7CE0     		b	.L143
 3833              	.L153:
 3834              	.LBB6:
 954:../LSM9DS1_Driver.c **** 	{
 955:../LSM9DS1_Driver.c **** 		//tu nie wiem
 956:../LSM9DS1_Driver.c **** 		while (!magAvailable(i))
 3835              		.loc 1 956 0
 3836 0036 00BF     		nop
 3837              	.L144:
 3838              		.loc 1 956 0 is_stmt 0 discriminator 1
 3839 0038 7B6A     		ldr	r3, [r7, #36]
 3840 003a DBB2     		uxtb	r3, r3
 3841 003c 1846     		mov	r0, r3
 3842 003e FFF7FEFF 		bl	magAvailable
 3843 0042 0346     		mov	r3, r0
 3844 0044 002B     		cmp	r3, #0
 3845 0046 F7D0     		beq	.L144
 957:../LSM9DS1_Driver.c **** 			;
 958:../LSM9DS1_Driver.c **** 		readMag1();
 3846              		.loc 1 958 0 is_stmt 1
 3847 0048 FFF7FEFF 		bl	readMag1
 959:../LSM9DS1_Driver.c **** 		int16_t magTemp[3] = {0, 0, 0};
 3848              		.loc 1 959 0
 3849 004c 4FF00003 		mov	r3, #0
 3850 0050 3B81     		strh	r3, [r7, #8]	@ movhi
 3851 0052 4FF00003 		mov	r3, #0
 3852 0056 7B81     		strh	r3, [r7, #10]	@ movhi
 3853 0058 4FF00003 		mov	r3, #0
 3854 005c BB81     		strh	r3, [r7, #12]	@ movhi
 960:../LSM9DS1_Driver.c **** 		magTemp[0] = mx;
 3855              		.loc 1 960 0
 3856 005e 40F20003 		movw	r3, #:lower16:mx
 3857 0062 C0F20003 		movt	r3, #:upper16:mx
 3858 0066 1B88     		ldrh	r3, [r3, #0]
 3859 0068 3B81     		strh	r3, [r7, #8]	@ movhi
 961:../LSM9DS1_Driver.c **** 		magTemp[1] = my;
 3860              		.loc 1 961 0
 3861 006a 40F20003 		movw	r3, #:lower16:my
 3862 006e C0F20003 		movt	r3, #:upper16:my
 3863 0072 1B88     		ldrh	r3, [r3, #0]
 3864 0074 7B81     		strh	r3, [r7, #10]	@ movhi
 962:../LSM9DS1_Driver.c **** 		magTemp[2] = mz;
 3865              		.loc 1 962 0
 3866 0076 40F20003 		movw	r3, #:lower16:mz
 3867 007a C0F20003 		movt	r3, #:upper16:mz
 3868 007e 1B88     		ldrh	r3, [r3, #0]
 3869 0080 BB81     		strh	r3, [r7, #12]	@ movhi
 963:../LSM9DS1_Driver.c **** 		for (j = 0; j < 3; j++)
 3870              		.loc 1 963 0
 3871 0082 4FF00003 		mov	r3, #0
 3872 0086 3B62     		str	r3, [r7, #32]
 3873 0088 4BE0     		b	.L145
 3874              	.L148:
 964:../LSM9DS1_Driver.c **** 		{
 965:../LSM9DS1_Driver.c **** 			if (magTemp[j] > magMax[j]) magMax[j] = magTemp[j];
 3875              		.loc 1 965 0
 3876 008a 3B6A     		ldr	r3, [r7, #32]
 3877 008c 4FEA4303 		lsl	r3, r3, #1
 3878 0090 07F12801 		add	r1, r7, #40
 3879 0094 CB18     		adds	r3, r1, r3
 3880 0096 33F8202C 		ldrh	r2, [r3, #-32]
 3881 009a 3B6A     		ldr	r3, [r7, #32]
 3882 009c 4FEA4303 		lsl	r3, r3, #1
 3883 00a0 07F12801 		add	r1, r7, #40
 3884 00a4 CB18     		adds	r3, r1, r3
 3885 00a6 33F8183C 		ldrh	r3, [r3, #-24]
 3886 00aa 12B2     		sxth	r2, r2
 3887 00ac 1BB2     		sxth	r3, r3
 3888 00ae 9A42     		cmp	r2, r3
 3889 00b0 0FDD     		ble	.L146
 3890              		.loc 1 965 0 is_stmt 0 discriminator 1
 3891 00b2 3B6A     		ldr	r3, [r7, #32]
 3892 00b4 4FEA4303 		lsl	r3, r3, #1
 3893 00b8 07F12802 		add	r2, r7, #40
 3894 00bc D318     		adds	r3, r2, r3
 3895 00be 33F8202C 		ldrh	r2, [r3, #-32]
 3896 00c2 3B6A     		ldr	r3, [r7, #32]
 3897 00c4 4FEA4303 		lsl	r3, r3, #1
 3898 00c8 07F12801 		add	r1, r7, #40
 3899 00cc CB18     		adds	r3, r1, r3
 3900 00ce 23F8182C 		strh	r2, [r3, #-24]	@ movhi
 3901              	.L146:
 966:../LSM9DS1_Driver.c **** 			if (magTemp[j] < magMin[j]) magMin[j] = magTemp[j];
 3902              		.loc 1 966 0 is_stmt 1
 3903 00d2 3B6A     		ldr	r3, [r7, #32]
 3904 00d4 4FEA4303 		lsl	r3, r3, #1
 3905 00d8 07F12802 		add	r2, r7, #40
 3906 00dc D318     		adds	r3, r2, r3
 3907 00de 33F8202C 		ldrh	r2, [r3, #-32]
 3908 00e2 3B6A     		ldr	r3, [r7, #32]
 3909 00e4 4FEA4303 		lsl	r3, r3, #1
 3910 00e8 07F12801 		add	r1, r7, #40
 3911 00ec CB18     		adds	r3, r1, r3
 3912 00ee 33F8103C 		ldrh	r3, [r3, #-16]
 3913 00f2 12B2     		sxth	r2, r2
 3914 00f4 1BB2     		sxth	r3, r3
 3915 00f6 9A42     		cmp	r2, r3
 3916 00f8 0FDA     		bge	.L147
 3917              		.loc 1 966 0 is_stmt 0 discriminator 1
 3918 00fa 3B6A     		ldr	r3, [r7, #32]
 3919 00fc 4FEA4303 		lsl	r3, r3, #1
 3920 0100 07F12802 		add	r2, r7, #40
 3921 0104 D318     		adds	r3, r2, r3
 3922 0106 33F8202C 		ldrh	r2, [r3, #-32]
 3923 010a 3B6A     		ldr	r3, [r7, #32]
 3924 010c 4FEA4303 		lsl	r3, r3, #1
 3925 0110 07F12801 		add	r1, r7, #40
 3926 0114 CB18     		adds	r3, r1, r3
 3927 0116 23F8102C 		strh	r2, [r3, #-16]	@ movhi
 3928              	.L147:
 963:../LSM9DS1_Driver.c **** 		for (j = 0; j < 3; j++)
 3929              		.loc 1 963 0 is_stmt 1
 3930 011a 3B6A     		ldr	r3, [r7, #32]
 3931 011c 03F10103 		add	r3, r3, #1
 3932 0120 3B62     		str	r3, [r7, #32]
 3933              	.L145:
 963:../LSM9DS1_Driver.c **** 		for (j = 0; j < 3; j++)
 3934              		.loc 1 963 0 is_stmt 0 discriminator 1
 3935 0122 3B6A     		ldr	r3, [r7, #32]
 3936 0124 022B     		cmp	r3, #2
 3937 0126 B0DD     		ble	.L148
 3938              	.LBE6:
 953:../LSM9DS1_Driver.c **** 	for (i=0; i<128; i++)
 3939              		.loc 1 953 0 is_stmt 1
 3940 0128 7B6A     		ldr	r3, [r7, #36]
 3941 012a 03F10103 		add	r3, r3, #1
 3942 012e 7B62     		str	r3, [r7, #36]
 3943              	.L143:
 953:../LSM9DS1_Driver.c **** 	for (i=0; i<128; i++)
 3944              		.loc 1 953 0 is_stmt 0 discriminator 1
 3945 0130 7B6A     		ldr	r3, [r7, #36]
 3946 0132 7F2B     		cmp	r3, #127
 3947 0134 7FF77FAF 		ble	.L153
 967:../LSM9DS1_Driver.c **** 		}
 968:../LSM9DS1_Driver.c **** 	}
 969:../LSM9DS1_Driver.c **** 	for (j = 0; j < 3; j++)
 3948              		.loc 1 969 0 is_stmt 1
 3949 0138 4FF00003 		mov	r3, #0
 3950 013c 3B62     		str	r3, [r7, #32]
 3951 013e 49E0     		b	.L150
 3952              	.L152:
 970:../LSM9DS1_Driver.c **** 	{
 971:../LSM9DS1_Driver.c **** 		mBiasRaw[j] = (magMax[j] + magMin[j]) / 2;
 3953              		.loc 1 971 0
 3954 0140 3B6A     		ldr	r3, [r7, #32]
 3955 0142 4FEA4303 		lsl	r3, r3, #1
 3956 0146 07F12802 		add	r2, r7, #40
 3957 014a D318     		adds	r3, r2, r3
 3958 014c 33F8183C 		ldrh	r3, [r3, #-24]
 3959 0150 1AB2     		sxth	r2, r3
 3960 0152 3B6A     		ldr	r3, [r7, #32]
 3961 0154 4FEA4303 		lsl	r3, r3, #1
 3962 0158 07F12801 		add	r1, r7, #40
 3963 015c CB18     		adds	r3, r1, r3
 3964 015e 33F8103C 		ldrh	r3, [r3, #-16]
 3965 0162 1BB2     		sxth	r3, r3
 3966 0164 D318     		adds	r3, r2, r3
 3967 0166 4FEAD372 		lsr	r2, r3, #31
 3968 016a D318     		adds	r3, r2, r3
 3969 016c 4FEA6303 		asr	r3, r3, #1
 3970 0170 99B2     		uxth	r1, r3
 3971 0172 40F20003 		movw	r3, #:lower16:mBiasRaw
 3972 0176 C0F20003 		movt	r3, #:upper16:mBiasRaw
 3973 017a 3A6A     		ldr	r2, [r7, #32]
 3974 017c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 972:../LSM9DS1_Driver.c **** 		mBias[j] = calcMag(mBiasRaw[j]);
 3975              		.loc 1 972 0
 3976 0180 40F20003 		movw	r3, #:lower16:mBiasRaw
 3977 0184 C0F20003 		movt	r3, #:upper16:mBiasRaw
 3978 0188 3A6A     		ldr	r2, [r7, #32]
 3979 018a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3980 018e 1BB2     		sxth	r3, r3
 3981 0190 1846     		mov	r0, r3
 3982 0192 FFF7FEFF 		bl	calcMag
 3983 0196 0246     		mov	r2, r0	@ float
 3984 0198 40F20003 		movw	r3, #:lower16:mBias
 3985 019c C0F20003 		movt	r3, #:upper16:mBias
 3986 01a0 396A     		ldr	r1, [r7, #32]
 3987 01a2 4FEA8101 		lsl	r1, r1, #2
 3988 01a6 5B18     		adds	r3, r3, r1
 3989 01a8 1A60     		str	r2, [r3, #0]	@ float
 973:../LSM9DS1_Driver.c **** 		if (loadIn)
 3990              		.loc 1 973 0
 3991 01aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3992 01ac 002B     		cmp	r3, #0
 3993 01ae 0DD0     		beq	.L151
 974:../LSM9DS1_Driver.c **** 			magOffset(j, mBiasRaw[j]);
 3994              		.loc 1 974 0
 3995 01b0 3B6A     		ldr	r3, [r7, #32]
 3996 01b2 DAB2     		uxtb	r2, r3
 3997 01b4 40F20003 		movw	r3, #:lower16:mBiasRaw
 3998 01b8 C0F20003 		movt	r3, #:upper16:mBiasRaw
 3999 01bc 396A     		ldr	r1, [r7, #32]
 4000 01be 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 4001 01c2 1BB2     		sxth	r3, r3
 4002 01c4 1046     		mov	r0, r2
 4003 01c6 1946     		mov	r1, r3
 4004 01c8 FFF7FEFF 		bl	magOffset
 4005              	.L151:
 969:../LSM9DS1_Driver.c **** 	for (j = 0; j < 3; j++)
 4006              		.loc 1 969 0
 4007 01cc 3B6A     		ldr	r3, [r7, #32]
 4008 01ce 03F10103 		add	r3, r3, #1
 4009 01d2 3B62     		str	r3, [r7, #32]
 4010              	.L150:
 969:../LSM9DS1_Driver.c **** 	for (j = 0; j < 3; j++)
 4011              		.loc 1 969 0 is_stmt 0 discriminator 1
 4012 01d4 3B6A     		ldr	r3, [r7, #32]
 4013 01d6 022B     		cmp	r3, #2
 4014 01d8 B2DD     		ble	.L152
 975:../LSM9DS1_Driver.c **** 	}
 976:../LSM9DS1_Driver.c **** }
 4015              		.loc 1 976 0 is_stmt 1
 4016 01da 07F12807 		add	r7, r7, #40
 4017 01de BD46     		mov	sp, r7
 4018 01e0 80BD     		pop	{r7, pc}
 4019              		.cfi_endproc
 4020              	.LFE150:
 4022              		.global	__aeabi_d2f
 4023 01e2 00BF     		.section	.text.calcMag,"ax",%progbits
 4024              		.align	2
 4025              		.global	calcMag
 4026              		.thumb
 4027              		.thumb_func
 4029              	calcMag:
 4030              	.LFB151:
 977:../LSM9DS1_Driver.c **** 
 978:../LSM9DS1_Driver.c **** float calcMag(int16_t mag)
 979:../LSM9DS1_Driver.c **** {
 4031              		.loc 1 979 0
 4032              		.cfi_startproc
 4033              		@ args = 0, pretend = 0, frame = 8
 4034              		@ frame_needed = 1, uses_anonymous_args = 0
 4035 0000 80B5     		push	{r7, lr}
 4036              	.LCFI94:
 4037              		.cfi_def_cfa_offset 8
 4038              		.cfi_offset 7, -8
 4039              		.cfi_offset 14, -4
 4040 0002 82B0     		sub	sp, sp, #8
 4041              	.LCFI95:
 4042              		.cfi_def_cfa_offset 16
 4043 0004 00AF     		add	r7, sp, #0
 4044              	.LCFI96:
 4045              		.cfi_def_cfa_register 7
 4046 0006 0346     		mov	r3, r0
 4047 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 980:../LSM9DS1_Driver.c **** 	// Return the mag raw reading times our pre-calculated Gs / (ADC tick):
 981:../LSM9DS1_Driver.c **** 	return ceil(mRes * mag);
 4048              		.loc 1 981 0
 4049 000a B7F90630 		ldrsh	r3, [r7, #6]
 4050 000e 07EE903A 		fmsr	s15, r3	@ int
 4051 0012 B8EEE77A 		fsitos	s14, s15
 4052 0016 40F20003 		movw	r3, #:lower16:mRes
 4053 001a C0F20003 		movt	r3, #:upper16:mRes
 4054 001e D3ED007A 		flds	s15, [r3, #0]
 4055 0022 67EE277A 		fmuls	s15, s14, s15
 4056 0026 17EE900A 		fmrs	r0, s15
 4057 002a FFF7FEFF 		bl	__aeabi_f2d
 4058 002e 0246     		mov	r2, r0
 4059 0030 0B46     		mov	r3, r1
 4060 0032 1046     		mov	r0, r2
 4061 0034 1946     		mov	r1, r3
 4062 0036 FFF7FEFF 		bl	ceil
 4063 003a 0246     		mov	r2, r0
 4064 003c 0B46     		mov	r3, r1
 4065 003e 1046     		mov	r0, r2
 4066 0040 1946     		mov	r1, r3
 4067 0042 FFF7FEFF 		bl	__aeabi_d2f
 4068 0046 0346     		mov	r3, r0	@ float
 982:../LSM9DS1_Driver.c **** 	//return mag;
 983:../LSM9DS1_Driver.c **** }
 4069              		.loc 1 983 0
 4070 0048 1846     		mov	r0, r3	@ float
 4071 004a 07F10807 		add	r7, r7, #8
 4072 004e BD46     		mov	sp, r7
 4073 0050 80BD     		pop	{r7, pc}
 4074              		.cfi_endproc
 4075              	.LFE151:
 4077 0052 00BF     		.section	.text.magOffset,"ax",%progbits
 4078              		.align	2
 4079              		.global	magOffset
 4080              		.thumb
 4081              		.thumb_func
 4083              	magOffset:
 4084              	.LFB152:
 984:../LSM9DS1_Driver.c **** 
 985:../LSM9DS1_Driver.c **** void magOffset(uint8_t axis, int16_t offset)
 986:../LSM9DS1_Driver.c **** {
 4085              		.loc 1 986 0
 4086              		.cfi_startproc
 4087              		@ args = 0, pretend = 0, frame = 16
 4088              		@ frame_needed = 1, uses_anonymous_args = 0
 4089 0000 80B5     		push	{r7, lr}
 4090              	.LCFI97:
 4091              		.cfi_def_cfa_offset 8
 4092              		.cfi_offset 7, -8
 4093              		.cfi_offset 14, -4
 4094 0002 84B0     		sub	sp, sp, #16
 4095              	.LCFI98:
 4096              		.cfi_def_cfa_offset 24
 4097 0004 00AF     		add	r7, sp, #0
 4098              	.LCFI99:
 4099              		.cfi_def_cfa_register 7
 4100 0006 0246     		mov	r2, r0
 4101 0008 0B46     		mov	r3, r1
 4102 000a FA71     		strb	r2, [r7, #7]
 4103 000c BB80     		strh	r3, [r7, #4]	@ movhi
 987:../LSM9DS1_Driver.c **** 	if (axis > 2)
 4104              		.loc 1 987 0
 4105 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4106 0010 022B     		cmp	r3, #2
 4107 0012 21D8     		bhi	.L159
 4108              	.L157:
 988:../LSM9DS1_Driver.c **** 		return;
 989:../LSM9DS1_Driver.c **** 	uint8_t msb, lsb;
 990:../LSM9DS1_Driver.c **** 	msb = (offset & 0xFF00) >> 8;
 4109              		.loc 1 990 0
 4110 0014 B7F90430 		ldrsh	r3, [r7, #4]
 4111 0018 03F47F43 		and	r3, r3, #65280
 4112 001c 4FEA2323 		asr	r3, r3, #8
 4113 0020 FB73     		strb	r3, [r7, #15]
 991:../LSM9DS1_Driver.c **** 	lsb = offset & 0x00FF;
 4114              		.loc 1 991 0
 4115 0022 BB88     		ldrh	r3, [r7, #4]	@ movhi
 4116 0024 BB73     		strb	r3, [r7, #14]
 992:../LSM9DS1_Driver.c **** 	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
 4117              		.loc 1 992 0
 4118 0026 FB79     		ldrb	r3, [r7, #7]
 4119 0028 4FEA4303 		lsl	r3, r3, #1
 4120 002c DBB2     		uxtb	r3, r3
 4121 002e 03F10503 		add	r3, r3, #5
 4122 0032 DAB2     		uxtb	r2, r3
 4123 0034 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 4124 0036 1046     		mov	r0, r2
 4125 0038 1946     		mov	r1, r3
 4126 003a FFF7FEFF 		bl	mWriteByte
 993:../LSM9DS1_Driver.c **** 	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
 4127              		.loc 1 993 0
 4128 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4129 0040 03F10303 		add	r3, r3, #3
 4130 0044 DBB2     		uxtb	r3, r3
 4131 0046 4FEA4303 		lsl	r3, r3, #1
 4132 004a DAB2     		uxtb	r2, r3
 4133 004c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4134 004e 1046     		mov	r0, r2
 4135 0050 1946     		mov	r1, r3
 4136 0052 FFF7FEFF 		bl	mWriteByte
 4137 0056 00E0     		b	.L156
 4138              	.L159:
 988:../LSM9DS1_Driver.c **** 		return;
 4139              		.loc 1 988 0
 4140 0058 00BF     		nop
 4141              	.L156:
 994:../LSM9DS1_Driver.c **** }
 4142              		.loc 1 994 0
 4143 005a 07F11007 		add	r7, r7, #16
 4144 005e BD46     		mov	sp, r7
 4145 0060 80BD     		pop	{r7, pc}
 4146              		.cfi_endproc
 4147              	.LFE152:
 4149 0062 00BF     		.section	.text.accelAvailable,"ax",%progbits
 4150              		.align	2
 4151              		.global	accelAvailable
 4152              		.thumb
 4153              		.thumb_func
 4155              	accelAvailable:
 4156              	.LFB153:
 995:../LSM9DS1_Driver.c **** 
 996:../LSM9DS1_Driver.c **** uint8_t accelAvailable(void)
 997:../LSM9DS1_Driver.c **** {
 4157              		.loc 1 997 0
 4158              		.cfi_startproc
 4159              		@ args = 0, pretend = 0, frame = 8
 4160              		@ frame_needed = 1, uses_anonymous_args = 0
 4161 0000 80B5     		push	{r7, lr}
 4162              	.LCFI100:
 4163              		.cfi_def_cfa_offset 8
 4164              		.cfi_offset 7, -8
 4165              		.cfi_offset 14, -4
 4166 0002 82B0     		sub	sp, sp, #8
 4167              	.LCFI101:
 4168              		.cfi_def_cfa_offset 16
 4169 0004 00AF     		add	r7, sp, #0
 4170              	.LCFI102:
 4171              		.cfi_def_cfa_register 7
 998:../LSM9DS1_Driver.c **** 	uint8_t status = xgReadByte(STATUS_REG_1);
 4172              		.loc 1 998 0
 4173 0006 4FF02700 		mov	r0, #39
 4174 000a FFF7FEFF 		bl	xgReadByte
 4175 000e 0346     		mov	r3, r0
 4176 0010 FB71     		strb	r3, [r7, #7]
 999:../LSM9DS1_Driver.c **** 
1000:../LSM9DS1_Driver.c **** 	return (status & (1<<0));
 4177              		.loc 1 1000 0
 4178 0012 FB79     		ldrb	r3, [r7, #7]
 4179 0014 03F00103 		and	r3, r3, #1
 4180 0018 DBB2     		uxtb	r3, r3
1001:../LSM9DS1_Driver.c **** }
 4181              		.loc 1 1001 0
 4182 001a 1846     		mov	r0, r3
 4183 001c 07F10807 		add	r7, r7, #8
 4184 0020 BD46     		mov	sp, r7
 4185 0022 80BD     		pop	{r7, pc}
 4186              		.cfi_endproc
 4187              	.LFE153:
 4189              		.section	.text.gyroAvailable,"ax",%progbits
 4190              		.align	2
 4191              		.global	gyroAvailable
 4192              		.thumb
 4193              		.thumb_func
 4195              	gyroAvailable:
 4196              	.LFB154:
1002:../LSM9DS1_Driver.c **** 
1003:../LSM9DS1_Driver.c **** uint8_t gyroAvailable(void)
1004:../LSM9DS1_Driver.c **** {
 4197              		.loc 1 1004 0
 4198              		.cfi_startproc
 4199              		@ args = 0, pretend = 0, frame = 8
 4200              		@ frame_needed = 1, uses_anonymous_args = 0
 4201 0000 80B5     		push	{r7, lr}
 4202              	.LCFI103:
 4203              		.cfi_def_cfa_offset 8
 4204              		.cfi_offset 7, -8
 4205              		.cfi_offset 14, -4
 4206 0002 82B0     		sub	sp, sp, #8
 4207              	.LCFI104:
 4208              		.cfi_def_cfa_offset 16
 4209 0004 00AF     		add	r7, sp, #0
 4210              	.LCFI105:
 4211              		.cfi_def_cfa_register 7
1005:../LSM9DS1_Driver.c **** 	uint8_t status = xgReadByte(STATUS_REG_1);
 4212              		.loc 1 1005 0
 4213 0006 4FF02700 		mov	r0, #39
 4214 000a FFF7FEFF 		bl	xgReadByte
 4215 000e 0346     		mov	r3, r0
 4216 0010 FB71     		strb	r3, [r7, #7]
1006:../LSM9DS1_Driver.c **** 
1007:../LSM9DS1_Driver.c **** 	return ((status & (1<<1)) >> 1);
 4217              		.loc 1 1007 0
 4218 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4219 0014 03F00203 		and	r3, r3, #2
 4220 0018 4FEA6303 		asr	r3, r3, #1
 4221 001c DBB2     		uxtb	r3, r3
1008:../LSM9DS1_Driver.c **** }
 4222              		.loc 1 1008 0
 4223 001e 1846     		mov	r0, r3
 4224 0020 07F10807 		add	r7, r7, #8
 4225 0024 BD46     		mov	sp, r7
 4226 0026 80BD     		pop	{r7, pc}
 4227              		.cfi_endproc
 4228              	.LFE154:
 4230              		.section	.text.tempAvailable,"ax",%progbits
 4231              		.align	2
 4232              		.global	tempAvailable
 4233              		.thumb
 4234              		.thumb_func
 4236              	tempAvailable:
 4237              	.LFB155:
1009:../LSM9DS1_Driver.c **** 
1010:../LSM9DS1_Driver.c **** uint8_t tempAvailable(void)
1011:../LSM9DS1_Driver.c **** {
 4238              		.loc 1 1011 0
 4239              		.cfi_startproc
 4240              		@ args = 0, pretend = 0, frame = 8
 4241              		@ frame_needed = 1, uses_anonymous_args = 0
 4242 0000 80B5     		push	{r7, lr}
 4243              	.LCFI106:
 4244              		.cfi_def_cfa_offset 8
 4245              		.cfi_offset 7, -8
 4246              		.cfi_offset 14, -4
 4247 0002 82B0     		sub	sp, sp, #8
 4248              	.LCFI107:
 4249              		.cfi_def_cfa_offset 16
 4250 0004 00AF     		add	r7, sp, #0
 4251              	.LCFI108:
 4252              		.cfi_def_cfa_register 7
1012:../LSM9DS1_Driver.c **** 	uint8_t status = xgReadByte(STATUS_REG_1);
 4253              		.loc 1 1012 0
 4254 0006 4FF02700 		mov	r0, #39
 4255 000a FFF7FEFF 		bl	xgReadByte
 4256 000e 0346     		mov	r3, r0
 4257 0010 FB71     		strb	r3, [r7, #7]
1013:../LSM9DS1_Driver.c **** 
1014:../LSM9DS1_Driver.c **** 	return ((status & (1<<2)) >> 2);
 4258              		.loc 1 1014 0
 4259 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4260 0014 03F00403 		and	r3, r3, #4
 4261 0018 4FEAA303 		asr	r3, r3, #2
 4262 001c DBB2     		uxtb	r3, r3
1015:../LSM9DS1_Driver.c **** }
 4263              		.loc 1 1015 0
 4264 001e 1846     		mov	r0, r3
 4265 0020 07F10807 		add	r7, r7, #8
 4266 0024 BD46     		mov	sp, r7
 4267 0026 80BD     		pop	{r7, pc}
 4268              		.cfi_endproc
 4269              	.LFE155:
 4271              		.section	.text.readAccel,"ax",%progbits
 4272              		.align	2
 4273              		.global	readAccel
 4274              		.thumb
 4275              		.thumb_func
 4277              	readAccel:
 4278              	.LFB156:
1016:../LSM9DS1_Driver.c **** 
1017:../LSM9DS1_Driver.c **** int16_t readAccel(lsm9ds1_axis axis)
1018:../LSM9DS1_Driver.c **** {
 4279              		.loc 1 1018 0
 4280              		.cfi_startproc
 4281              		@ args = 0, pretend = 0, frame = 24
 4282              		@ frame_needed = 1, uses_anonymous_args = 0
 4283 0000 80B5     		push	{r7, lr}
 4284              	.LCFI109:
 4285              		.cfi_def_cfa_offset 8
 4286              		.cfi_offset 7, -8
 4287              		.cfi_offset 14, -4
 4288 0002 86B0     		sub	sp, sp, #24
 4289              	.LCFI110:
 4290              		.cfi_def_cfa_offset 32
 4291 0004 00AF     		add	r7, sp, #0
 4292              	.LCFI111:
 4293              		.cfi_def_cfa_register 7
 4294 0006 0346     		mov	r3, r0
 4295 0008 FB71     		strb	r3, [r7, #7]
1019:../LSM9DS1_Driver.c **** 	uint8_t temp[2];
1020:../LSM9DS1_Driver.c **** 	int16_t value;
1021:../LSM9DS1_Driver.c **** 	uint8_t subAddress = OUT_X_L_XL + (2 * axis);
 4296              		.loc 1 1021 0
 4297 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4298 000c 03F11403 		add	r3, r3, #20
 4299 0010 DBB2     		uxtb	r3, r3
 4300 0012 4FEA4303 		lsl	r3, r3, #1
 4301 0016 7B75     		strb	r3, [r7, #21]
1022:../LSM9DS1_Driver.c **** 	int i = 0;
 4302              		.loc 1 1022 0
 4303 0018 4FF00003 		mov	r3, #0
 4304 001c 3B61     		str	r3, [r7, #16]
1023:../LSM9DS1_Driver.c **** 	//xgReadBytes(OUT_X_L_XL + (2 * axis), temp, 2);
1024:../LSM9DS1_Driver.c **** 	while(i < 2)
 4305              		.loc 1 1024 0
 4306 001e 1DE0     		b	.L167
 4307              	.L168:
1025:../LSM9DS1_Driver.c **** 	{
1026:../LSM9DS1_Driver.c **** 		subAddress = subAddress + i;
 4308              		.loc 1 1026 0
 4309 0020 3B69     		ldr	r3, [r7, #16]
 4310 0022 DAB2     		uxtb	r2, r3
 4311 0024 7B7D     		ldrb	r3, [r7, #21]
 4312 0026 D318     		adds	r3, r2, r3
 4313 0028 7B75     		strb	r3, [r7, #21]
1027:../LSM9DS1_Driver.c **** 
1028:../LSM9DS1_Driver.c **** 		temp[i] = I2CreadBytes(_xgAddress, subAddress, NULL, 0);
 4314              		.loc 1 1028 0
 4315 002a 40F20003 		movw	r3, #:lower16:_xgAddress
 4316 002e C0F20003 		movt	r3, #:upper16:_xgAddress
 4317 0032 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4318 0034 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 4319 0036 1046     		mov	r0, r2
 4320 0038 1946     		mov	r1, r3
 4321 003a 4FF00002 		mov	r2, #0
 4322 003e 4FF00003 		mov	r3, #0
 4323 0042 FFF7FEFF 		bl	I2CreadBytes
 4324 0046 0346     		mov	r3, r0
 4325 0048 1A46     		mov	r2, r3
 4326 004a 07F10C01 		add	r1, r7, #12
 4327 004e 3B69     		ldr	r3, [r7, #16]
 4328 0050 CB18     		adds	r3, r1, r3
 4329 0052 1A70     		strb	r2, [r3, #0]
1029:../LSM9DS1_Driver.c **** 
1030:../LSM9DS1_Driver.c **** 		i++;
 4330              		.loc 1 1030 0
 4331 0054 3B69     		ldr	r3, [r7, #16]
 4332 0056 03F10103 		add	r3, r3, #1
 4333 005a 3B61     		str	r3, [r7, #16]
 4334              	.L167:
1024:../LSM9DS1_Driver.c **** 	while(i < 2)
 4335              		.loc 1 1024 0 discriminator 1
 4336 005c 3B69     		ldr	r3, [r7, #16]
 4337 005e 012B     		cmp	r3, #1
 4338 0060 DEDD     		ble	.L168
1031:../LSM9DS1_Driver.c **** 	}
1032:../LSM9DS1_Driver.c **** 
1033:../LSM9DS1_Driver.c **** 	value = (temp[1] << 8) | temp[0];
 4339              		.loc 1 1033 0
 4340 0062 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 4341 0064 4FEA0323 		lsl	r3, r3, #8
 4342 0068 9AB2     		uxth	r2, r3
 4343 006a 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 4344 006c 1343     		orrs	r3, r3, r2
 4345 006e FB82     		strh	r3, [r7, #22]	@ movhi
1034:../LSM9DS1_Driver.c **** 
1035:../LSM9DS1_Driver.c **** 	if (_autoCalc)
 4346              		.loc 1 1035 0
 4347 0070 40F20003 		movw	r3, #:lower16:_autoCalc
 4348 0074 C0F20003 		movt	r3, #:upper16:_autoCalc
 4349 0078 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4350 007a 002B     		cmp	r3, #0
 4351 007c 0BD0     		beq	.L169
1036:../LSM9DS1_Driver.c **** 		value -= aBiasRaw[axis];
 4352              		.loc 1 1036 0
 4353 007e FA8A     		ldrh	r2, [r7, #22]
 4354 0080 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4355 0082 40F20003 		movw	r3, #:lower16:aBiasRaw
 4356 0086 C0F20003 		movt	r3, #:upper16:aBiasRaw
 4357 008a 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 4358 008e 9BB2     		uxth	r3, r3
 4359 0090 D31A     		subs	r3, r2, r3
 4360 0092 9BB2     		uxth	r3, r3
 4361 0094 FB82     		strh	r3, [r7, #22]	@ movhi
 4362              	.L169:
1037:../LSM9DS1_Driver.c **** 
1038:../LSM9DS1_Driver.c **** 	return value;
 4363              		.loc 1 1038 0
 4364 0096 FB8A     		ldrh	r3, [r7, #22]
 4365 0098 1BB2     		sxth	r3, r3
1039:../LSM9DS1_Driver.c **** }
 4366              		.loc 1 1039 0
 4367 009a 1846     		mov	r0, r3
 4368 009c 07F11807 		add	r7, r7, #24
 4369 00a0 BD46     		mov	sp, r7
 4370 00a2 80BD     		pop	{r7, pc}
 4371              		.cfi_endproc
 4372              	.LFE156:
 4374              		.section	.text.readMag,"ax",%progbits
 4375              		.align	2
 4376              		.global	readMag
 4377              		.thumb
 4378              		.thumb_func
 4380              	readMag:
 4381              	.LFB157:
1040:../LSM9DS1_Driver.c **** 
1041:../LSM9DS1_Driver.c **** int16_t readMag(lsm9ds1_axis axis)
1042:../LSM9DS1_Driver.c **** {
 4382              		.loc 1 1042 0
 4383              		.cfi_startproc
 4384              		@ args = 0, pretend = 0, frame = 24
 4385              		@ frame_needed = 1, uses_anonymous_args = 0
 4386 0000 80B5     		push	{r7, lr}
 4387              	.LCFI112:
 4388              		.cfi_def_cfa_offset 8
 4389              		.cfi_offset 7, -8
 4390              		.cfi_offset 14, -4
 4391 0002 86B0     		sub	sp, sp, #24
 4392              	.LCFI113:
 4393              		.cfi_def_cfa_offset 32
 4394 0004 00AF     		add	r7, sp, #0
 4395              	.LCFI114:
 4396              		.cfi_def_cfa_register 7
 4397 0006 0346     		mov	r3, r0
 4398 0008 FB71     		strb	r3, [r7, #7]
1043:../LSM9DS1_Driver.c **** 	uint8_t temp[2];
1044:../LSM9DS1_Driver.c **** 
1045:../LSM9DS1_Driver.c **** 	int i = 0;
 4399              		.loc 1 1045 0
 4400 000a 4FF00003 		mov	r3, #0
 4401 000e 7B61     		str	r3, [r7, #20]
1046:../LSM9DS1_Driver.c **** 	uint8_t subAddress = OUT_X_L_M + (2 * axis);
 4402              		.loc 1 1046 0
 4403 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4404 0012 03F11403 		add	r3, r3, #20
 4405 0016 DBB2     		uxtb	r3, r3
 4406 0018 4FEA4303 		lsl	r3, r3, #1
 4407 001c FB74     		strb	r3, [r7, #19]
1047:../LSM9DS1_Driver.c **** 
1048:../LSM9DS1_Driver.c **** 	while(i < 2)
 4408              		.loc 1 1048 0
 4409 001e 1DE0     		b	.L172
 4410              	.L173:
1049:../LSM9DS1_Driver.c **** 	{
1050:../LSM9DS1_Driver.c **** 		subAddress = subAddress + i;
 4411              		.loc 1 1050 0
 4412 0020 7B69     		ldr	r3, [r7, #20]
 4413 0022 DAB2     		uxtb	r2, r3
 4414 0024 FB7C     		ldrb	r3, [r7, #19]
 4415 0026 D318     		adds	r3, r2, r3
 4416 0028 FB74     		strb	r3, [r7, #19]
1051:../LSM9DS1_Driver.c **** 
1052:../LSM9DS1_Driver.c **** 		temp[i] = I2CreadBytes(_mAddress, subAddress, NULL, 0);
 4417              		.loc 1 1052 0
 4418 002a 40F20003 		movw	r3, #:lower16:_mAddress
 4419 002e C0F20003 		movt	r3, #:upper16:_mAddress
 4420 0032 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4421 0034 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 4422 0036 1046     		mov	r0, r2
 4423 0038 1946     		mov	r1, r3
 4424 003a 4FF00002 		mov	r2, #0
 4425 003e 4FF00003 		mov	r3, #0
 4426 0042 FFF7FEFF 		bl	I2CreadBytes
 4427 0046 0346     		mov	r3, r0
 4428 0048 1A46     		mov	r2, r3
 4429 004a 07F10C01 		add	r1, r7, #12
 4430 004e 7B69     		ldr	r3, [r7, #20]
 4431 0050 CB18     		adds	r3, r1, r3
 4432 0052 1A70     		strb	r2, [r3, #0]
1053:../LSM9DS1_Driver.c **** 
1054:../LSM9DS1_Driver.c **** 		i++;
 4433              		.loc 1 1054 0
 4434 0054 7B69     		ldr	r3, [r7, #20]
 4435 0056 03F10103 		add	r3, r3, #1
 4436 005a 7B61     		str	r3, [r7, #20]
 4437              	.L172:
1048:../LSM9DS1_Driver.c **** 	while(i < 2)
 4438              		.loc 1 1048 0 discriminator 1
 4439 005c 7B69     		ldr	r3, [r7, #20]
 4440 005e 012B     		cmp	r3, #1
 4441 0060 DEDD     		ble	.L173
1055:../LSM9DS1_Driver.c **** 	}
1056:../LSM9DS1_Driver.c **** 
1057:../LSM9DS1_Driver.c **** 	int16_t value = (temp[1] << 8) | temp[0];
 4442              		.loc 1 1057 0
 4443 0062 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 4444 0064 4FEA0323 		lsl	r3, r3, #8
 4445 0068 9AB2     		uxth	r2, r3
 4446 006a 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 4447 006c 1343     		orrs	r3, r3, r2
 4448 006e 3B82     		strh	r3, [r7, #16]	@ movhi
1058:../LSM9DS1_Driver.c **** 	return value;
 4449              		.loc 1 1058 0
 4450 0070 3B8A     		ldrh	r3, [r7, #16]
 4451 0072 1BB2     		sxth	r3, r3
1059:../LSM9DS1_Driver.c **** }
 4452              		.loc 1 1059 0
 4453 0074 1846     		mov	r0, r3
 4454 0076 07F11807 		add	r7, r7, #24
 4455 007a BD46     		mov	sp, r7
 4456 007c 80BD     		pop	{r7, pc}
 4457              		.cfi_endproc
 4458              	.LFE157:
 4460 007e 00BF     		.section	.text.readTemp,"ax",%progbits
 4461              		.align	2
 4462              		.global	readTemp
 4463              		.thumb
 4464              		.thumb_func
 4466              	readTemp:
 4467              	.LFB158:
1060:../LSM9DS1_Driver.c **** 
1061:../LSM9DS1_Driver.c **** int16_t readTemp(void)
1062:../LSM9DS1_Driver.c **** {
 4468              		.loc 1 1062 0
 4469              		.cfi_startproc
 4470              		@ args = 0, pretend = 0, frame = 8
 4471              		@ frame_needed = 1, uses_anonymous_args = 0
 4472 0000 80B5     		push	{r7, lr}
 4473              	.LCFI115:
 4474              		.cfi_def_cfa_offset 8
 4475              		.cfi_offset 7, -8
 4476              		.cfi_offset 14, -4
 4477 0002 82B0     		sub	sp, sp, #8
 4478              	.LCFI116:
 4479              		.cfi_def_cfa_offset 16
 4480 0004 00AF     		add	r7, sp, #0
 4481              	.LCFI117:
 4482              		.cfi_def_cfa_register 7
1063:../LSM9DS1_Driver.c **** 	uint8_t temp[2]; // We'll read two bytes from the temperature sensor into temp
1064:../LSM9DS1_Driver.c **** 
1065:../LSM9DS1_Driver.c **** 	int i  = 0;
 4483              		.loc 1 1065 0
 4484 0006 4FF00003 		mov	r3, #0
 4485 000a 7B60     		str	r3, [r7, #4]
1066:../LSM9DS1_Driver.c **** 	uint8_t subAddress = OUT_TEMP_L;
 4486              		.loc 1 1066 0
 4487 000c 4FF01503 		mov	r3, #21
 4488 0010 FB70     		strb	r3, [r7, #3]
1067:../LSM9DS1_Driver.c **** 
1068:../LSM9DS1_Driver.c **** 	while(i < 2)
 4489              		.loc 1 1068 0
 4490 0012 1CE0     		b	.L176
 4491              	.L177:
1069:../LSM9DS1_Driver.c **** 	{
1070:../LSM9DS1_Driver.c **** 		subAddress = subAddress + i;
 4492              		.loc 1 1070 0
 4493 0014 7B68     		ldr	r3, [r7, #4]
 4494 0016 DAB2     		uxtb	r2, r3
 4495 0018 FB78     		ldrb	r3, [r7, #3]
 4496 001a D318     		adds	r3, r2, r3
 4497 001c FB70     		strb	r3, [r7, #3]
1071:../LSM9DS1_Driver.c **** 
1072:../LSM9DS1_Driver.c **** 		temp[i] = I2CreadBytes(_xgAddress, subAddress, NULL, 0);
 4498              		.loc 1 1072 0
 4499 001e 40F20003 		movw	r3, #:lower16:_xgAddress
 4500 0022 C0F20003 		movt	r3, #:upper16:_xgAddress
 4501 0026 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4502 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4503 002a 1046     		mov	r0, r2
 4504 002c 1946     		mov	r1, r3
 4505 002e 4FF00002 		mov	r2, #0
 4506 0032 4FF00003 		mov	r3, #0
 4507 0036 FFF7FEFF 		bl	I2CreadBytes
 4508 003a 0346     		mov	r3, r0
 4509 003c 1A46     		mov	r2, r3
 4510 003e 3946     		mov	r1, r7
 4511 0040 7B68     		ldr	r3, [r7, #4]
 4512 0042 CB18     		adds	r3, r1, r3
 4513 0044 1A70     		strb	r2, [r3, #0]
1073:../LSM9DS1_Driver.c **** 
1074:../LSM9DS1_Driver.c **** 		i++;
 4514              		.loc 1 1074 0
 4515 0046 7B68     		ldr	r3, [r7, #4]
 4516 0048 03F10103 		add	r3, r3, #1
 4517 004c 7B60     		str	r3, [r7, #4]
 4518              	.L176:
1068:../LSM9DS1_Driver.c **** 	while(i < 2)
 4519              		.loc 1 1068 0 discriminator 1
 4520 004e 7B68     		ldr	r3, [r7, #4]
 4521 0050 012B     		cmp	r3, #1
 4522 0052 DFDD     		ble	.L177
1075:../LSM9DS1_Driver.c **** 	}
1076:../LSM9DS1_Driver.c **** 
1077:../LSM9DS1_Driver.c **** 	//xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
1078:../LSM9DS1_Driver.c **** 	temperature = (temp[1] << 8) | temp[0];
 4523              		.loc 1 1078 0
 4524 0054 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 4525 0056 4FEA0323 		lsl	r3, r3, #8
 4526 005a 9AB2     		uxth	r2, r3
 4527 005c 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 4528 005e 1343     		orrs	r3, r3, r2
 4529 0060 9AB2     		uxth	r2, r3
 4530 0062 40F20003 		movw	r3, #:lower16:temperature
 4531 0066 C0F20003 		movt	r3, #:upper16:temperature
 4532 006a 1A80     		strh	r2, [r3, #0]	@ movhi
1079:../LSM9DS1_Driver.c **** 
1080:../LSM9DS1_Driver.c **** 	return temperature;
 4533              		.loc 1 1080 0
 4534 006c 40F20003 		movw	r3, #:lower16:temperature
 4535 0070 C0F20003 		movt	r3, #:upper16:temperature
 4536 0074 1B88     		ldrh	r3, [r3, #0]
 4537 0076 1BB2     		sxth	r3, r3
1081:../LSM9DS1_Driver.c **** }
 4538              		.loc 1 1081 0
 4539 0078 1846     		mov	r0, r3
 4540 007a 07F10807 		add	r7, r7, #8
 4541 007e BD46     		mov	sp, r7
 4542 0080 80BD     		pop	{r7, pc}
 4543              		.cfi_endproc
 4544              	.LFE158:
 4546 0082 00BF     		.section	.text.readGyro,"ax",%progbits
 4547              		.align	2
 4548              		.global	readGyro
 4549              		.thumb
 4550              		.thumb_func
 4552              	readGyro:
 4553              	.LFB159:
1082:../LSM9DS1_Driver.c **** 
1083:../LSM9DS1_Driver.c **** int16_t readGyro(lsm9ds1_axis axis)
1084:../LSM9DS1_Driver.c **** {
 4554              		.loc 1 1084 0
 4555              		.cfi_startproc
 4556              		@ args = 0, pretend = 0, frame = 24
 4557              		@ frame_needed = 1, uses_anonymous_args = 0
 4558 0000 80B5     		push	{r7, lr}
 4559              	.LCFI118:
 4560              		.cfi_def_cfa_offset 8
 4561              		.cfi_offset 7, -8
 4562              		.cfi_offset 14, -4
 4563 0002 86B0     		sub	sp, sp, #24
 4564              	.LCFI119:
 4565              		.cfi_def_cfa_offset 32
 4566 0004 00AF     		add	r7, sp, #0
 4567              	.LCFI120:
 4568              		.cfi_def_cfa_register 7
 4569 0006 0346     		mov	r3, r0
 4570 0008 FB71     		strb	r3, [r7, #7]
1085:../LSM9DS1_Driver.c **** 	uint8_t temp[2];
1086:../LSM9DS1_Driver.c **** 	int16_t value;
1087:../LSM9DS1_Driver.c **** 
1088:../LSM9DS1_Driver.c **** 	int i  = 0;
 4571              		.loc 1 1088 0
 4572 000a 4FF00003 		mov	r3, #0
 4573 000e 3B61     		str	r3, [r7, #16]
1089:../LSM9DS1_Driver.c **** 	uint8_t subAddress = OUT_X_L_G + (2 * axis);
 4574              		.loc 1 1089 0
 4575 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4576 0012 03F10C03 		add	r3, r3, #12
 4577 0016 DBB2     		uxtb	r3, r3
 4578 0018 4FEA4303 		lsl	r3, r3, #1
 4579 001c FB73     		strb	r3, [r7, #15]
1090:../LSM9DS1_Driver.c **** 
1091:../LSM9DS1_Driver.c **** 	while(i < 2)
 4580              		.loc 1 1091 0
 4581 001e 1DE0     		b	.L180
 4582              	.L181:
1092:../LSM9DS1_Driver.c **** 	{
1093:../LSM9DS1_Driver.c **** 		subAddress = subAddress + i;
 4583              		.loc 1 1093 0
 4584 0020 3B69     		ldr	r3, [r7, #16]
 4585 0022 DAB2     		uxtb	r2, r3
 4586 0024 FB7B     		ldrb	r3, [r7, #15]
 4587 0026 D318     		adds	r3, r2, r3
 4588 0028 FB73     		strb	r3, [r7, #15]
1094:../LSM9DS1_Driver.c **** 
1095:../LSM9DS1_Driver.c **** 		temp[i] = I2CreadBytes(_xgAddress, subAddress, NULL, 0);
 4589              		.loc 1 1095 0
 4590 002a 40F20003 		movw	r3, #:lower16:_xgAddress
 4591 002e C0F20003 		movt	r3, #:upper16:_xgAddress
 4592 0032 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4593 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4594 0036 1046     		mov	r0, r2
 4595 0038 1946     		mov	r1, r3
 4596 003a 4FF00002 		mov	r2, #0
 4597 003e 4FF00003 		mov	r3, #0
 4598 0042 FFF7FEFF 		bl	I2CreadBytes
 4599 0046 0346     		mov	r3, r0
 4600 0048 1A46     		mov	r2, r3
 4601 004a 07F10C01 		add	r1, r7, #12
 4602 004e 3B69     		ldr	r3, [r7, #16]
 4603 0050 CB18     		adds	r3, r1, r3
 4604 0052 1A70     		strb	r2, [r3, #0]
1096:../LSM9DS1_Driver.c **** 		i++;
 4605              		.loc 1 1096 0
 4606 0054 3B69     		ldr	r3, [r7, #16]
 4607 0056 03F10103 		add	r3, r3, #1
 4608 005a 3B61     		str	r3, [r7, #16]
 4609              	.L180:
1091:../LSM9DS1_Driver.c **** 	while(i < 2)
 4610              		.loc 1 1091 0 discriminator 1
 4611 005c 3B69     		ldr	r3, [r7, #16]
 4612 005e 012B     		cmp	r3, #1
 4613 0060 DEDD     		ble	.L181
1097:../LSM9DS1_Driver.c **** 	}
1098:../LSM9DS1_Driver.c **** 
1099:../LSM9DS1_Driver.c **** 	value = (temp[1] << 8) | temp[0];
 4614              		.loc 1 1099 0
 4615 0062 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 4616 0064 4FEA0323 		lsl	r3, r3, #8
 4617 0068 9AB2     		uxth	r2, r3
 4618 006a 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 4619 006c 1343     		orrs	r3, r3, r2
 4620 006e FB82     		strh	r3, [r7, #22]	@ movhi
1100:../LSM9DS1_Driver.c **** 
1101:../LSM9DS1_Driver.c **** 	if (_autoCalc)
 4621              		.loc 1 1101 0
 4622 0070 40F20003 		movw	r3, #:lower16:_autoCalc
 4623 0074 C0F20003 		movt	r3, #:upper16:_autoCalc
 4624 0078 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4625 007a 002B     		cmp	r3, #0
 4626 007c 0BD0     		beq	.L182
1102:../LSM9DS1_Driver.c **** 		value -= gBiasRaw[axis];
 4627              		.loc 1 1102 0
 4628 007e FA8A     		ldrh	r2, [r7, #22]
 4629 0080 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 4630 0082 40F20003 		movw	r3, #:lower16:gBiasRaw
 4631 0086 C0F20003 		movt	r3, #:upper16:gBiasRaw
 4632 008a 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 4633 008e 9BB2     		uxth	r3, r3
 4634 0090 D31A     		subs	r3, r2, r3
 4635 0092 9BB2     		uxth	r3, r3
 4636 0094 FB82     		strh	r3, [r7, #22]	@ movhi
 4637              	.L182:
1103:../LSM9DS1_Driver.c **** 
1104:../LSM9DS1_Driver.c **** 	return value;
 4638              		.loc 1 1104 0
 4639 0096 FB8A     		ldrh	r3, [r7, #22]
 4640 0098 1BB2     		sxth	r3, r3
1105:../LSM9DS1_Driver.c **** }
 4641              		.loc 1 1105 0
 4642 009a 1846     		mov	r0, r3
 4643 009c 07F11807 		add	r7, r7, #24
 4644 00a0 BD46     		mov	sp, r7
 4645 00a2 80BD     		pop	{r7, pc}
 4646              		.cfi_endproc
 4647              	.LFE159:
 4649              		.section	.text.calcGyro,"ax",%progbits
 4650              		.align	2
 4651              		.global	calcGyro
 4652              		.thumb
 4653              		.thumb_func
 4655              	calcGyro:
 4656              	.LFB160:
1106:../LSM9DS1_Driver.c **** 
1107:../LSM9DS1_Driver.c **** float calcGyro(int16_t gyro)
1108:../LSM9DS1_Driver.c **** {
 4657              		.loc 1 1108 0
 4658              		.cfi_startproc
 4659              		@ args = 0, pretend = 0, frame = 8
 4660              		@ frame_needed = 1, uses_anonymous_args = 0
 4661 0000 80B5     		push	{r7, lr}
 4662              	.LCFI121:
 4663              		.cfi_def_cfa_offset 8
 4664              		.cfi_offset 7, -8
 4665              		.cfi_offset 14, -4
 4666 0002 82B0     		sub	sp, sp, #8
 4667              	.LCFI122:
 4668              		.cfi_def_cfa_offset 16
 4669 0004 00AF     		add	r7, sp, #0
 4670              	.LCFI123:
 4671              		.cfi_def_cfa_register 7
 4672 0006 0346     		mov	r3, r0
 4673 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1109:../LSM9DS1_Driver.c **** 	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
1110:../LSM9DS1_Driver.c **** 	return round(gRes * gyro);
 4674              		.loc 1 1110 0
 4675 000a B7F90630 		ldrsh	r3, [r7, #6]
 4676 000e 07EE903A 		fmsr	s15, r3	@ int
 4677 0012 B8EEE77A 		fsitos	s14, s15
 4678 0016 40F20003 		movw	r3, #:lower16:gRes
 4679 001a C0F20003 		movt	r3, #:upper16:gRes
 4680 001e D3ED007A 		flds	s15, [r3, #0]
 4681 0022 67EE277A 		fmuls	s15, s14, s15
 4682 0026 17EE900A 		fmrs	r0, s15
 4683 002a FFF7FEFF 		bl	__aeabi_f2d
 4684 002e 0246     		mov	r2, r0
 4685 0030 0B46     		mov	r3, r1
 4686 0032 1046     		mov	r0, r2
 4687 0034 1946     		mov	r1, r3
 4688 0036 FFF7FEFF 		bl	round
 4689 003a 0246     		mov	r2, r0
 4690 003c 0B46     		mov	r3, r1
 4691 003e 1046     		mov	r0, r2
 4692 0040 1946     		mov	r1, r3
 4693 0042 FFF7FEFF 		bl	__aeabi_d2f
 4694 0046 0346     		mov	r3, r0	@ float
1111:../LSM9DS1_Driver.c **** 	//return gyro;
1112:../LSM9DS1_Driver.c **** }
 4695              		.loc 1 1112 0
 4696 0048 1846     		mov	r0, r3	@ float
 4697 004a 07F10807 		add	r7, r7, #8
 4698 004e BD46     		mov	sp, r7
 4699 0050 80BD     		pop	{r7, pc}
 4700              		.cfi_endproc
 4701              	.LFE160:
 4703 0052 00BF     		.section	.text.calcAccel,"ax",%progbits
 4704              		.align	2
 4705              		.global	calcAccel
 4706              		.thumb
 4707              		.thumb_func
 4709              	calcAccel:
 4710              	.LFB161:
1113:../LSM9DS1_Driver.c **** 
1114:../LSM9DS1_Driver.c **** float calcAccel(int16_t accel)
1115:../LSM9DS1_Driver.c **** {
 4711              		.loc 1 1115 0
 4712              		.cfi_startproc
 4713              		@ args = 0, pretend = 0, frame = 8
 4714              		@ frame_needed = 1, uses_anonymous_args = 0
 4715 0000 80B5     		push	{r7, lr}
 4716              	.LCFI124:
 4717              		.cfi_def_cfa_offset 8
 4718              		.cfi_offset 7, -8
 4719              		.cfi_offset 14, -4
 4720 0002 82B0     		sub	sp, sp, #8
 4721              	.LCFI125:
 4722              		.cfi_def_cfa_offset 16
 4723 0004 00AF     		add	r7, sp, #0
 4724              	.LCFI126:
 4725              		.cfi_def_cfa_register 7
 4726 0006 0346     		mov	r3, r0
 4727 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1116:../LSM9DS1_Driver.c **** 	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
1117:../LSM9DS1_Driver.c **** 	return round(aRes * accel);
 4728              		.loc 1 1117 0
 4729 000a B7F90630 		ldrsh	r3, [r7, #6]
 4730 000e 07EE903A 		fmsr	s15, r3	@ int
 4731 0012 B8EEE77A 		fsitos	s14, s15
 4732 0016 40F20003 		movw	r3, #:lower16:aRes
 4733 001a C0F20003 		movt	r3, #:upper16:aRes
 4734 001e D3ED007A 		flds	s15, [r3, #0]
 4735 0022 67EE277A 		fmuls	s15, s14, s15
 4736 0026 17EE900A 		fmrs	r0, s15
 4737 002a FFF7FEFF 		bl	__aeabi_f2d
 4738 002e 0246     		mov	r2, r0
 4739 0030 0B46     		mov	r3, r1
 4740 0032 1046     		mov	r0, r2
 4741 0034 1946     		mov	r1, r3
 4742 0036 FFF7FEFF 		bl	round
 4743 003a 0246     		mov	r2, r0
 4744 003c 0B46     		mov	r3, r1
 4745 003e 1046     		mov	r0, r2
 4746 0040 1946     		mov	r1, r3
 4747 0042 FFF7FEFF 		bl	__aeabi_d2f
 4748 0046 0346     		mov	r3, r0	@ float
1118:../LSM9DS1_Driver.c **** 	//return accel;
1119:../LSM9DS1_Driver.c **** }
 4749              		.loc 1 1119 0
 4750 0048 1846     		mov	r0, r3	@ float
 4751 004a 07F10807 		add	r7, r7, #8
 4752 004e BD46     		mov	sp, r7
 4753 0050 80BD     		pop	{r7, pc}
 4754              		.cfi_endproc
 4755              	.LFE161:
 4757 0052 00BF     		.section	.text.setGyroScale,"ax",%progbits
 4758              		.align	2
 4759              		.global	setGyroScale
 4760              		.thumb
 4761              		.thumb_func
 4763              	setGyroScale:
 4764              	.LFB162:
1120:../LSM9DS1_Driver.c **** 
1121:../LSM9DS1_Driver.c **** 
1122:../LSM9DS1_Driver.c **** void setGyroScale(uint16_t gScl)
1123:../LSM9DS1_Driver.c **** {
 4765              		.loc 1 1123 0
 4766              		.cfi_startproc
 4767              		@ args = 0, pretend = 0, frame = 16
 4768              		@ frame_needed = 1, uses_anonymous_args = 0
 4769 0000 80B5     		push	{r7, lr}
 4770              	.LCFI127:
 4771              		.cfi_def_cfa_offset 8
 4772              		.cfi_offset 7, -8
 4773              		.cfi_offset 14, -4
 4774 0002 84B0     		sub	sp, sp, #16
 4775              	.LCFI128:
 4776              		.cfi_def_cfa_offset 24
 4777 0004 00AF     		add	r7, sp, #0
 4778              	.LCFI129:
 4779              		.cfi_def_cfa_register 7
 4780 0006 0346     		mov	r3, r0
 4781 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1124:../LSM9DS1_Driver.c **** 	// Read current value of CTRL_REG1_G:
1125:../LSM9DS1_Driver.c **** 	uint8_t ctrl1RegValue = xgReadByte(CTRL_REG1_G);
 4782              		.loc 1 1125 0
 4783 000a 4FF01000 		mov	r0, #16
 4784 000e FFF7FEFF 		bl	xgReadByte
 4785 0012 0346     		mov	r3, r0
 4786 0014 FB73     		strb	r3, [r7, #15]
1126:../LSM9DS1_Driver.c **** 	// Mask out scale bits (3 & 4):
1127:../LSM9DS1_Driver.c **** 	ctrl1RegValue &= 0xE7;
 4787              		.loc 1 1127 0
 4788 0016 FB7B     		ldrb	r3, [r7, #15]
 4789 0018 23F01803 		bic	r3, r3, #24
 4790 001c FB73     		strb	r3, [r7, #15]
1128:../LSM9DS1_Driver.c **** 	switch (gScl)
 4791              		.loc 1 1128 0
 4792 001e FB88     		ldrh	r3, [r7, #6]
 4793 0020 B3F5FA7F 		cmp	r3, #500
 4794 0024 03D0     		beq	.L190
 4795 0026 B3F5FA6F 		cmp	r3, #2000
 4796 002a 0CD0     		beq	.L191
 4797 002c 17E0     		b	.L193
 4798              	.L190:
1129:../LSM9DS1_Driver.c **** 	{
1130:../LSM9DS1_Driver.c **** 		case 500:
1131:../LSM9DS1_Driver.c **** 			ctrl1RegValue |= (0x1 << 3);
 4799              		.loc 1 1131 0
 4800 002e FB7B     		ldrb	r3, [r7, #15]
 4801 0030 43F00803 		orr	r3, r3, #8
 4802 0034 FB73     		strb	r3, [r7, #15]
1132:../LSM9DS1_Driver.c **** 			settings.gyro.scale = 500;
 4803              		.loc 1 1132 0
 4804 0036 40F20003 		movw	r3, #:lower16:settings
 4805 003a C0F20003 		movt	r3, #:upper16:settings
 4806 003e 4FF4FA72 		mov	r2, #500
 4807 0042 DA80     		strh	r2, [r3, #6]	@ movhi
1133:../LSM9DS1_Driver.c **** 			break;
 4808              		.loc 1 1133 0
 4809 0044 13E0     		b	.L192
 4810              	.L191:
1134:../LSM9DS1_Driver.c **** 		case 2000:
1135:../LSM9DS1_Driver.c **** 			ctrl1RegValue |= (0x3 << 3);
 4811              		.loc 1 1135 0
 4812 0046 FB7B     		ldrb	r3, [r7, #15]
 4813 0048 43F01803 		orr	r3, r3, #24
 4814 004c FB73     		strb	r3, [r7, #15]
1136:../LSM9DS1_Driver.c **** 			settings.gyro.scale = 2000;
 4815              		.loc 1 1136 0
 4816 004e 40F20003 		movw	r3, #:lower16:settings
 4817 0052 C0F20003 		movt	r3, #:upper16:settings
 4818 0056 4FF4FA62 		mov	r2, #2000
 4819 005a DA80     		strh	r2, [r3, #6]	@ movhi
1137:../LSM9DS1_Driver.c **** 			break;
 4820              		.loc 1 1137 0
 4821 005c 07E0     		b	.L192
 4822              	.L193:
1138:../LSM9DS1_Driver.c **** 		default: // Otherwise we'll set it to 245 dps (0x0 << 4)
1139:../LSM9DS1_Driver.c **** 			settings.gyro.scale = 245;
 4823              		.loc 1 1139 0
 4824 005e 40F20003 		movw	r3, #:lower16:settings
 4825 0062 C0F20003 		movt	r3, #:upper16:settings
 4826 0066 4FF0F502 		mov	r2, #245
 4827 006a DA80     		strh	r2, [r3, #6]	@ movhi
1140:../LSM9DS1_Driver.c **** 			break;
 4828              		.loc 1 1140 0
 4829 006c 00BF     		nop
 4830              	.L192:
1141:../LSM9DS1_Driver.c **** 	}
1142:../LSM9DS1_Driver.c **** 	xgWriteByte(CTRL_REG1_G, ctrl1RegValue);
 4831              		.loc 1 1142 0
 4832 006e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4833 0070 4FF01000 		mov	r0, #16
 4834 0074 1946     		mov	r1, r3
 4835 0076 FFF7FEFF 		bl	xgWriteByte
1143:../LSM9DS1_Driver.c **** 
1144:../LSM9DS1_Driver.c **** 	calcgRes();
 4836              		.loc 1 1144 0
 4837 007a FFF7FEFF 		bl	calcgRes
1145:../LSM9DS1_Driver.c **** }
 4838              		.loc 1 1145 0
 4839 007e 07F11007 		add	r7, r7, #16
 4840 0082 BD46     		mov	sp, r7
 4841 0084 80BD     		pop	{r7, pc}
 4842              		.cfi_endproc
 4843              	.LFE162:
 4845 0086 00BF     		.section	.text.setAccelScale,"ax",%progbits
 4846              		.align	2
 4847              		.global	setAccelScale
 4848              		.thumb
 4849              		.thumb_func
 4851              	setAccelScale:
 4852              	.LFB163:
1146:../LSM9DS1_Driver.c **** 
1147:../LSM9DS1_Driver.c **** void setAccelScale(uint8_t aScl)
1148:../LSM9DS1_Driver.c **** {
 4853              		.loc 1 1148 0
 4854              		.cfi_startproc
 4855              		@ args = 0, pretend = 0, frame = 16
 4856              		@ frame_needed = 1, uses_anonymous_args = 0
 4857 0000 80B5     		push	{r7, lr}
 4858              	.LCFI130:
 4859              		.cfi_def_cfa_offset 8
 4860              		.cfi_offset 7, -8
 4861              		.cfi_offset 14, -4
 4862 0002 84B0     		sub	sp, sp, #16
 4863              	.LCFI131:
 4864              		.cfi_def_cfa_offset 24
 4865 0004 00AF     		add	r7, sp, #0
 4866              	.LCFI132:
 4867              		.cfi_def_cfa_register 7
 4868 0006 0346     		mov	r3, r0
 4869 0008 FB71     		strb	r3, [r7, #7]
1149:../LSM9DS1_Driver.c **** 	// We need to preserve the other bytes in CTRL_REG6_XL. So, first read it:
1150:../LSM9DS1_Driver.c **** 	uint8_t tempRegValue = xgReadByte(CTRL_REG6_XL);
 4870              		.loc 1 1150 0
 4871 000a 4FF02000 		mov	r0, #32
 4872 000e FFF7FEFF 		bl	xgReadByte
 4873 0012 0346     		mov	r3, r0
 4874 0014 FB73     		strb	r3, [r7, #15]
1151:../LSM9DS1_Driver.c **** 	// Mask out accel scale bits:
1152:../LSM9DS1_Driver.c **** 	tempRegValue &= 0xE7;
 4875              		.loc 1 1152 0
 4876 0016 FB7B     		ldrb	r3, [r7, #15]
 4877 0018 23F01803 		bic	r3, r3, #24
 4878 001c FB73     		strb	r3, [r7, #15]
1153:../LSM9DS1_Driver.c **** 
1154:../LSM9DS1_Driver.c **** 	switch (aScl)
 4879              		.loc 1 1154 0
 4880 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4881 0020 082B     		cmp	r3, #8
 4882 0022 0FD0     		beq	.L197
 4883 0024 102B     		cmp	r3, #16
 4884 0026 19D0     		beq	.L198
 4885 0028 042B     		cmp	r3, #4
 4886 002a 23D1     		bne	.L200
 4887              	.L196:
1155:../LSM9DS1_Driver.c **** 	{
1156:../LSM9DS1_Driver.c **** 		case 4:
1157:../LSM9DS1_Driver.c **** 			tempRegValue |= (0x2 << 3);
 4888              		.loc 1 1157 0
 4889 002c FB7B     		ldrb	r3, [r7, #15]
 4890 002e 43F01003 		orr	r3, r3, #16
 4891 0032 FB73     		strb	r3, [r7, #15]
1158:../LSM9DS1_Driver.c **** 			settings.accel.scale = 4;
 4892              		.loc 1 1158 0
 4893 0034 40F20003 		movw	r3, #:lower16:settings
 4894 0038 C0F20003 		movt	r3, #:upper16:settings
 4895 003c 4FF00402 		mov	r2, #4
 4896 0040 DA75     		strb	r2, [r3, #23]
1159:../LSM9DS1_Driver.c **** 			break;
 4897              		.loc 1 1159 0
 4898 0042 1FE0     		b	.L199
 4899              	.L197:
1160:../LSM9DS1_Driver.c **** 		case 8:
1161:../LSM9DS1_Driver.c **** 			tempRegValue |= (0x3 << 3);
 4900              		.loc 1 1161 0
 4901 0044 FB7B     		ldrb	r3, [r7, #15]
 4902 0046 43F01803 		orr	r3, r3, #24
 4903 004a FB73     		strb	r3, [r7, #15]
1162:../LSM9DS1_Driver.c **** 			settings.accel.scale = 8;
 4904              		.loc 1 1162 0
 4905 004c 40F20003 		movw	r3, #:lower16:settings
 4906 0050 C0F20003 		movt	r3, #:upper16:settings
 4907 0054 4FF00802 		mov	r2, #8
 4908 0058 DA75     		strb	r2, [r3, #23]
1163:../LSM9DS1_Driver.c **** 			break;
 4909              		.loc 1 1163 0
 4910 005a 13E0     		b	.L199
 4911              	.L198:
1164:../LSM9DS1_Driver.c **** 		case 16:
1165:../LSM9DS1_Driver.c **** 			tempRegValue |= (0x1 << 3);
 4912              		.loc 1 1165 0
 4913 005c FB7B     		ldrb	r3, [r7, #15]
 4914 005e 43F00803 		orr	r3, r3, #8
 4915 0062 FB73     		strb	r3, [r7, #15]
1166:../LSM9DS1_Driver.c **** 			settings.accel.scale = 16;
 4916              		.loc 1 1166 0
 4917 0064 40F20003 		movw	r3, #:lower16:settings
 4918 0068 C0F20003 		movt	r3, #:upper16:settings
 4919 006c 4FF01002 		mov	r2, #16
 4920 0070 DA75     		strb	r2, [r3, #23]
1167:../LSM9DS1_Driver.c **** 			break;
 4921              		.loc 1 1167 0
 4922 0072 07E0     		b	.L199
 4923              	.L200:
1168:../LSM9DS1_Driver.c **** 		default: // Otherwise it'll be set to 2g (0x0 << 3)
1169:../LSM9DS1_Driver.c **** 			settings.accel.scale = 2;
 4924              		.loc 1 1169 0
 4925 0074 40F20003 		movw	r3, #:lower16:settings
 4926 0078 C0F20003 		movt	r3, #:upper16:settings
 4927 007c 4FF00202 		mov	r2, #2
 4928 0080 DA75     		strb	r2, [r3, #23]
1170:../LSM9DS1_Driver.c **** 			break;
 4929              		.loc 1 1170 0
 4930 0082 00BF     		nop
 4931              	.L199:
1171:../LSM9DS1_Driver.c **** 	}
1172:../LSM9DS1_Driver.c **** 	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 4932              		.loc 1 1172 0
 4933 0084 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4934 0086 4FF02000 		mov	r0, #32
 4935 008a 1946     		mov	r1, r3
 4936 008c FFF7FEFF 		bl	xgWriteByte
1173:../LSM9DS1_Driver.c **** 
1174:../LSM9DS1_Driver.c **** 	// Then calculate a new aRes, which relies on aScale being set correctly:
1175:../LSM9DS1_Driver.c **** 	calcaRes();
 4937              		.loc 1 1175 0
 4938 0090 FFF7FEFF 		bl	calcaRes
1176:../LSM9DS1_Driver.c **** }
 4939              		.loc 1 1176 0
 4940 0094 07F11007 		add	r7, r7, #16
 4941 0098 BD46     		mov	sp, r7
 4942 009a 80BD     		pop	{r7, pc}
 4943              		.cfi_endproc
 4944              	.LFE163:
 4946              		.section	.text.setMagScale,"ax",%progbits
 4947              		.align	2
 4948              		.global	setMagScale
 4949              		.thumb
 4950              		.thumb_func
 4952              	setMagScale:
 4953              	.LFB164:
1177:../LSM9DS1_Driver.c **** 
1178:../LSM9DS1_Driver.c **** void setMagScale(uint8_t mScl)
1179:../LSM9DS1_Driver.c **** {
 4954              		.loc 1 1179 0
 4955              		.cfi_startproc
 4956              		@ args = 0, pretend = 0, frame = 16
 4957              		@ frame_needed = 1, uses_anonymous_args = 0
 4958 0000 80B5     		push	{r7, lr}
 4959              	.LCFI133:
 4960              		.cfi_def_cfa_offset 8
 4961              		.cfi_offset 7, -8
 4962              		.cfi_offset 14, -4
 4963 0002 84B0     		sub	sp, sp, #16
 4964              	.LCFI134:
 4965              		.cfi_def_cfa_offset 24
 4966 0004 00AF     		add	r7, sp, #0
 4967              	.LCFI135:
 4968              		.cfi_def_cfa_register 7
 4969 0006 0346     		mov	r3, r0
 4970 0008 FB71     		strb	r3, [r7, #7]
1180:../LSM9DS1_Driver.c **** 	// We need to preserve the other bytes in CTRL_REG6_XM. So, first read it:
1181:../LSM9DS1_Driver.c **** 	uint8_t temp = mReadByte(CTRL_REG2_M);
 4971              		.loc 1 1181 0
 4972 000a 4FF02100 		mov	r0, #33
 4973 000e FFF7FEFF 		bl	mReadByte
 4974 0012 0346     		mov	r3, r0
 4975 0014 FB73     		strb	r3, [r7, #15]
1182:../LSM9DS1_Driver.c **** 	// Then mask out the mag scale bits:
1183:../LSM9DS1_Driver.c **** 	temp &= 0xFF^(0x3 << 5);
 4976              		.loc 1 1183 0
 4977 0016 FB7B     		ldrb	r3, [r7, #15]
 4978 0018 23F06003 		bic	r3, r3, #96
 4979 001c FB73     		strb	r3, [r7, #15]
1184:../LSM9DS1_Driver.c **** 
1185:../LSM9DS1_Driver.c **** 	switch (mScl)
 4980              		.loc 1 1185 0
 4981 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4982 0020 0C2B     		cmp	r3, #12
 4983 0022 10D0     		beq	.L204
 4984 0024 102B     		cmp	r3, #16
 4985 0026 1BD0     		beq	.L205
 4986 0028 082B     		cmp	r3, #8
 4987 002a 26D1     		bne	.L207
 4988              	.L203:
1186:../LSM9DS1_Driver.c **** 	{
1187:../LSM9DS1_Driver.c **** 		case 8:
1188:../LSM9DS1_Driver.c **** 			temp |= (0x1 << 5);
 4989              		.loc 1 1188 0
 4990 002c FB7B     		ldrb	r3, [r7, #15]
 4991 002e 43F02003 		orr	r3, r3, #32
 4992 0032 FB73     		strb	r3, [r7, #15]
1189:../LSM9DS1_Driver.c **** 			settings.mag.scale = 8;
 4993              		.loc 1 1189 0
 4994 0034 40F20003 		movw	r3, #:lower16:settings
 4995 0038 C0F20003 		movt	r3, #:upper16:settings
 4996 003c 4FF00802 		mov	r2, #8
 4997 0040 83F82020 		strb	r2, [r3, #32]
1190:../LSM9DS1_Driver.c **** 			break;
 4998              		.loc 1 1190 0
 4999 0044 22E0     		b	.L206
 5000              	.L204:
1191:../LSM9DS1_Driver.c **** 		case 12:
1192:../LSM9DS1_Driver.c **** 			temp |= (0x2 << 5);
 5001              		.loc 1 1192 0
 5002 0046 FB7B     		ldrb	r3, [r7, #15]
 5003 0048 43F04003 		orr	r3, r3, #64
 5004 004c FB73     		strb	r3, [r7, #15]
1193:../LSM9DS1_Driver.c **** 			settings.mag.scale = 12;
 5005              		.loc 1 1193 0
 5006 004e 40F20003 		movw	r3, #:lower16:settings
 5007 0052 C0F20003 		movt	r3, #:upper16:settings
 5008 0056 4FF00C02 		mov	r2, #12
 5009 005a 83F82020 		strb	r2, [r3, #32]
1194:../LSM9DS1_Driver.c **** 			break;
 5010              		.loc 1 1194 0
 5011 005e 15E0     		b	.L206
 5012              	.L205:
1195:../LSM9DS1_Driver.c **** 		case 16:
1196:../LSM9DS1_Driver.c **** 			temp |= (0x3 << 5);
 5013              		.loc 1 1196 0
 5014 0060 FB7B     		ldrb	r3, [r7, #15]
 5015 0062 43F06003 		orr	r3, r3, #96
 5016 0066 FB73     		strb	r3, [r7, #15]
1197:../LSM9DS1_Driver.c **** 			settings.mag.scale = 16;
 5017              		.loc 1 1197 0
 5018 0068 40F20003 		movw	r3, #:lower16:settings
 5019 006c C0F20003 		movt	r3, #:upper16:settings
 5020 0070 4FF01002 		mov	r2, #16
 5021 0074 83F82020 		strb	r2, [r3, #32]
1198:../LSM9DS1_Driver.c **** 			break;
 5022              		.loc 1 1198 0
 5023 0078 08E0     		b	.L206
 5024              	.L207:
1199:../LSM9DS1_Driver.c **** 		default: // Otherwise we'll default to 4 gauss (00)
1200:../LSM9DS1_Driver.c **** 			settings.mag.scale = 4;
 5025              		.loc 1 1200 0
 5026 007a 40F20003 		movw	r3, #:lower16:settings
 5027 007e C0F20003 		movt	r3, #:upper16:settings
 5028 0082 4FF00402 		mov	r2, #4
 5029 0086 83F82020 		strb	r2, [r3, #32]
1201:../LSM9DS1_Driver.c **** 			break;
 5030              		.loc 1 1201 0
 5031 008a 00BF     		nop
 5032              	.L206:
1202:../LSM9DS1_Driver.c **** 	}
1203:../LSM9DS1_Driver.c **** 
1204:../LSM9DS1_Driver.c **** 	// And write the new register value back into CTRL_REG6_XM:
1205:../LSM9DS1_Driver.c **** 	mWriteByte(CTRL_REG2_M, temp);
 5033              		.loc 1 1205 0
 5034 008c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5035 008e 4FF02100 		mov	r0, #33
 5036 0092 1946     		mov	r1, r3
 5037 0094 FFF7FEFF 		bl	mWriteByte
1206:../LSM9DS1_Driver.c **** 
1207:../LSM9DS1_Driver.c **** 	// We've updated the sensor, but we also need to update our class variables
1208:../LSM9DS1_Driver.c **** 	// First update mScale:
1209:../LSM9DS1_Driver.c **** 	//mScale = mScl;
1210:../LSM9DS1_Driver.c **** 	// Then calculate a new mRes, which relies on mScale being set correctly:
1211:../LSM9DS1_Driver.c **** 	calcmRes();
 5038              		.loc 1 1211 0
 5039 0098 FFF7FEFF 		bl	calcmRes
1212:../LSM9DS1_Driver.c **** }
 5040              		.loc 1 1212 0
 5041 009c 07F11007 		add	r7, r7, #16
 5042 00a0 BD46     		mov	sp, r7
 5043 00a2 80BD     		pop	{r7, pc}
 5044              		.cfi_endproc
 5045              	.LFE164:
 5047              		.section	.text.setGyroODR,"ax",%progbits
 5048              		.align	2
 5049              		.global	setGyroODR
 5050              		.thumb
 5051              		.thumb_func
 5053              	setGyroODR:
 5054              	.LFB165:
1213:../LSM9DS1_Driver.c **** 
1214:../LSM9DS1_Driver.c **** void setGyroODR(uint8_t gRate)
1215:../LSM9DS1_Driver.c **** {
 5055              		.loc 1 1215 0
 5056              		.cfi_startproc
 5057              		@ args = 0, pretend = 0, frame = 16
 5058              		@ frame_needed = 1, uses_anonymous_args = 0
 5059 0000 80B5     		push	{r7, lr}
 5060              	.LCFI136:
 5061              		.cfi_def_cfa_offset 8
 5062              		.cfi_offset 7, -8
 5063              		.cfi_offset 14, -4
 5064 0002 84B0     		sub	sp, sp, #16
 5065              	.LCFI137:
 5066              		.cfi_def_cfa_offset 24
 5067 0004 00AF     		add	r7, sp, #0
 5068              	.LCFI138:
 5069              		.cfi_def_cfa_register 7
 5070 0006 0346     		mov	r3, r0
 5071 0008 FB71     		strb	r3, [r7, #7]
1216:../LSM9DS1_Driver.c **** 	// Only do this if gRate is not 0 (which would disable the gyro)
1217:../LSM9DS1_Driver.c **** 	if ((gRate & 0x07) != 0)
 5072              		.loc 1 1217 0
 5073 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5074 000c 03F00703 		and	r3, r3, #7
 5075 0010 002B     		cmp	r3, #0
 5076 0012 20D0     		beq	.L208
 5077              	.LBB7:
1218:../LSM9DS1_Driver.c **** 	{
1219:../LSM9DS1_Driver.c **** 		// We need to preserve the other bytes in CTRL_REG1_G. So, first read it:
1220:../LSM9DS1_Driver.c **** 		uint8_t temp = xgReadByte(CTRL_REG1_G);
 5078              		.loc 1 1220 0
 5079 0014 4FF01000 		mov	r0, #16
 5080 0018 FFF7FEFF 		bl	xgReadByte
 5081 001c 0346     		mov	r3, r0
 5082 001e FB73     		strb	r3, [r7, #15]
1221:../LSM9DS1_Driver.c **** 		// Then mask out the gyro ODR bits:
1222:../LSM9DS1_Driver.c **** 		temp &= 0xFF^(0x7 << 5);
 5083              		.loc 1 1222 0
 5084 0020 FB7B     		ldrb	r3, [r7, #15]
 5085 0022 03F01F03 		and	r3, r3, #31
 5086 0026 FB73     		strb	r3, [r7, #15]
1223:../LSM9DS1_Driver.c **** 		temp |= (gRate & 0x07) << 5;
 5087              		.loc 1 1223 0
 5088 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5089 002a 4FEA4313 		lsl	r3, r3, #5
 5090 002e DAB2     		uxtb	r2, r3
 5091 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5092 0032 1343     		orrs	r3, r3, r2
 5093 0034 DBB2     		uxtb	r3, r3
 5094 0036 FB73     		strb	r3, [r7, #15]
1224:../LSM9DS1_Driver.c **** 		// Update our settings struct
1225:../LSM9DS1_Driver.c **** 		settings.gyro.sampleRate = gRate & 0x07;
 5095              		.loc 1 1225 0
 5096 0038 FB79     		ldrb	r3, [r7, #7]
 5097 003a 03F00703 		and	r3, r3, #7
 5098 003e DAB2     		uxtb	r2, r3
 5099 0040 40F20003 		movw	r3, #:lower16:settings
 5100 0044 C0F20003 		movt	r3, #:upper16:settings
 5101 0048 1A72     		strb	r2, [r3, #8]
1226:../LSM9DS1_Driver.c **** 		// And write the new register value back into CTRL_REG1_G:
1227:../LSM9DS1_Driver.c **** 		xgWriteByte(CTRL_REG1_G, temp);
 5102              		.loc 1 1227 0
 5103 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5104 004c 4FF01000 		mov	r0, #16
 5105 0050 1946     		mov	r1, r3
 5106 0052 FFF7FEFF 		bl	xgWriteByte
 5107              	.L208:
 5108              	.LBE7:
1228:../LSM9DS1_Driver.c **** 	}
1229:../LSM9DS1_Driver.c **** }
 5109              		.loc 1 1229 0
 5110 0056 07F11007 		add	r7, r7, #16
 5111 005a BD46     		mov	sp, r7
 5112 005c 80BD     		pop	{r7, pc}
 5113              		.cfi_endproc
 5114              	.LFE165:
 5116 005e 00BF     		.section	.text.setAccelODR,"ax",%progbits
 5117              		.align	2
 5118              		.global	setAccelODR
 5119              		.thumb
 5120              		.thumb_func
 5122              	setAccelODR:
 5123              	.LFB166:
1230:../LSM9DS1_Driver.c **** 
1231:../LSM9DS1_Driver.c **** void setAccelODR(uint8_t aRate)
1232:../LSM9DS1_Driver.c **** {
 5124              		.loc 1 1232 0
 5125              		.cfi_startproc
 5126              		@ args = 0, pretend = 0, frame = 16
 5127              		@ frame_needed = 1, uses_anonymous_args = 0
 5128 0000 80B5     		push	{r7, lr}
 5129              	.LCFI139:
 5130              		.cfi_def_cfa_offset 8
 5131              		.cfi_offset 7, -8
 5132              		.cfi_offset 14, -4
 5133 0002 84B0     		sub	sp, sp, #16
 5134              	.LCFI140:
 5135              		.cfi_def_cfa_offset 24
 5136 0004 00AF     		add	r7, sp, #0
 5137              	.LCFI141:
 5138              		.cfi_def_cfa_register 7
 5139 0006 0346     		mov	r3, r0
 5140 0008 FB71     		strb	r3, [r7, #7]
1233:../LSM9DS1_Driver.c **** 	// Only do this if aRate is not 0 (which would disable the accel)
1234:../LSM9DS1_Driver.c **** 	if ((aRate & 0x07) != 0)
 5141              		.loc 1 1234 0
 5142 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5143 000c 03F00703 		and	r3, r3, #7
 5144 0010 002B     		cmp	r3, #0
 5145 0012 20D0     		beq	.L210
 5146              	.LBB8:
1235:../LSM9DS1_Driver.c **** 	{
1236:../LSM9DS1_Driver.c **** 		// We need to preserve the other bytes in CTRL_REG1_XM. So, first read it:
1237:../LSM9DS1_Driver.c **** 		uint8_t temp = xgReadByte(CTRL_REG6_XL);
 5147              		.loc 1 1237 0
 5148 0014 4FF02000 		mov	r0, #32
 5149 0018 FFF7FEFF 		bl	xgReadByte
 5150 001c 0346     		mov	r3, r0
 5151 001e FB73     		strb	r3, [r7, #15]
1238:../LSM9DS1_Driver.c **** 		// Then mask out the accel ODR bits:
1239:../LSM9DS1_Driver.c **** 		temp &= 0x1F;
 5152              		.loc 1 1239 0
 5153 0020 FB7B     		ldrb	r3, [r7, #15]
 5154 0022 03F01F03 		and	r3, r3, #31
 5155 0026 FB73     		strb	r3, [r7, #15]
1240:../LSM9DS1_Driver.c **** 		// Then shift in our new ODR bits:
1241:../LSM9DS1_Driver.c **** 		temp |= ((aRate & 0x07) << 5);
 5156              		.loc 1 1241 0
 5157 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5158 002a 4FEA4313 		lsl	r3, r3, #5
 5159 002e DAB2     		uxtb	r2, r3
 5160 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5161 0032 1343     		orrs	r3, r3, r2
 5162 0034 DBB2     		uxtb	r3, r3
 5163 0036 FB73     		strb	r3, [r7, #15]
1242:../LSM9DS1_Driver.c **** 		settings.accel.sampleRate = aRate & 0x07;
 5164              		.loc 1 1242 0
 5165 0038 FB79     		ldrb	r3, [r7, #7]
 5166 003a 03F00703 		and	r3, r3, #7
 5167 003e DAB2     		uxtb	r2, r3
 5168 0040 40F20003 		movw	r3, #:lower16:settings
 5169 0044 C0F20003 		movt	r3, #:upper16:settings
 5170 0048 1A76     		strb	r2, [r3, #24]
1243:../LSM9DS1_Driver.c **** 		// And write the new register value back into CTRL_REG1_XM:
1244:../LSM9DS1_Driver.c **** 		xgWriteByte(CTRL_REG6_XL, temp);
 5171              		.loc 1 1244 0
 5172 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5173 004c 4FF02000 		mov	r0, #32
 5174 0050 1946     		mov	r1, r3
 5175 0052 FFF7FEFF 		bl	xgWriteByte
 5176              	.L210:
 5177              	.LBE8:
1245:../LSM9DS1_Driver.c **** 	}
1246:../LSM9DS1_Driver.c **** }
 5178              		.loc 1 1246 0
 5179 0056 07F11007 		add	r7, r7, #16
 5180 005a BD46     		mov	sp, r7
 5181 005c 80BD     		pop	{r7, pc}
 5182              		.cfi_endproc
 5183              	.LFE166:
 5185 005e 00BF     		.section	.text.setMagODR,"ax",%progbits
 5186              		.align	2
 5187              		.global	setMagODR
 5188              		.thumb
 5189              		.thumb_func
 5191              	setMagODR:
 5192              	.LFB167:
1247:../LSM9DS1_Driver.c **** 
1248:../LSM9DS1_Driver.c **** void setMagODR(uint8_t mRate)
1249:../LSM9DS1_Driver.c **** {
 5193              		.loc 1 1249 0
 5194              		.cfi_startproc
 5195              		@ args = 0, pretend = 0, frame = 16
 5196              		@ frame_needed = 1, uses_anonymous_args = 0
 5197 0000 80B5     		push	{r7, lr}
 5198              	.LCFI142:
 5199              		.cfi_def_cfa_offset 8
 5200              		.cfi_offset 7, -8
 5201              		.cfi_offset 14, -4
 5202 0002 84B0     		sub	sp, sp, #16
 5203              	.LCFI143:
 5204              		.cfi_def_cfa_offset 24
 5205 0004 00AF     		add	r7, sp, #0
 5206              	.LCFI144:
 5207              		.cfi_def_cfa_register 7
 5208 0006 0346     		mov	r3, r0
 5209 0008 FB71     		strb	r3, [r7, #7]
1250:../LSM9DS1_Driver.c **** 	// We need to preserve the other bytes in CTRL_REG5_XM. So, first read it:
1251:../LSM9DS1_Driver.c **** 	uint8_t temp = mReadByte(CTRL_REG1_M);
 5210              		.loc 1 1251 0
 5211 000a 4FF02000 		mov	r0, #32
 5212 000e FFF7FEFF 		bl	mReadByte
 5213 0012 0346     		mov	r3, r0
 5214 0014 FB73     		strb	r3, [r7, #15]
1252:../LSM9DS1_Driver.c **** 	// Then mask out the mag ODR bits:
1253:../LSM9DS1_Driver.c **** 	temp &= 0xFF^(0x7 << 2);
 5215              		.loc 1 1253 0
 5216 0016 FB7B     		ldrb	r3, [r7, #15]
 5217 0018 23F01C03 		bic	r3, r3, #28
 5218 001c FB73     		strb	r3, [r7, #15]
1254:../LSM9DS1_Driver.c **** 	// Then shift in our new ODR bits:
1255:../LSM9DS1_Driver.c **** 	temp |= ((mRate & 0x07) << 2);
 5219              		.loc 1 1255 0
 5220 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5221 0020 03F00703 		and	r3, r3, #7
 5222 0024 4FEA8303 		lsl	r3, r3, #2
 5223 0028 DAB2     		uxtb	r2, r3
 5224 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5225 002c 1343     		orrs	r3, r3, r2
 5226 002e DBB2     		uxtb	r3, r3
 5227 0030 FB73     		strb	r3, [r7, #15]
1256:../LSM9DS1_Driver.c **** 	settings.mag.sampleRate = mRate & 0x07;
 5228              		.loc 1 1256 0
 5229 0032 FB79     		ldrb	r3, [r7, #7]
 5230 0034 03F00703 		and	r3, r3, #7
 5231 0038 DAB2     		uxtb	r2, r3
 5232 003a 40F20003 		movw	r3, #:lower16:settings
 5233 003e C0F20003 		movt	r3, #:upper16:settings
 5234 0042 83F82120 		strb	r2, [r3, #33]
1257:../LSM9DS1_Driver.c **** 	// And write the new register value back into CTRL_REG5_XM:
1258:../LSM9DS1_Driver.c **** 	mWriteByte(CTRL_REG1_M, temp);
 5235              		.loc 1 1258 0
 5236 0046 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5237 0048 4FF02000 		mov	r0, #32
 5238 004c 1946     		mov	r1, r3
 5239 004e FFF7FEFF 		bl	mWriteByte
1259:../LSM9DS1_Driver.c **** }
 5240              		.loc 1 1259 0
 5241 0052 07F11007 		add	r7, r7, #16
 5242 0056 BD46     		mov	sp, r7
 5243 0058 80BD     		pop	{r7, pc}
 5244              		.cfi_endproc
 5245              	.LFE167:
 5247 005a 00BF     		.section	.text.configInt,"ax",%progbits
 5248              		.align	2
 5249              		.global	configInt
 5250              		.thumb
 5251              		.thumb_func
 5253              	configInt:
 5254              	.LFB168:
1260:../LSM9DS1_Driver.c **** 
1261:../LSM9DS1_Driver.c **** void configInt(interrupt_select interupt, uint8_t generator, h_lactive activeLow, pp_od pushPull)
1262:../LSM9DS1_Driver.c **** {
 5255              		.loc 1 1262 0
 5256              		.cfi_startproc
 5257              		@ args = 0, pretend = 0, frame = 16
 5258              		@ frame_needed = 1, uses_anonymous_args = 0
 5259 0000 80B5     		push	{r7, lr}
 5260              	.LCFI145:
 5261              		.cfi_def_cfa_offset 8
 5262              		.cfi_offset 7, -8
 5263              		.cfi_offset 14, -4
 5264 0002 84B0     		sub	sp, sp, #16
 5265              	.LCFI146:
 5266              		.cfi_def_cfa_offset 24
 5267 0004 00AF     		add	r7, sp, #0
 5268              	.LCFI147:
 5269              		.cfi_def_cfa_register 7
 5270 0006 F871     		strb	r0, [r7, #7]
 5271 0008 B971     		strb	r1, [r7, #6]
 5272 000a 7A71     		strb	r2, [r7, #5]
 5273 000c 3B71     		strb	r3, [r7, #4]
1263:../LSM9DS1_Driver.c **** 	// Write to INT1_CTRL or INT2_CTRL. [interupt] should already be one of
1264:../LSM9DS1_Driver.c **** 	// those two values.
1265:../LSM9DS1_Driver.c **** 	// [generator] should be an OR'd list of values from the interrupt_generators enum
1266:../LSM9DS1_Driver.c **** 	xgWriteByte(interupt, generator);
 5274              		.loc 1 1266 0
 5275 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5276 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5277 0012 1046     		mov	r0, r2
 5278 0014 1946     		mov	r1, r3
 5279 0016 FFF7FEFF 		bl	xgWriteByte
1267:../LSM9DS1_Driver.c **** 
1268:../LSM9DS1_Driver.c **** 	// Configure CTRL_REG8
1269:../LSM9DS1_Driver.c **** 	uint8_t temp;
1270:../LSM9DS1_Driver.c **** 	temp = xgReadByte(CTRL_REG8);
 5280              		.loc 1 1270 0
 5281 001a 4FF02200 		mov	r0, #34
 5282 001e FFF7FEFF 		bl	xgReadByte
 5283 0022 0346     		mov	r3, r0
 5284 0024 FB73     		strb	r3, [r7, #15]
1271:../LSM9DS1_Driver.c **** 
1272:../LSM9DS1_Driver.c **** 	if (activeLow) temp |= (1<<5);
 5285              		.loc 1 1272 0
 5286 0026 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 5287 0028 002B     		cmp	r3, #0
 5288 002a 04D0     		beq	.L214
 5289              		.loc 1 1272 0 is_stmt 0 discriminator 1
 5290 002c FB7B     		ldrb	r3, [r7, #15]
 5291 002e 43F02003 		orr	r3, r3, #32
 5292 0032 FB73     		strb	r3, [r7, #15]
 5293 0034 03E0     		b	.L215
 5294              	.L214:
1273:../LSM9DS1_Driver.c **** 	else temp &= ~(1<<5);
 5295              		.loc 1 1273 0 is_stmt 1
 5296 0036 FB7B     		ldrb	r3, [r7, #15]
 5297 0038 23F02003 		bic	r3, r3, #32
 5298 003c FB73     		strb	r3, [r7, #15]
 5299              	.L215:
1274:../LSM9DS1_Driver.c **** 
1275:../LSM9DS1_Driver.c **** 	if (pushPull) temp &= ~(1<<4);
 5300              		.loc 1 1275 0
 5301 003e 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 5302 0040 002B     		cmp	r3, #0
 5303 0042 04D0     		beq	.L216
 5304              		.loc 1 1275 0 is_stmt 0 discriminator 1
 5305 0044 FB7B     		ldrb	r3, [r7, #15]
 5306 0046 23F01003 		bic	r3, r3, #16
 5307 004a FB73     		strb	r3, [r7, #15]
 5308 004c 03E0     		b	.L217
 5309              	.L216:
1276:../LSM9DS1_Driver.c **** 	else temp |= (1<<4);
 5310              		.loc 1 1276 0 is_stmt 1
 5311 004e FB7B     		ldrb	r3, [r7, #15]
 5312 0050 43F01003 		orr	r3, r3, #16
 5313 0054 FB73     		strb	r3, [r7, #15]
 5314              	.L217:
1277:../LSM9DS1_Driver.c **** 
1278:../LSM9DS1_Driver.c **** 	xgWriteByte(CTRL_REG8, temp);
 5315              		.loc 1 1278 0
 5316 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5317 0058 4FF02200 		mov	r0, #34
 5318 005c 1946     		mov	r1, r3
 5319 005e FFF7FEFF 		bl	xgWriteByte
1279:../LSM9DS1_Driver.c **** }
 5320              		.loc 1 1279 0
 5321 0062 07F11007 		add	r7, r7, #16
 5322 0066 BD46     		mov	sp, r7
 5323 0068 80BD     		pop	{r7, pc}
 5324              		.cfi_endproc
 5325              	.LFE168:
 5327 006a 00BF     		.section	.text.configInactivity,"ax",%progbits
 5328              		.align	2
 5329              		.global	configInactivity
 5330              		.thumb
 5331              		.thumb_func
 5333              	configInactivity:
 5334              	.LFB169:
1280:../LSM9DS1_Driver.c **** 
1281:../LSM9DS1_Driver.c **** 
1282:../LSM9DS1_Driver.c **** void configInactivity(uint8_t duration, uint8_t threshold, bool sleepOn)
1283:../LSM9DS1_Driver.c **** {
 5335              		.loc 1 1283 0
 5336              		.cfi_startproc
 5337              		@ args = 0, pretend = 0, frame = 16
 5338              		@ frame_needed = 1, uses_anonymous_args = 0
 5339 0000 80B5     		push	{r7, lr}
 5340              	.LCFI148:
 5341              		.cfi_def_cfa_offset 8
 5342              		.cfi_offset 7, -8
 5343              		.cfi_offset 14, -4
 5344 0002 84B0     		sub	sp, sp, #16
 5345              	.LCFI149:
 5346              		.cfi_def_cfa_offset 24
 5347 0004 00AF     		add	r7, sp, #0
 5348              	.LCFI150:
 5349              		.cfi_def_cfa_register 7
 5350 0006 1346     		mov	r3, r2
 5351 0008 0246     		mov	r2, r0
 5352 000a FA71     		strb	r2, [r7, #7]
 5353 000c 0A46     		mov	r2, r1
 5354 000e BA71     		strb	r2, [r7, #6]
 5355 0010 7B71     		strb	r3, [r7, #5]
1284:../LSM9DS1_Driver.c **** 	uint8_t temp = 0;
 5356              		.loc 1 1284 0
 5357 0012 4FF00003 		mov	r3, #0
 5358 0016 FB73     		strb	r3, [r7, #15]
1285:../LSM9DS1_Driver.c **** 
1286:../LSM9DS1_Driver.c **** 	temp = threshold & 0x7F;
 5359              		.loc 1 1286 0
 5360 0018 BB79     		ldrb	r3, [r7, #6]
 5361 001a 03F07F03 		and	r3, r3, #127
 5362 001e FB73     		strb	r3, [r7, #15]
1287:../LSM9DS1_Driver.c **** 	if (sleepOn) temp |= (1<<7);
 5363              		.loc 1 1287 0
 5364 0020 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 5365 0022 002B     		cmp	r3, #0
 5366 0024 03D0     		beq	.L219
 5367              		.loc 1 1287 0 is_stmt 0 discriminator 1
 5368 0026 FB7B     		ldrb	r3, [r7, #15]
 5369 0028 63F07F03 		orn	r3, r3, #127
 5370 002c FB73     		strb	r3, [r7, #15]
 5371              	.L219:
1288:../LSM9DS1_Driver.c **** 	xgWriteByte(ACT_THS, temp);
 5372              		.loc 1 1288 0 is_stmt 1
 5373 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5374 0030 4FF00400 		mov	r0, #4
 5375 0034 1946     		mov	r1, r3
 5376 0036 FFF7FEFF 		bl	xgWriteByte
1289:../LSM9DS1_Driver.c **** 
1290:../LSM9DS1_Driver.c **** 	xgWriteByte(ACT_DUR, duration);
 5377              		.loc 1 1290 0
 5378 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5379 003c 4FF00500 		mov	r0, #5
 5380 0040 1946     		mov	r1, r3
 5381 0042 FFF7FEFF 		bl	xgWriteByte
1291:../LSM9DS1_Driver.c **** }
 5382              		.loc 1 1291 0
 5383 0046 07F11007 		add	r7, r7, #16
 5384 004a BD46     		mov	sp, r7
 5385 004c 80BD     		pop	{r7, pc}
 5386              		.cfi_endproc
 5387              	.LFE169:
 5389 004e 00BF     		.section	.text.getInactivity,"ax",%progbits
 5390              		.align	2
 5391              		.global	getInactivity
 5392              		.thumb
 5393              		.thumb_func
 5395              	getInactivity:
 5396              	.LFB170:
1292:../LSM9DS1_Driver.c **** 
1293:../LSM9DS1_Driver.c **** 
1294:../LSM9DS1_Driver.c **** uint8_t getInactivity(void)
1295:../LSM9DS1_Driver.c **** {
 5397              		.loc 1 1295 0
 5398              		.cfi_startproc
 5399              		@ args = 0, pretend = 0, frame = 8
 5400              		@ frame_needed = 1, uses_anonymous_args = 0
 5401 0000 80B5     		push	{r7, lr}
 5402              	.LCFI151:
 5403              		.cfi_def_cfa_offset 8
 5404              		.cfi_offset 7, -8
 5405              		.cfi_offset 14, -4
 5406 0002 82B0     		sub	sp, sp, #8
 5407              	.LCFI152:
 5408              		.cfi_def_cfa_offset 16
 5409 0004 00AF     		add	r7, sp, #0
 5410              	.LCFI153:
 5411              		.cfi_def_cfa_register 7
1296:../LSM9DS1_Driver.c **** 	uint8_t temp = xgReadByte(STATUS_REG_0);
 5412              		.loc 1 1296 0
 5413 0006 4FF01700 		mov	r0, #23
 5414 000a FFF7FEFF 		bl	xgReadByte
 5415 000e 0346     		mov	r3, r0
 5416 0010 FB71     		strb	r3, [r7, #7]
1297:../LSM9DS1_Driver.c **** 	temp &= (0x10);
 5417              		.loc 1 1297 0
 5418 0012 FB79     		ldrb	r3, [r7, #7]
 5419 0014 03F01003 		and	r3, r3, #16
 5420 0018 FB71     		strb	r3, [r7, #7]
1298:../LSM9DS1_Driver.c **** 	return temp;
 5421              		.loc 1 1298 0
 5422 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1299:../LSM9DS1_Driver.c **** }
 5423              		.loc 1 1299 0
 5424 001c 1846     		mov	r0, r3
 5425 001e 07F10807 		add	r7, r7, #8
 5426 0022 BD46     		mov	sp, r7
 5427 0024 80BD     		pop	{r7, pc}
 5428              		.cfi_endproc
 5429              	.LFE170:
 5431 0026 00BF     		.section	.text.configAccelInt,"ax",%progbits
 5432              		.align	2
 5433              		.global	configAccelInt
 5434              		.thumb
 5435              		.thumb_func
 5437              	configAccelInt:
 5438              	.LFB171:
1300:../LSM9DS1_Driver.c **** 
1301:../LSM9DS1_Driver.c **** void configAccelInt(uint8_t generator, bool andInterrupts)
1302:../LSM9DS1_Driver.c **** {
 5439              		.loc 1 1302 0
 5440              		.cfi_startproc
 5441              		@ args = 0, pretend = 0, frame = 16
 5442              		@ frame_needed = 1, uses_anonymous_args = 0
 5443 0000 80B5     		push	{r7, lr}
 5444              	.LCFI154:
 5445              		.cfi_def_cfa_offset 8
 5446              		.cfi_offset 7, -8
 5447              		.cfi_offset 14, -4
 5448 0002 84B0     		sub	sp, sp, #16
 5449              	.LCFI155:
 5450              		.cfi_def_cfa_offset 24
 5451 0004 00AF     		add	r7, sp, #0
 5452              	.LCFI156:
 5453              		.cfi_def_cfa_register 7
 5454 0006 0246     		mov	r2, r0
 5455 0008 0B46     		mov	r3, r1
 5456 000a FA71     		strb	r2, [r7, #7]
 5457 000c BB71     		strb	r3, [r7, #6]
1303:../LSM9DS1_Driver.c **** 	// Use variables from accel_interrupt_generator, OR'd together to create
1304:../LSM9DS1_Driver.c **** 	// the [generator]value.
1305:../LSM9DS1_Driver.c **** 	uint8_t temp = generator;
 5458              		.loc 1 1305 0
 5459 000e FB79     		ldrb	r3, [r7, #7]
 5460 0010 FB73     		strb	r3, [r7, #15]
1306:../LSM9DS1_Driver.c **** 	if (andInterrupts) temp |= 0x80;
 5461              		.loc 1 1306 0
 5462 0012 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5463 0014 002B     		cmp	r3, #0
 5464 0016 03D0     		beq	.L223
 5465              		.loc 1 1306 0 is_stmt 0 discriminator 1
 5466 0018 FB7B     		ldrb	r3, [r7, #15]
 5467 001a 63F07F03 		orn	r3, r3, #127
 5468 001e FB73     		strb	r3, [r7, #15]
 5469              	.L223:
1307:../LSM9DS1_Driver.c **** 	xgWriteByte(INT_GEN_CFG_XL, temp);
 5470              		.loc 1 1307 0 is_stmt 1
 5471 0020 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5472 0022 4FF00600 		mov	r0, #6
 5473 0026 1946     		mov	r1, r3
 5474 0028 FFF7FEFF 		bl	xgWriteByte
1308:../LSM9DS1_Driver.c **** }
 5475              		.loc 1 1308 0
 5476 002c 07F11007 		add	r7, r7, #16
 5477 0030 BD46     		mov	sp, r7
 5478 0032 80BD     		pop	{r7, pc}
 5479              		.cfi_endproc
 5480              	.LFE171:
 5482              		.section	.text.configAccelThs,"ax",%progbits
 5483              		.align	2
 5484              		.global	configAccelThs
 5485              		.thumb
 5486              		.thumb_func
 5488              	configAccelThs:
 5489              	.LFB172:
1309:../LSM9DS1_Driver.c **** 
1310:../LSM9DS1_Driver.c **** void configAccelThs(uint8_t threshold, lsm9ds1_axis axis, uint8_t duration, bool wait)
1311:../LSM9DS1_Driver.c **** {
 5490              		.loc 1 1311 0
 5491              		.cfi_startproc
 5492              		@ args = 0, pretend = 0, frame = 16
 5493              		@ frame_needed = 1, uses_anonymous_args = 0
 5494 0000 80B5     		push	{r7, lr}
 5495              	.LCFI157:
 5496              		.cfi_def_cfa_offset 8
 5497              		.cfi_offset 7, -8
 5498              		.cfi_offset 14, -4
 5499 0002 84B0     		sub	sp, sp, #16
 5500              	.LCFI158:
 5501              		.cfi_def_cfa_offset 24
 5502 0004 00AF     		add	r7, sp, #0
 5503              	.LCFI159:
 5504              		.cfi_def_cfa_register 7
 5505 0006 F871     		strb	r0, [r7, #7]
 5506 0008 B971     		strb	r1, [r7, #6]
 5507 000a 7A71     		strb	r2, [r7, #5]
 5508 000c 3B71     		strb	r3, [r7, #4]
1312:../LSM9DS1_Driver.c **** 	// Write threshold value to INT_GEN_THS_?_XL.
1313:../LSM9DS1_Driver.c **** 	// axis will be 0, 1, or 2 (x, y, z respectively)
1314:../LSM9DS1_Driver.c **** 	xgWriteByte(INT_GEN_THS_X_XL + axis, threshold);
 5509              		.loc 1 1314 0
 5510 000e BB79     		ldrb	r3, [r7, #6]
 5511 0010 03F10703 		add	r3, r3, #7
 5512 0014 DAB2     		uxtb	r2, r3
 5513 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5514 0018 1046     		mov	r0, r2
 5515 001a 1946     		mov	r1, r3
 5516 001c FFF7FEFF 		bl	xgWriteByte
1315:../LSM9DS1_Driver.c **** 
1316:../LSM9DS1_Driver.c **** 	// Write duration and wait to INT_GEN_DUR_XL
1317:../LSM9DS1_Driver.c **** 	uint8_t temp;
1318:../LSM9DS1_Driver.c **** 	temp = (duration & 0x7F);
 5517              		.loc 1 1318 0
 5518 0020 7B79     		ldrb	r3, [r7, #5]
 5519 0022 03F07F03 		and	r3, r3, #127
 5520 0026 FB73     		strb	r3, [r7, #15]
1319:../LSM9DS1_Driver.c **** 	if (wait) temp |= 0x80;
 5521              		.loc 1 1319 0
 5522 0028 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 5523 002a 002B     		cmp	r3, #0
 5524 002c 03D0     		beq	.L225
 5525              		.loc 1 1319 0 is_stmt 0 discriminator 1
 5526 002e FB7B     		ldrb	r3, [r7, #15]
 5527 0030 63F07F03 		orn	r3, r3, #127
 5528 0034 FB73     		strb	r3, [r7, #15]
 5529              	.L225:
1320:../LSM9DS1_Driver.c **** 	xgWriteByte(INT_GEN_DUR_XL, temp);
 5530              		.loc 1 1320 0 is_stmt 1
 5531 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5532 0038 4FF00A00 		mov	r0, #10
 5533 003c 1946     		mov	r1, r3
 5534 003e FFF7FEFF 		bl	xgWriteByte
1321:../LSM9DS1_Driver.c **** }
 5535              		.loc 1 1321 0
 5536 0042 07F11007 		add	r7, r7, #16
 5537 0046 BD46     		mov	sp, r7
 5538 0048 80BD     		pop	{r7, pc}
 5539              		.cfi_endproc
 5540              	.LFE172:
 5542 004a 00BF     		.section	.text.getAccelIntSrc,"ax",%progbits
 5543              		.align	2
 5544              		.global	getAccelIntSrc
 5545              		.thumb
 5546              		.thumb_func
 5548              	getAccelIntSrc:
 5549              	.LFB173:
1322:../LSM9DS1_Driver.c **** 
1323:../LSM9DS1_Driver.c **** uint8_t getAccelIntSrc(void)
1324:../LSM9DS1_Driver.c **** {
 5550              		.loc 1 1324 0
 5551              		.cfi_startproc
 5552              		@ args = 0, pretend = 0, frame = 8
 5553              		@ frame_needed = 1, uses_anonymous_args = 0
 5554 0000 80B5     		push	{r7, lr}
 5555              	.LCFI160:
 5556              		.cfi_def_cfa_offset 8
 5557              		.cfi_offset 7, -8
 5558              		.cfi_offset 14, -4
 5559 0002 82B0     		sub	sp, sp, #8
 5560              	.LCFI161:
 5561              		.cfi_def_cfa_offset 16
 5562 0004 00AF     		add	r7, sp, #0
 5563              	.LCFI162:
 5564              		.cfi_def_cfa_register 7
1325:../LSM9DS1_Driver.c **** 	uint8_t intSrc = xgReadByte(INT_GEN_SRC_XL);
 5565              		.loc 1 1325 0
 5566 0006 4FF02600 		mov	r0, #38
 5567 000a FFF7FEFF 		bl	xgReadByte
 5568 000e 0346     		mov	r3, r0
 5569 0010 FB71     		strb	r3, [r7, #7]
1326:../LSM9DS1_Driver.c **** 
1327:../LSM9DS1_Driver.c **** 	// Check if the IA_XL (interrupt active) bit is set
1328:../LSM9DS1_Driver.c **** 	if (intSrc & (1<<6))
 5570              		.loc 1 1328 0
 5571 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5572 0014 03F04003 		and	r3, r3, #64
 5573 0018 002B     		cmp	r3, #0
 5574 001a 04D0     		beq	.L227
1329:../LSM9DS1_Driver.c **** 	{
1330:../LSM9DS1_Driver.c **** 		return (intSrc & 0x3F);
 5575              		.loc 1 1330 0
 5576 001c FB79     		ldrb	r3, [r7, #7]
 5577 001e 03F03F03 		and	r3, r3, #63
 5578 0022 DBB2     		uxtb	r3, r3
 5579 0024 01E0     		b	.L228
 5580              	.L227:
1331:../LSM9DS1_Driver.c **** 	}
1332:../LSM9DS1_Driver.c **** 
1333:../LSM9DS1_Driver.c **** 	return 0;
 5581              		.loc 1 1333 0
 5582 0026 4FF00003 		mov	r3, #0
 5583              	.L228:
1334:../LSM9DS1_Driver.c **** }
 5584              		.loc 1 1334 0
 5585 002a 1846     		mov	r0, r3
 5586 002c 07F10807 		add	r7, r7, #8
 5587 0030 BD46     		mov	sp, r7
 5588 0032 80BD     		pop	{r7, pc}
 5589              		.cfi_endproc
 5590              	.LFE173:
 5592              		.section	.text.configGyroInt,"ax",%progbits
 5593              		.align	2
 5594              		.global	configGyroInt
 5595              		.thumb
 5596              		.thumb_func
 5598              	configGyroInt:
 5599              	.LFB174:
1335:../LSM9DS1_Driver.c **** 
1336:../LSM9DS1_Driver.c **** void configGyroInt(uint8_t generator, bool aoi, bool latch)
1337:../LSM9DS1_Driver.c **** {
 5600              		.loc 1 1337 0
 5601              		.cfi_startproc
 5602              		@ args = 0, pretend = 0, frame = 16
 5603              		@ frame_needed = 1, uses_anonymous_args = 0
 5604 0000 80B5     		push	{r7, lr}
 5605              	.LCFI163:
 5606              		.cfi_def_cfa_offset 8
 5607              		.cfi_offset 7, -8
 5608              		.cfi_offset 14, -4
 5609 0002 84B0     		sub	sp, sp, #16
 5610              	.LCFI164:
 5611              		.cfi_def_cfa_offset 24
 5612 0004 00AF     		add	r7, sp, #0
 5613              	.LCFI165:
 5614              		.cfi_def_cfa_register 7
 5615 0006 1346     		mov	r3, r2
 5616 0008 0246     		mov	r2, r0
 5617 000a FA71     		strb	r2, [r7, #7]
 5618 000c 0A46     		mov	r2, r1
 5619 000e BA71     		strb	r2, [r7, #6]
 5620 0010 7B71     		strb	r3, [r7, #5]
1338:../LSM9DS1_Driver.c **** 	// Use variables from accel_interrupt_generator, OR'd together to create
1339:../LSM9DS1_Driver.c **** 	// the [generator]value.
1340:../LSM9DS1_Driver.c **** 	uint8_t temp = generator;
 5621              		.loc 1 1340 0
 5622 0012 FB79     		ldrb	r3, [r7, #7]
 5623 0014 FB73     		strb	r3, [r7, #15]
1341:../LSM9DS1_Driver.c **** 	if (aoi) temp |= 0x80;
 5624              		.loc 1 1341 0
 5625 0016 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5626 0018 002B     		cmp	r3, #0
 5627 001a 03D0     		beq	.L230
 5628              		.loc 1 1341 0 is_stmt 0 discriminator 1
 5629 001c FB7B     		ldrb	r3, [r7, #15]
 5630 001e 63F07F03 		orn	r3, r3, #127
 5631 0022 FB73     		strb	r3, [r7, #15]
 5632              	.L230:
1342:../LSM9DS1_Driver.c **** 	if (latch) temp |= 0x40;
 5633              		.loc 1 1342 0 is_stmt 1
 5634 0024 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 5635 0026 002B     		cmp	r3, #0
 5636 0028 03D0     		beq	.L231
 5637              		.loc 1 1342 0 is_stmt 0 discriminator 1
 5638 002a FB7B     		ldrb	r3, [r7, #15]
 5639 002c 43F04003 		orr	r3, r3, #64
 5640 0030 FB73     		strb	r3, [r7, #15]
 5641              	.L231:
1343:../LSM9DS1_Driver.c **** 	xgWriteByte(INT_GEN_CFG_G, temp);
 5642              		.loc 1 1343 0 is_stmt 1
 5643 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5644 0034 4FF03000 		mov	r0, #48
 5645 0038 1946     		mov	r1, r3
 5646 003a FFF7FEFF 		bl	xgWriteByte
1344:../LSM9DS1_Driver.c **** }
 5647              		.loc 1 1344 0
 5648 003e 07F11007 		add	r7, r7, #16
 5649 0042 BD46     		mov	sp, r7
 5650 0044 80BD     		pop	{r7, pc}
 5651              		.cfi_endproc
 5652              	.LFE174:
 5654 0046 00BF     		.section	.text.configGyroThs,"ax",%progbits
 5655              		.align	2
 5656              		.global	configGyroThs
 5657              		.thumb
 5658              		.thumb_func
 5660              	configGyroThs:
 5661              	.LFB175:
1345:../LSM9DS1_Driver.c **** 
1346:../LSM9DS1_Driver.c **** 
1347:../LSM9DS1_Driver.c **** void configGyroThs(int16_t threshold, lsm9ds1_axis axis, uint8_t duration, bool wait)
1348:../LSM9DS1_Driver.c **** {
 5662              		.loc 1 1348 0
 5663              		.cfi_startproc
 5664              		@ args = 0, pretend = 0, frame = 16
 5665              		@ frame_needed = 1, uses_anonymous_args = 0
 5666 0000 80B5     		push	{r7, lr}
 5667              	.LCFI166:
 5668              		.cfi_def_cfa_offset 8
 5669              		.cfi_offset 7, -8
 5670              		.cfi_offset 14, -4
 5671 0002 84B0     		sub	sp, sp, #16
 5672              	.LCFI167:
 5673              		.cfi_def_cfa_offset 24
 5674 0004 00AF     		add	r7, sp, #0
 5675              	.LCFI168:
 5676              		.cfi_def_cfa_register 7
 5677 0006 F880     		strh	r0, [r7, #6]	@ movhi
 5678 0008 7971     		strb	r1, [r7, #5]
 5679 000a 3A71     		strb	r2, [r7, #4]
 5680 000c FB70     		strb	r3, [r7, #3]
1349:../LSM9DS1_Driver.c **** 	uint8_t buffer[2];
1350:../LSM9DS1_Driver.c **** 	buffer[0] = (threshold & 0x7F00) >> 8;
 5681              		.loc 1 1350 0
 5682 000e FB88     		ldrh	r3, [r7, #6]
 5683 0010 03F4FE43 		and	r3, r3, #32512
 5684 0014 4FEA2323 		asr	r3, r3, #8
 5685 0018 DBB2     		uxtb	r3, r3
 5686 001a 3B73     		strb	r3, [r7, #12]
1351:../LSM9DS1_Driver.c **** 	buffer[1] = (threshold & 0x00FF);
 5687              		.loc 1 1351 0
 5688 001c FB88     		ldrh	r3, [r7, #6]	@ movhi
 5689 001e DBB2     		uxtb	r3, r3
 5690 0020 7B73     		strb	r3, [r7, #13]
1352:../LSM9DS1_Driver.c **** 	// Write threshold value to INT_GEN_THS_?H_G and  INT_GEN_THS_?L_G.
1353:../LSM9DS1_Driver.c **** 	// axis will be 0, 1, or 2 (x, y, z respectively)
1354:../LSM9DS1_Driver.c **** 	xgWriteByte(INT_GEN_THS_XH_G + (axis * 2), buffer[0]);
 5691              		.loc 1 1354 0
 5692 0022 7B79     		ldrb	r3, [r7, #5]
 5693 0024 4FEA4303 		lsl	r3, r3, #1
 5694 0028 DBB2     		uxtb	r3, r3
 5695 002a 03F13103 		add	r3, r3, #49
 5696 002e DAB2     		uxtb	r2, r3
 5697 0030 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 5698 0032 1046     		mov	r0, r2
 5699 0034 1946     		mov	r1, r3
 5700 0036 FFF7FEFF 		bl	xgWriteByte
1355:../LSM9DS1_Driver.c **** 	xgWriteByte(INT_GEN_THS_XH_G + 1 + (axis * 2), buffer[1]);
 5701              		.loc 1 1355 0
 5702 003a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 5703 003c 03F11903 		add	r3, r3, #25
 5704 0040 DBB2     		uxtb	r3, r3
 5705 0042 4FEA4303 		lsl	r3, r3, #1
 5706 0046 DAB2     		uxtb	r2, r3
 5707 0048 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 5708 004a 1046     		mov	r0, r2
 5709 004c 1946     		mov	r1, r3
 5710 004e FFF7FEFF 		bl	xgWriteByte
1356:../LSM9DS1_Driver.c **** 
1357:../LSM9DS1_Driver.c **** 	// Write duration and wait to INT_GEN_DUR_XL
1358:../LSM9DS1_Driver.c **** 	uint8_t temp;
1359:../LSM9DS1_Driver.c **** 	temp = (duration & 0x7F);
 5711              		.loc 1 1359 0
 5712 0052 3B79     		ldrb	r3, [r7, #4]
 5713 0054 03F07F03 		and	r3, r3, #127
 5714 0058 FB73     		strb	r3, [r7, #15]
1360:../LSM9DS1_Driver.c **** 	if (wait) temp |= 0x80;
 5715              		.loc 1 1360 0
 5716 005a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5717 005c 002B     		cmp	r3, #0
 5718 005e 03D0     		beq	.L233
 5719              		.loc 1 1360 0 is_stmt 0 discriminator 1
 5720 0060 FB7B     		ldrb	r3, [r7, #15]
 5721 0062 63F07F03 		orn	r3, r3, #127
 5722 0066 FB73     		strb	r3, [r7, #15]
 5723              	.L233:
1361:../LSM9DS1_Driver.c **** 	xgWriteByte(INT_GEN_DUR_G, temp);
 5724              		.loc 1 1361 0 is_stmt 1
 5725 0068 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5726 006a 4FF03700 		mov	r0, #55
 5727 006e 1946     		mov	r1, r3
 5728 0070 FFF7FEFF 		bl	xgWriteByte
1362:../LSM9DS1_Driver.c **** }
 5729              		.loc 1 1362 0
 5730 0074 07F11007 		add	r7, r7, #16
 5731 0078 BD46     		mov	sp, r7
 5732 007a 80BD     		pop	{r7, pc}
 5733              		.cfi_endproc
 5734              	.LFE175:
 5736              		.section	.text.getGyroIntSrc,"ax",%progbits
 5737              		.align	2
 5738              		.global	getGyroIntSrc
 5739              		.thumb
 5740              		.thumb_func
 5742              	getGyroIntSrc:
 5743              	.LFB176:
1363:../LSM9DS1_Driver.c **** 
1364:../LSM9DS1_Driver.c **** 
1365:../LSM9DS1_Driver.c **** uint8_t getGyroIntSrc()
1366:../LSM9DS1_Driver.c **** {
 5744              		.loc 1 1366 0
 5745              		.cfi_startproc
 5746              		@ args = 0, pretend = 0, frame = 8
 5747              		@ frame_needed = 1, uses_anonymous_args = 0
 5748 0000 80B5     		push	{r7, lr}
 5749              	.LCFI169:
 5750              		.cfi_def_cfa_offset 8
 5751              		.cfi_offset 7, -8
 5752              		.cfi_offset 14, -4
 5753 0002 82B0     		sub	sp, sp, #8
 5754              	.LCFI170:
 5755              		.cfi_def_cfa_offset 16
 5756 0004 00AF     		add	r7, sp, #0
 5757              	.LCFI171:
 5758              		.cfi_def_cfa_register 7
1367:../LSM9DS1_Driver.c **** 	uint8_t intSrc = xgReadByte(INT_GEN_SRC_G);
 5759              		.loc 1 1367 0
 5760 0006 4FF01400 		mov	r0, #20
 5761 000a FFF7FEFF 		bl	xgReadByte
 5762 000e 0346     		mov	r3, r0
 5763 0010 FB71     		strb	r3, [r7, #7]
1368:../LSM9DS1_Driver.c **** 
1369:../LSM9DS1_Driver.c **** 	// Check if the IA_G (interrupt active) bit is set
1370:../LSM9DS1_Driver.c **** 	if (intSrc & (1<<6))
 5764              		.loc 1 1370 0
 5765 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5766 0014 03F04003 		and	r3, r3, #64
 5767 0018 002B     		cmp	r3, #0
 5768 001a 04D0     		beq	.L235
1371:../LSM9DS1_Driver.c **** 	{
1372:../LSM9DS1_Driver.c **** 		return (intSrc & 0x3F);
 5769              		.loc 1 1372 0
 5770 001c FB79     		ldrb	r3, [r7, #7]
 5771 001e 03F03F03 		and	r3, r3, #63
 5772 0022 DBB2     		uxtb	r3, r3
 5773 0024 01E0     		b	.L236
 5774              	.L235:
1373:../LSM9DS1_Driver.c **** 	}
1374:../LSM9DS1_Driver.c **** 
1375:../LSM9DS1_Driver.c **** 	return 0;
 5775              		.loc 1 1375 0
 5776 0026 4FF00003 		mov	r3, #0
 5777              	.L236:
1376:../LSM9DS1_Driver.c **** }
 5778              		.loc 1 1376 0
 5779 002a 1846     		mov	r0, r3
 5780 002c 07F10807 		add	r7, r7, #8
 5781 0030 BD46     		mov	sp, r7
 5782 0032 80BD     		pop	{r7, pc}
 5783              		.cfi_endproc
 5784              	.LFE176:
 5786              		.section	.text.configMagInt,"ax",%progbits
 5787              		.align	2
 5788              		.global	configMagInt
 5789              		.thumb
 5790              		.thumb_func
 5792              	configMagInt:
 5793              	.LFB177:
1377:../LSM9DS1_Driver.c **** 
1378:../LSM9DS1_Driver.c **** 
1379:../LSM9DS1_Driver.c **** void configMagInt(uint8_t generator, h_lactive activeLow, bool latch)
1380:../LSM9DS1_Driver.c **** {
 5794              		.loc 1 1380 0
 5795              		.cfi_startproc
 5796              		@ args = 0, pretend = 0, frame = 16
 5797              		@ frame_needed = 1, uses_anonymous_args = 0
 5798 0000 80B5     		push	{r7, lr}
 5799              	.LCFI172:
 5800              		.cfi_def_cfa_offset 8
 5801              		.cfi_offset 7, -8
 5802              		.cfi_offset 14, -4
 5803 0002 84B0     		sub	sp, sp, #16
 5804              	.LCFI173:
 5805              		.cfi_def_cfa_offset 24
 5806 0004 00AF     		add	r7, sp, #0
 5807              	.LCFI174:
 5808              		.cfi_def_cfa_register 7
 5809 0006 1346     		mov	r3, r2
 5810 0008 0246     		mov	r2, r0
 5811 000a FA71     		strb	r2, [r7, #7]
 5812 000c 0A46     		mov	r2, r1
 5813 000e BA71     		strb	r2, [r7, #6]
 5814 0010 7B71     		strb	r3, [r7, #5]
1381:../LSM9DS1_Driver.c **** 	// Mask out non-generator bits (0-4)
1382:../LSM9DS1_Driver.c **** 	uint8_t config = (generator & 0xE0);
 5815              		.loc 1 1382 0
 5816 0012 FB79     		ldrb	r3, [r7, #7]
 5817 0014 23F01F03 		bic	r3, r3, #31
 5818 0018 FB73     		strb	r3, [r7, #15]
1383:../LSM9DS1_Driver.c **** 	// IEA bit is 0 for active-low, 1 for active-high.
1384:../LSM9DS1_Driver.c **** 	if (activeLow == INT_ACTIVE_HIGH) config |= (1<<2);
 5819              		.loc 1 1384 0
 5820 001a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5821 001c 002B     		cmp	r3, #0
 5822 001e 03D1     		bne	.L238
 5823              		.loc 1 1384 0 is_stmt 0 discriminator 1
 5824 0020 FB7B     		ldrb	r3, [r7, #15]
 5825 0022 43F00403 		orr	r3, r3, #4
 5826 0026 FB73     		strb	r3, [r7, #15]
 5827              	.L238:
1385:../LSM9DS1_Driver.c **** 	// IEL bit is 0 for latched, 1 for not-latched
1386:../LSM9DS1_Driver.c **** 	if (!latch) config |= (1<<1);
 5828              		.loc 1 1386 0 is_stmt 1
 5829 0028 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 5830 002a 002B     		cmp	r3, #0
 5831 002c 03D1     		bne	.L239
 5832              		.loc 1 1386 0 is_stmt 0 discriminator 1
 5833 002e FB7B     		ldrb	r3, [r7, #15]
 5834 0030 43F00203 		orr	r3, r3, #2
 5835 0034 FB73     		strb	r3, [r7, #15]
 5836              	.L239:
1387:../LSM9DS1_Driver.c **** 	// As long as we have at least 1 generator, enable the interrupt
1388:../LSM9DS1_Driver.c **** 	if (generator != 0) config |= (1<<0);
 5837              		.loc 1 1388 0 is_stmt 1
 5838 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5839 0038 002B     		cmp	r3, #0
 5840 003a 03D0     		beq	.L240
 5841              		.loc 1 1388 0 is_stmt 0 discriminator 1
 5842 003c FB7B     		ldrb	r3, [r7, #15]
 5843 003e 43F00103 		orr	r3, r3, #1
 5844 0042 FB73     		strb	r3, [r7, #15]
 5845              	.L240:
1389:../LSM9DS1_Driver.c **** 
1390:../LSM9DS1_Driver.c **** 	mWriteByte(INT_CFG_M, config);
 5846              		.loc 1 1390 0 is_stmt 1
 5847 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5848 0046 4FF03000 		mov	r0, #48
 5849 004a 1946     		mov	r1, r3
 5850 004c FFF7FEFF 		bl	mWriteByte
1391:../LSM9DS1_Driver.c **** }
 5851              		.loc 1 1391 0
 5852 0050 07F11007 		add	r7, r7, #16
 5853 0054 BD46     		mov	sp, r7
 5854 0056 80BD     		pop	{r7, pc}
 5855              		.cfi_endproc
 5856              	.LFE177:
 5858              		.section	.text.configMagThs,"ax",%progbits
 5859              		.align	2
 5860              		.global	configMagThs
 5861              		.thumb
 5862              		.thumb_func
 5864              	configMagThs:
 5865              	.LFB178:
1392:../LSM9DS1_Driver.c **** 
1393:../LSM9DS1_Driver.c **** 
1394:../LSM9DS1_Driver.c **** void configMagThs(uint16_t threshold)
1395:../LSM9DS1_Driver.c **** {
 5866              		.loc 1 1395 0
 5867              		.cfi_startproc
 5868              		@ args = 0, pretend = 0, frame = 8
 5869              		@ frame_needed = 1, uses_anonymous_args = 0
 5870 0000 80B5     		push	{r7, lr}
 5871              	.LCFI175:
 5872              		.cfi_def_cfa_offset 8
 5873              		.cfi_offset 7, -8
 5874              		.cfi_offset 14, -4
 5875 0002 82B0     		sub	sp, sp, #8
 5876              	.LCFI176:
 5877              		.cfi_def_cfa_offset 16
 5878 0004 00AF     		add	r7, sp, #0
 5879              	.LCFI177:
 5880              		.cfi_def_cfa_register 7
 5881 0006 0346     		mov	r3, r0
 5882 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1396:../LSM9DS1_Driver.c **** 	// Write high eight bits of [threshold] to INT_THS_H_M
1397:../LSM9DS1_Driver.c **** 	mWriteByte(INT_THS_H_M, (uint8_t)((threshold & 0x7F00) >> 8));
 5883              		.loc 1 1397 0
 5884 000a FB88     		ldrh	r3, [r7, #6]
 5885 000c 03F4FE43 		and	r3, r3, #32512
 5886 0010 4FEA2323 		asr	r3, r3, #8
 5887 0014 DBB2     		uxtb	r3, r3
 5888 0016 4FF03300 		mov	r0, #51
 5889 001a 1946     		mov	r1, r3
 5890 001c FFF7FEFF 		bl	mWriteByte
1398:../LSM9DS1_Driver.c **** 	// Write low eight bits of [threshold] to INT_THS_L_M
1399:../LSM9DS1_Driver.c **** 	mWriteByte(INT_THS_L_M, (uint8_t)(threshold & 0x00FF));
 5891              		.loc 1 1399 0
 5892 0020 FB88     		ldrh	r3, [r7, #6]	@ movhi
 5893 0022 DBB2     		uxtb	r3, r3
 5894 0024 4FF03200 		mov	r0, #50
 5895 0028 1946     		mov	r1, r3
 5896 002a FFF7FEFF 		bl	mWriteByte
1400:../LSM9DS1_Driver.c **** }
 5897              		.loc 1 1400 0
 5898 002e 07F10807 		add	r7, r7, #8
 5899 0032 BD46     		mov	sp, r7
 5900 0034 80BD     		pop	{r7, pc}
 5901              		.cfi_endproc
 5902              	.LFE178:
 5904 0036 00BF     		.section	.text.getMagIntSrc,"ax",%progbits
 5905              		.align	2
 5906              		.global	getMagIntSrc
 5907              		.thumb
 5908              		.thumb_func
 5910              	getMagIntSrc:
 5911              	.LFB179:
1401:../LSM9DS1_Driver.c **** 
1402:../LSM9DS1_Driver.c **** uint8_t getMagIntSrc(void)
1403:../LSM9DS1_Driver.c **** {
 5912              		.loc 1 1403 0
 5913              		.cfi_startproc
 5914              		@ args = 0, pretend = 0, frame = 8
 5915              		@ frame_needed = 1, uses_anonymous_args = 0
 5916 0000 80B5     		push	{r7, lr}
 5917              	.LCFI178:
 5918              		.cfi_def_cfa_offset 8
 5919              		.cfi_offset 7, -8
 5920              		.cfi_offset 14, -4
 5921 0002 82B0     		sub	sp, sp, #8
 5922              	.LCFI179:
 5923              		.cfi_def_cfa_offset 16
 5924 0004 00AF     		add	r7, sp, #0
 5925              	.LCFI180:
 5926              		.cfi_def_cfa_register 7
1404:../LSM9DS1_Driver.c **** 	uint8_t intSrc = mReadByte(INT_SRC_M);
 5927              		.loc 1 1404 0
 5928 0006 4FF03000 		mov	r0, #48
 5929 000a FFF7FEFF 		bl	mReadByte
 5930 000e 0346     		mov	r3, r0
 5931 0010 FB71     		strb	r3, [r7, #7]
1405:../LSM9DS1_Driver.c **** 
1406:../LSM9DS1_Driver.c **** 	// Check if the INT (interrupt active) bit is set
1407:../LSM9DS1_Driver.c **** 	if (intSrc & (1<<0))
 5932              		.loc 1 1407 0
 5933 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5934 0014 03F00103 		and	r3, r3, #1
 5935 0018 002B     		cmp	r3, #0
 5936 001a 04D0     		beq	.L243
1408:../LSM9DS1_Driver.c **** 	{
1409:../LSM9DS1_Driver.c **** 		return (intSrc & 0xFE);
 5937              		.loc 1 1409 0
 5938 001c FB79     		ldrb	r3, [r7, #7]
 5939 001e 23F00103 		bic	r3, r3, #1
 5940 0022 DBB2     		uxtb	r3, r3
 5941 0024 01E0     		b	.L244
 5942              	.L243:
1410:../LSM9DS1_Driver.c **** 	}
1411:../LSM9DS1_Driver.c **** 
1412:../LSM9DS1_Driver.c **** 	return 0;
 5943              		.loc 1 1412 0
 5944 0026 4FF00003 		mov	r3, #0
 5945              	.L244:
1413:../LSM9DS1_Driver.c **** }
 5946              		.loc 1 1413 0
 5947 002a 1846     		mov	r0, r3
 5948 002c 07F10807 		add	r7, r7, #8
 5949 0030 BD46     		mov	sp, r7
 5950 0032 80BD     		pop	{r7, pc}
 5951              		.cfi_endproc
 5952              	.LFE179:
 5954              		.section	.text.sleepGyro,"ax",%progbits
 5955              		.align	2
 5956              		.global	sleepGyro
 5957              		.thumb
 5958              		.thumb_func
 5960              	sleepGyro:
 5961              	.LFB180:
1414:../LSM9DS1_Driver.c **** 
1415:../LSM9DS1_Driver.c **** void sleepGyro(bool enable)
1416:../LSM9DS1_Driver.c **** {
 5962              		.loc 1 1416 0
 5963              		.cfi_startproc
 5964              		@ args = 0, pretend = 0, frame = 16
 5965              		@ frame_needed = 1, uses_anonymous_args = 0
 5966 0000 80B5     		push	{r7, lr}
 5967              	.LCFI181:
 5968              		.cfi_def_cfa_offset 8
 5969              		.cfi_offset 7, -8
 5970              		.cfi_offset 14, -4
 5971 0002 84B0     		sub	sp, sp, #16
 5972              	.LCFI182:
 5973              		.cfi_def_cfa_offset 24
 5974 0004 00AF     		add	r7, sp, #0
 5975              	.LCFI183:
 5976              		.cfi_def_cfa_register 7
 5977 0006 0346     		mov	r3, r0
 5978 0008 FB71     		strb	r3, [r7, #7]
1417:../LSM9DS1_Driver.c **** 	uint8_t temp = xgReadByte(CTRL_REG9);
 5979              		.loc 1 1417 0
 5980 000a 4FF02300 		mov	r0, #35
 5981 000e FFF7FEFF 		bl	xgReadByte
 5982 0012 0346     		mov	r3, r0
 5983 0014 FB73     		strb	r3, [r7, #15]
1418:../LSM9DS1_Driver.c **** 	if (enable) temp |= (1<<6);
 5984              		.loc 1 1418 0
 5985 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5986 0018 002B     		cmp	r3, #0
 5987 001a 04D0     		beq	.L246
 5988              		.loc 1 1418 0 is_stmt 0 discriminator 1
 5989 001c FB7B     		ldrb	r3, [r7, #15]
 5990 001e 43F04003 		orr	r3, r3, #64
 5991 0022 FB73     		strb	r3, [r7, #15]
 5992 0024 03E0     		b	.L247
 5993              	.L246:
1419:../LSM9DS1_Driver.c **** 	else temp &= ~(1<<6);
 5994              		.loc 1 1419 0 is_stmt 1
 5995 0026 FB7B     		ldrb	r3, [r7, #15]
 5996 0028 23F04003 		bic	r3, r3, #64
 5997 002c FB73     		strb	r3, [r7, #15]
 5998              	.L247:
1420:../LSM9DS1_Driver.c **** 	xgWriteByte(CTRL_REG9, temp);
 5999              		.loc 1 1420 0
 6000 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6001 0030 4FF02300 		mov	r0, #35
 6002 0034 1946     		mov	r1, r3
 6003 0036 FFF7FEFF 		bl	xgWriteByte
1421:../LSM9DS1_Driver.c **** }
 6004              		.loc 1 1421 0
 6005 003a 07F11007 		add	r7, r7, #16
 6006 003e BD46     		mov	sp, r7
 6007 0040 80BD     		pop	{r7, pc}
 6008              		.cfi_endproc
 6009              	.LFE180:
 6011 0042 00BF     		.section	.text.getFIFOSamples,"ax",%progbits
 6012              		.align	2
 6013              		.global	getFIFOSamples
 6014              		.thumb
 6015              		.thumb_func
 6017              	getFIFOSamples:
 6018              	.LFB181:
1422:../LSM9DS1_Driver.c **** 
1423:../LSM9DS1_Driver.c **** 
1424:../LSM9DS1_Driver.c **** uint8_t getFIFOSamples(void)
1425:../LSM9DS1_Driver.c **** {
 6019              		.loc 1 1425 0
 6020              		.cfi_startproc
 6021              		@ args = 0, pretend = 0, frame = 0
 6022              		@ frame_needed = 1, uses_anonymous_args = 0
 6023 0000 80B5     		push	{r7, lr}
 6024              	.LCFI184:
 6025              		.cfi_def_cfa_offset 8
 6026              		.cfi_offset 7, -8
 6027              		.cfi_offset 14, -4
 6028 0002 00AF     		add	r7, sp, #0
 6029              	.LCFI185:
 6030              		.cfi_def_cfa_register 7
1426:../LSM9DS1_Driver.c **** 	return (xgReadByte(FIFO_SRC) & 0x3F);
 6031              		.loc 1 1426 0
 6032 0004 4FF02F00 		mov	r0, #47
 6033 0008 FFF7FEFF 		bl	xgReadByte
 6034 000c 0346     		mov	r3, r0
 6035 000e 03F03F03 		and	r3, r3, #63
 6036 0012 DBB2     		uxtb	r3, r3
1427:../LSM9DS1_Driver.c **** }
 6037              		.loc 1 1427 0
 6038 0014 1846     		mov	r0, r3
 6039 0016 80BD     		pop	{r7, pc}
 6040              		.cfi_endproc
 6041              	.LFE181:
 6043              		.section	.text.timerHandlerReceiveOneMeasurementEachSensor,"ax",%progbits
 6044              		.align	2
 6045              		.global	timerHandlerReceiveOneMeasurementEachSensor
 6046              		.thumb
 6047              		.thumb_func
 6049              	timerHandlerReceiveOneMeasurementEachSensor:
 6050              	.LFB182:
1428:../LSM9DS1_Driver.c **** 
1429:../LSM9DS1_Driver.c **** 
1430:../LSM9DS1_Driver.c **** void timerHandlerReceiveOneMeasurementEachSensor(void *T)
1431:../LSM9DS1_Driver.c **** {
 6051              		.loc 1 1431 0
 6052              		.cfi_startproc
 6053              		@ args = 0, pretend = 0, frame = 16
 6054              		@ frame_needed = 1, uses_anonymous_args = 0
 6055 0000 80B5     		push	{r7, lr}
 6056              	.LCFI186:
 6057              		.cfi_def_cfa_offset 8
 6058              		.cfi_offset 7, -8
 6059              		.cfi_offset 14, -4
 6060 0002 84B0     		sub	sp, sp, #16
 6061              	.LCFI187:
 6062              		.cfi_def_cfa_offset 24
 6063 0004 00AF     		add	r7, sp, #0
 6064              	.LCFI188:
 6065              		.cfi_def_cfa_register 7
 6066 0006 7860     		str	r0, [r7, #4]
1432:../LSM9DS1_Driver.c **** 	static volatile uint32_t stageOfReading = 0;
1433:../LSM9DS1_Driver.c **** 	static uint8_t whichByte = 0;
1434:../LSM9DS1_Driver.c **** 	static uint8_t whichDevice = 0;
1435:../LSM9DS1_Driver.c **** 	addressAndData *address = (addressAndData*)T;
 6067              		.loc 1 1435 0
 6068 0008 7B68     		ldr	r3, [r7, #4]
 6069 000a FB60     		str	r3, [r7, #12]
1436:../LSM9DS1_Driver.c **** 
1437:../LSM9DS1_Driver.c **** 	if(readingAllowed == TRUE)
 6070              		.loc 1 1437 0
 6071 000c 40F20003 		movw	r3, #:lower16:readingAllowed
 6072 0010 C0F20003 		movt	r3, #:upper16:readingAllowed
 6073 0014 1B78     		ldrb	r3, [r3, #0]
 6074 0016 DBB2     		uxtb	r3, r3
 6075 0018 012B     		cmp	r3, #1
 6076 001a 40F0F980 		bne	.L250
1438:../LSM9DS1_Driver.c **** 	{
1439:../LSM9DS1_Driver.c **** 		if(0 == whichDevice) //accel
 6077              		.loc 1 1439 0
 6078 001e 40F20003 		movw	r3, #:lower16:whichDevice.9577
 6079 0022 C0F20003 		movt	r3, #:upper16:whichDevice.9577
 6080 0026 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6081 0028 002B     		cmp	r3, #0
 6082 002a 47D1     		bne	.L252
1440:../LSM9DS1_Driver.c **** 		{
1441:../LSM9DS1_Driver.c **** 			receiveByte(address->adr.addressDevice[0], (address->adr.subAddress[0] + whichByte), &(address->
 6083              		.loc 1 1441 0
 6084 002c FB68     		ldr	r3, [r7, #12]
 6085 002e 997C     		ldrb	r1, [r3, #18]	@ zero_extendqisi2
 6086 0030 FB68     		ldr	r3, [r7, #12]
 6087 0032 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 6088 0034 40F20003 		movw	r3, #:lower16:whichByte.9576
 6089 0038 C0F20003 		movt	r3, #:upper16:whichByte.9576
 6090 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6091 003e D318     		adds	r3, r2, r3
 6092 0040 DAB2     		uxtb	r2, r3
 6093 0042 40F20003 		movw	r3, #:lower16:whichByte.9576
 6094 0046 C0F20003 		movt	r3, #:upper16:whichByte.9576
 6095 004a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6096 004c F868     		ldr	r0, [r7, #12]
 6097 004e C318     		adds	r3, r0, r3
 6098 0050 0846     		mov	r0, r1
 6099 0052 1146     		mov	r1, r2
 6100 0054 1A46     		mov	r2, r3
 6101 0056 FFF7FEFF 		bl	receiveByte
1442:../LSM9DS1_Driver.c **** 			whichByte++;
 6102              		.loc 1 1442 0
 6103 005a 40F20003 		movw	r3, #:lower16:whichByte.9576
 6104 005e C0F20003 		movt	r3, #:upper16:whichByte.9576
 6105 0062 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6106 0064 03F10103 		add	r3, r3, #1
 6107 0068 DAB2     		uxtb	r2, r3
 6108 006a 40F20003 		movw	r3, #:lower16:whichByte.9576
 6109 006e C0F20003 		movt	r3, #:upper16:whichByte.9576
 6110 0072 1A70     		strb	r2, [r3, #0]
1443:../LSM9DS1_Driver.c **** 
1444:../LSM9DS1_Driver.c **** 			if(whichByte == 6)
 6111              		.loc 1 1444 0
 6112 0074 40F20003 		movw	r3, #:lower16:whichByte.9576
 6113 0078 C0F20003 		movt	r3, #:upper16:whichByte.9576
 6114 007c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6115 007e 062B     		cmp	r3, #6
 6116 0080 40F0C680 		bne	.L250
1445:../LSM9DS1_Driver.c **** 			{
1446:../LSM9DS1_Driver.c **** 				//readingAllowed = FALSE;
1447:../LSM9DS1_Driver.c **** 
1448:../LSM9DS1_Driver.c **** 				whichDevice++;
 6117              		.loc 1 1448 0
 6118 0084 40F20003 		movw	r3, #:lower16:whichDevice.9577
 6119 0088 C0F20003 		movt	r3, #:upper16:whichDevice.9577
 6120 008c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6121 008e 03F10103 		add	r3, r3, #1
 6122 0092 DAB2     		uxtb	r2, r3
 6123 0094 40F20003 		movw	r3, #:lower16:whichDevice.9577
 6124 0098 C0F20003 		movt	r3, #:upper16:whichDevice.9577
 6125 009c 1A70     		strb	r2, [r3, #0]
1449:../LSM9DS1_Driver.c **** 
1450:../LSM9DS1_Driver.c **** 				whichByte = 0;
 6126              		.loc 1 1450 0
 6127 009e 40F20003 		movw	r3, #:lower16:whichByte.9576
 6128 00a2 C0F20003 		movt	r3, #:upper16:whichByte.9576
 6129 00a6 4FF00002 		mov	r2, #0
 6130 00aa 1A70     		strb	r2, [r3, #0]
1451:../LSM9DS1_Driver.c **** 				stageOfReading = 0;
 6131              		.loc 1 1451 0
 6132 00ac 40F20003 		movw	r3, #:lower16:stageOfReading.9575
 6133 00b0 C0F20003 		movt	r3, #:upper16:stageOfReading.9575
 6134 00b4 4FF00002 		mov	r2, #0
 6135 00b8 1A60     		str	r2, [r3, #0]
 6136 00ba A9E0     		b	.L250
 6137              	.L252:
1452:../LSM9DS1_Driver.c **** 			}
1453:../LSM9DS1_Driver.c **** 		}
1454:../LSM9DS1_Driver.c **** 		else if(1 == whichDevice) //gyro
 6138              		.loc 1 1454 0
 6139 00bc 40F20003 		movw	r3, #:lower16:whichDevice.9577
 6140 00c0 C0F20003 		movt	r3, #:upper16:whichDevice.9577
 6141 00c4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6142 00c6 012B     		cmp	r3, #1
 6143 00c8 4DD1     		bne	.L253
1455:../LSM9DS1_Driver.c **** 		{
1456:../LSM9DS1_Driver.c **** 			receiveByte(address->adr.addressDevice[0], (address->adr.subAddress[1] + whichByte), &(address->
 6144              		.loc 1 1456 0
 6145 00ca FB68     		ldr	r3, [r7, #12]
 6146 00cc 997C     		ldrb	r1, [r3, #18]	@ zero_extendqisi2
 6147 00ce FB68     		ldr	r3, [r7, #12]
 6148 00d0 5A7D     		ldrb	r2, [r3, #21]	@ zero_extendqisi2
 6149 00d2 40F20003 		movw	r3, #:lower16:whichByte.9576
 6150 00d6 C0F20003 		movt	r3, #:upper16:whichByte.9576
 6151 00da 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6152 00dc D318     		adds	r3, r2, r3
 6153 00de DAB2     		uxtb	r2, r3
 6154 00e0 40F20003 		movw	r3, #:lower16:whichByte.9576
 6155 00e4 C0F20003 		movt	r3, #:upper16:whichByte.9576
 6156 00e8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6157 00ea 03F10603 		add	r3, r3, #6
 6158 00ee F868     		ldr	r0, [r7, #12]
 6159 00f0 C318     		adds	r3, r0, r3
 6160 00f2 0846     		mov	r0, r1
 6161 00f4 1146     		mov	r1, r2
 6162 00f6 1A46     		mov	r2, r3
 6163 00f8 FFF7FEFF 		bl	receiveByte
1457:../LSM9DS1_Driver.c **** 			whichByte++;
 6164              		.loc 1 1457 0
 6165 00fc 40F20003 		movw	r3, #:lower16:whichByte.9576
 6166 0100 C0F20003 		movt	r3, #:upper16:whichByte.9576
 6167 0104 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6168 0106 03F10103 		add	r3, r3, #1
 6169 010a DAB2     		uxtb	r2, r3
 6170 010c 40F20003 		movw	r3, #:lower16:whichByte.9576
 6171 0110 C0F20003 		movt	r3, #:upper16:whichByte.9576
 6172 0114 1A70     		strb	r2, [r3, #0]
1458:../LSM9DS1_Driver.c **** 
1459:../LSM9DS1_Driver.c **** 			if(whichByte == 6)
 6173              		.loc 1 1459 0
 6174 0116 40F20003 		movw	r3, #:lower16:whichByte.9576
 6175 011a C0F20003 		movt	r3, #:upper16:whichByte.9576
 6176 011e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6177 0120 062B     		cmp	r3, #6
 6178 0122 75D1     		bne	.L250
1460:../LSM9DS1_Driver.c **** 			{
1461:../LSM9DS1_Driver.c **** 				//readingAllowed = FALSE;
1462:../LSM9DS1_Driver.c **** 
1463:../LSM9DS1_Driver.c **** 				whichDevice++;
 6179              		.loc 1 1463 0
 6180 0124 40F20003 		movw	r3, #:lower16:whichDevice.9577
 6181 0128 C0F20003 		movt	r3, #:upper16:whichDevice.9577
 6182 012c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6183 012e 03F10103 		add	r3, r3, #1
 6184 0132 DAB2     		uxtb	r2, r3
 6185 0134 40F20003 		movw	r3, #:lower16:whichDevice.9577
 6186 0138 C0F20003 		movt	r3, #:upper16:whichDevice.9577
 6187 013c 1A70     		strb	r2, [r3, #0]
1464:../LSM9DS1_Driver.c **** 
1465:../LSM9DS1_Driver.c **** 				whichByte = 0;
 6188              		.loc 1 1465 0
 6189 013e 40F20003 		movw	r3, #:lower16:whichByte.9576
 6190 0142 C0F20003 		movt	r3, #:upper16:whichByte.9576
 6191 0146 4FF00002 		mov	r2, #0
 6192 014a 1A70     		strb	r2, [r3, #0]
1466:../LSM9DS1_Driver.c **** 				stageOfReading++;
 6193              		.loc 1 1466 0
 6194 014c 40F20003 		movw	r3, #:lower16:stageOfReading.9575
 6195 0150 C0F20003 		movt	r3, #:upper16:stageOfReading.9575
 6196 0154 1B68     		ldr	r3, [r3, #0]
 6197 0156 03F10102 		add	r2, r3, #1
 6198 015a 40F20003 		movw	r3, #:lower16:stageOfReading.9575
 6199 015e C0F20003 		movt	r3, #:upper16:stageOfReading.9575
 6200 0162 1A60     		str	r2, [r3, #0]
 6201 0164 54E0     		b	.L250
 6202              	.L253:
1467:../LSM9DS1_Driver.c **** 			}
1468:../LSM9DS1_Driver.c **** 		}
1469:../LSM9DS1_Driver.c **** 		else if(2 == whichDevice)
 6203              		.loc 1 1469 0
 6204 0166 40F20003 		movw	r3, #:lower16:whichDevice.9577
 6205 016a C0F20003 		movt	r3, #:upper16:whichDevice.9577
 6206 016e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6207 0170 022B     		cmp	r3, #2
 6208 0172 4DD1     		bne	.L250
1470:../LSM9DS1_Driver.c **** 		{
1471:../LSM9DS1_Driver.c **** 			receiveByte(address->adr.addressDevice[1], (address->adr.subAddress[2] + whichByte), &(address->
 6209              		.loc 1 1471 0
 6210 0174 FB68     		ldr	r3, [r7, #12]
 6211 0176 D97C     		ldrb	r1, [r3, #19]	@ zero_extendqisi2
 6212 0178 FB68     		ldr	r3, [r7, #12]
 6213 017a 9A7D     		ldrb	r2, [r3, #22]	@ zero_extendqisi2
 6214 017c 40F20003 		movw	r3, #:lower16:whichByte.9576
 6215 0180 C0F20003 		movt	r3, #:upper16:whichByte.9576
 6216 0184 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6217 0186 D318     		adds	r3, r2, r3
 6218 0188 DAB2     		uxtb	r2, r3
 6219 018a 40F20003 		movw	r3, #:lower16:whichByte.9576
 6220 018e C0F20003 		movt	r3, #:upper16:whichByte.9576
 6221 0192 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6222 0194 03F10C03 		add	r3, r3, #12
 6223 0198 F868     		ldr	r0, [r7, #12]
 6224 019a C318     		adds	r3, r0, r3
 6225 019c 0846     		mov	r0, r1
 6226 019e 1146     		mov	r1, r2
 6227 01a0 1A46     		mov	r2, r3
 6228 01a2 FFF7FEFF 		bl	receiveByte
1472:../LSM9DS1_Driver.c **** 			whichByte++;
 6229              		.loc 1 1472 0
 6230 01a6 40F20003 		movw	r3, #:lower16:whichByte.9576
 6231 01aa C0F20003 		movt	r3, #:upper16:whichByte.9576
 6232 01ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6233 01b0 03F10103 		add	r3, r3, #1
 6234 01b4 DAB2     		uxtb	r2, r3
 6235 01b6 40F20003 		movw	r3, #:lower16:whichByte.9576
 6236 01ba C0F20003 		movt	r3, #:upper16:whichByte.9576
 6237 01be 1A70     		strb	r2, [r3, #0]
1473:../LSM9DS1_Driver.c **** 
1474:../LSM9DS1_Driver.c **** 			if(whichByte == 6)
 6238              		.loc 1 1474 0
 6239 01c0 40F20003 		movw	r3, #:lower16:whichByte.9576
 6240 01c4 C0F20003 		movt	r3, #:upper16:whichByte.9576
 6241 01c8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6242 01ca 062B     		cmp	r3, #6
 6243 01cc 20D1     		bne	.L250
1475:../LSM9DS1_Driver.c **** 			{
1476:../LSM9DS1_Driver.c **** 				readingAllowed = FALSE;
 6244              		.loc 1 1476 0
 6245 01ce 40F20003 		movw	r3, #:lower16:readingAllowed
 6246 01d2 C0F20003 		movt	r3, #:upper16:readingAllowed
 6247 01d6 4FF00002 		mov	r2, #0
 6248 01da 1A70     		strb	r2, [r3, #0]
1477:../LSM9DS1_Driver.c **** 
1478:../LSM9DS1_Driver.c **** 				whichDevice = 0;
 6249              		.loc 1 1478 0
 6250 01dc 40F20003 		movw	r3, #:lower16:whichDevice.9577
 6251 01e0 C0F20003 		movt	r3, #:upper16:whichDevice.9577
 6252 01e4 4FF00002 		mov	r2, #0
 6253 01e8 1A70     		strb	r2, [r3, #0]
1479:../LSM9DS1_Driver.c **** 
1480:../LSM9DS1_Driver.c **** 				whichByte = 0;
 6254              		.loc 1 1480 0
 6255 01ea 40F20003 		movw	r3, #:lower16:whichByte.9576
 6256 01ee C0F20003 		movt	r3, #:upper16:whichByte.9576
 6257 01f2 4FF00002 		mov	r2, #0
 6258 01f6 1A70     		strb	r2, [r3, #0]
1481:../LSM9DS1_Driver.c **** 				stageOfReading++;
 6259              		.loc 1 1481 0
 6260 01f8 40F20003 		movw	r3, #:lower16:stageOfReading.9575
 6261 01fc C0F20003 		movt	r3, #:upper16:stageOfReading.9575
 6262 0200 1B68     		ldr	r3, [r3, #0]
 6263 0202 03F10102 		add	r2, r3, #1
 6264 0206 40F20003 		movw	r3, #:lower16:stageOfReading.9575
 6265 020a C0F20003 		movt	r3, #:upper16:stageOfReading.9575
 6266 020e 1A60     		str	r2, [r3, #0]
 6267              	.L250:
1482:../LSM9DS1_Driver.c **** 			}
1483:../LSM9DS1_Driver.c **** 		}
1484:../LSM9DS1_Driver.c **** 
1485:../LSM9DS1_Driver.c **** 	}
1486:../LSM9DS1_Driver.c **** }
 6268              		.loc 1 1486 0
 6269 0210 07F11007 		add	r7, r7, #16
 6270 0214 BD46     		mov	sp, r7
 6271 0216 80BD     		pop	{r7, pc}
 6272              		.cfi_endproc
 6273              	.LFE182:
 6275              		.section	.text.receiveByte,"ax",%progbits
 6276              		.align	2
 6277              		.global	receiveByte
 6278              		.thumb
 6279              		.thumb_func
 6281              	receiveByte:
 6282              	.LFB183:
1487:../LSM9DS1_Driver.c **** 
1488:../LSM9DS1_Driver.c **** void receiveByte(uint8_t adr, uint8_t subAdr, uint8_t *buffer)
1489:../LSM9DS1_Driver.c **** {
 6283              		.loc 1 1489 0
 6284              		.cfi_startproc
 6285              		@ args = 0, pretend = 0, frame = 40
 6286              		@ frame_needed = 1, uses_anonymous_args = 0
 6287 0000 80B5     		push	{r7, lr}
 6288              	.LCFI189:
 6289              		.cfi_def_cfa_offset 8
 6290              		.cfi_offset 7, -8
 6291              		.cfi_offset 14, -4
 6292 0002 8AB0     		sub	sp, sp, #40
 6293              	.LCFI190:
 6294              		.cfi_def_cfa_offset 48
 6295 0004 00AF     		add	r7, sp, #0
 6296              	.LCFI191:
 6297              		.cfi_def_cfa_register 7
 6298 0006 0B46     		mov	r3, r1
 6299 0008 3A60     		str	r2, [r7, #0]
 6300 000a 0246     		mov	r2, r0
 6301 000c FA71     		strb	r2, [r7, #7]
 6302 000e BB71     		strb	r3, [r7, #6]
1490:../LSM9DS1_Driver.c **** 	clearErrorFlags();
 6303              		.loc 1 1490 0
 6304 0010 FFF7FEFF 		bl	clearErrorFlags
1491:../LSM9DS1_Driver.c **** 
1492:../LSM9DS1_Driver.c **** 	I2C001_DataType data1;
1493:../LSM9DS1_Driver.c **** 	data1.Data1.TDF_Type = I2C_TDF_MStart;
 6305              		.loc 1 1493 0
 6306 0014 4FF00403 		mov	r3, #4
 6307 0018 87F82130 		strb	r3, [r7, #33]
1494:../LSM9DS1_Driver.c **** 
1495:../LSM9DS1_Driver.c **** 	data1.Data1.Data = ((adr << 1) | I2C_WRITE);
 6308              		.loc 1 1495 0
 6309 001c FB79     		ldrb	r3, [r7, #7]
 6310 001e 4FEA4303 		lsl	r3, r3, #1
 6311 0022 DBB2     		uxtb	r3, r3
 6312 0024 87F82030 		strb	r3, [r7, #32]
1496:../LSM9DS1_Driver.c **** 	while(!I2C001_WriteData(&I2C001_Handle0,&data1))
 6313              		.loc 1 1496 0
 6314 0028 01E0     		b	.L255
 6315              	.L256:
1497:../LSM9DS1_Driver.c **** 	{
1498:../LSM9DS1_Driver.c **** 		flushFIFO();
 6316              		.loc 1 1498 0
 6317 002a FFF7FEFF 		bl	flushFIFO
 6318              	.L255:
1496:../LSM9DS1_Driver.c **** 	while(!I2C001_WriteData(&I2C001_Handle0,&data1))
 6319              		.loc 1 1496 0 discriminator 1
 6320 002e 07F12003 		add	r3, r7, #32
 6321 0032 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 6322 0036 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 6323 003a 1946     		mov	r1, r3
 6324 003c FFF7FEFF 		bl	I2C001_WriteData
 6325 0040 0346     		mov	r3, r0
 6326 0042 002B     		cmp	r3, #0
 6327 0044 F1D0     		beq	.L256
1499:../LSM9DS1_Driver.c **** 	}
1500:../LSM9DS1_Driver.c **** 
1501:../LSM9DS1_Driver.c **** 	delay(DELAY);
 6328              		.loc 1 1501 0
 6329 0046 4FF06400 		mov	r0, #100
 6330 004a FFF7FEFF 		bl	delay
1502:../LSM9DS1_Driver.c **** 
1503:../LSM9DS1_Driver.c **** 	I2C001_DataType data2;
1504:../LSM9DS1_Driver.c **** 	data2.Data1.TDF_Type = I2C_TDF_MTxData;
 6331              		.loc 1 1504 0
 6332 004e 4FF00003 		mov	r3, #0
 6333 0052 7B77     		strb	r3, [r7, #29]
1505:../LSM9DS1_Driver.c **** 
1506:../LSM9DS1_Driver.c **** 	data2.Data1.Data = subAdr;
 6334              		.loc 1 1506 0
 6335 0054 BB79     		ldrb	r3, [r7, #6]
 6336 0056 3B77     		strb	r3, [r7, #28]
1507:../LSM9DS1_Driver.c **** 	while(!I2C001_WriteData(&I2C001_Handle0,&data2))
 6337              		.loc 1 1507 0
 6338 0058 01E0     		b	.L257
 6339              	.L258:
1508:../LSM9DS1_Driver.c **** 	{
1509:../LSM9DS1_Driver.c **** 		flushFIFO();
 6340              		.loc 1 1509 0
 6341 005a FFF7FEFF 		bl	flushFIFO
 6342              	.L257:
1507:../LSM9DS1_Driver.c **** 	while(!I2C001_WriteData(&I2C001_Handle0,&data2))
 6343              		.loc 1 1507 0 discriminator 1
 6344 005e 07F11C03 		add	r3, r7, #28
 6345 0062 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 6346 0066 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 6347 006a 1946     		mov	r1, r3
 6348 006c FFF7FEFF 		bl	I2C001_WriteData
 6349 0070 0346     		mov	r3, r0
 6350 0072 002B     		cmp	r3, #0
 6351 0074 F1D0     		beq	.L258
1510:../LSM9DS1_Driver.c **** 	}
1511:../LSM9DS1_Driver.c **** 
1512:../LSM9DS1_Driver.c **** 	delay(DELAY);
 6352              		.loc 1 1512 0
 6353 0076 4FF06400 		mov	r0, #100
 6354 007a FFF7FEFF 		bl	delay
1513:../LSM9DS1_Driver.c **** 
1514:../LSM9DS1_Driver.c **** 	I2C001_DataType data3;
1515:../LSM9DS1_Driver.c **** 	data3.Data1.TDF_Type = I2C_TDF_MRStart;
 6355              		.loc 1 1515 0
 6356 007e 4FF00503 		mov	r3, #5
 6357 0082 7B76     		strb	r3, [r7, #25]
1516:../LSM9DS1_Driver.c **** 	//uint8_t adr1 = address->adr.addressDevice;
1517:../LSM9DS1_Driver.c **** 	data3.Data1.Data = ((adr << 1) | I2C_READ);
 6358              		.loc 1 1517 0
 6359 0084 FB79     		ldrb	r3, [r7, #7]
 6360 0086 4FEA4303 		lsl	r3, r3, #1
 6361 008a DBB2     		uxtb	r3, r3
 6362 008c 43F00103 		orr	r3, r3, #1
 6363 0090 DBB2     		uxtb	r3, r3
 6364 0092 3B76     		strb	r3, [r7, #24]
1518:../LSM9DS1_Driver.c **** 	while(!I2C001_WriteData(&I2C001_Handle0,&data3))
 6365              		.loc 1 1518 0
 6366 0094 01E0     		b	.L259
 6367              	.L260:
1519:../LSM9DS1_Driver.c **** 	{
1520:../LSM9DS1_Driver.c **** 		flushFIFO();
 6368              		.loc 1 1520 0
 6369 0096 FFF7FEFF 		bl	flushFIFO
 6370              	.L259:
1518:../LSM9DS1_Driver.c **** 	while(!I2C001_WriteData(&I2C001_Handle0,&data3))
 6371              		.loc 1 1518 0 discriminator 1
 6372 009a 07F11803 		add	r3, r7, #24
 6373 009e 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 6374 00a2 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 6375 00a6 1946     		mov	r1, r3
 6376 00a8 FFF7FEFF 		bl	I2C001_WriteData
 6377 00ac 0346     		mov	r3, r0
 6378 00ae 002B     		cmp	r3, #0
 6379 00b0 F1D0     		beq	.L260
1521:../LSM9DS1_Driver.c **** 	}
1522:../LSM9DS1_Driver.c **** 
1523:../LSM9DS1_Driver.c **** 	delay(DELAY);
 6380              		.loc 1 1523 0
 6381 00b2 4FF06400 		mov	r0, #100
 6382 00b6 FFF7FEFF 		bl	delay
1524:../LSM9DS1_Driver.c **** 
1525:../LSM9DS1_Driver.c **** 	I2C001_DataType data4;
1526:../LSM9DS1_Driver.c **** 	data4.Data1.TDF_Type = I2C_TDF_MRxAck1;
 6383              		.loc 1 1526 0
 6384 00ba 4FF00303 		mov	r3, #3
 6385 00be 7B75     		strb	r3, [r7, #21]
1527:../LSM9DS1_Driver.c **** 	data4.Data1.Data = ubyteFF;
 6386              		.loc 1 1527 0
 6387 00c0 4FF0FF03 		mov	r3, #255
 6388 00c4 3B75     		strb	r3, [r7, #20]
1528:../LSM9DS1_Driver.c **** 	while(!I2C001_WriteData(&I2C001_Handle0,&data4))
 6389              		.loc 1 1528 0
 6390 00c6 01E0     		b	.L261
 6391              	.L262:
1529:../LSM9DS1_Driver.c **** 	{
1530:../LSM9DS1_Driver.c **** 		flushFIFO();
 6392              		.loc 1 1530 0
 6393 00c8 FFF7FEFF 		bl	flushFIFO
 6394              	.L261:
1528:../LSM9DS1_Driver.c **** 	while(!I2C001_WriteData(&I2C001_Handle0,&data4))
 6395              		.loc 1 1528 0 discriminator 1
 6396 00cc 07F11403 		add	r3, r7, #20
 6397 00d0 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 6398 00d4 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 6399 00d8 1946     		mov	r1, r3
 6400 00da FFF7FEFF 		bl	I2C001_WriteData
 6401 00de 0346     		mov	r3, r0
 6402 00e0 002B     		cmp	r3, #0
 6403 00e2 F1D0     		beq	.L262
1531:../LSM9DS1_Driver.c **** 	}
1532:../LSM9DS1_Driver.c **** 
1533:../LSM9DS1_Driver.c **** 	delay(DELAY);
 6404              		.loc 1 1533 0
 6405 00e4 4FF06400 		mov	r0, #100
 6406 00e8 FFF7FEFF 		bl	delay
1534:../LSM9DS1_Driver.c **** 
1535:../LSM9DS1_Driver.c **** 	I2C001_DataType data5;
1536:../LSM9DS1_Driver.c **** 	data5.Data1.TDF_Type = I2C_TDF_MStop;
 6407              		.loc 1 1536 0
 6408 00ec 4FF00603 		mov	r3, #6
 6409 00f0 7B74     		strb	r3, [r7, #17]
1537:../LSM9DS1_Driver.c **** 	data5.Data1.Data = ubyteFF;
 6410              		.loc 1 1537 0
 6411 00f2 4FF0FF03 		mov	r3, #255
 6412 00f6 3B74     		strb	r3, [r7, #16]
1538:../LSM9DS1_Driver.c **** 	while(!I2C001_WriteData(&I2C001_Handle0,&data5))
 6413              		.loc 1 1538 0
 6414 00f8 01E0     		b	.L263
 6415              	.L264:
1539:../LSM9DS1_Driver.c **** 	{
1540:../LSM9DS1_Driver.c **** 		flushFIFO();
 6416              		.loc 1 1540 0
 6417 00fa FFF7FEFF 		bl	flushFIFO
 6418              	.L263:
1538:../LSM9DS1_Driver.c **** 	while(!I2C001_WriteData(&I2C001_Handle0,&data5))
 6419              		.loc 1 1538 0 discriminator 1
 6420 00fe 07F11003 		add	r3, r7, #16
 6421 0102 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 6422 0106 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 6423 010a 1946     		mov	r1, r3
 6424 010c FFF7FEFF 		bl	I2C001_WriteData
 6425 0110 0346     		mov	r3, r0
 6426 0112 002B     		cmp	r3, #0
 6427 0114 F1D0     		beq	.L264
1541:../LSM9DS1_Driver.c **** 	}
1542:../LSM9DS1_Driver.c **** 
1543:../LSM9DS1_Driver.c **** 	delay(DELAY);
 6428              		.loc 1 1543 0
 6429 0116 4FF06400 		mov	r0, #100
 6430 011a FFF7FEFF 		bl	delay
1544:../LSM9DS1_Driver.c **** 
1545:../LSM9DS1_Driver.c **** 	int k = 0;
 6431              		.loc 1 1545 0
 6432 011e 4FF00003 		mov	r3, #0
 6433 0122 7B62     		str	r3, [r7, #36]
1546:../LSM9DS1_Driver.c **** 	uint16_t bufferToRead = 0;
 6434              		.loc 1 1546 0
 6435 0124 4FF00003 		mov	r3, #0
 6436 0128 FB81     		strh	r3, [r7, #14]	@ movhi
1547:../LSM9DS1_Driver.c **** 	if(I2C001_ReadData(&I2C001_Handle0,&bufferToRead))
 6437              		.loc 1 1547 0
 6438 012a 07F10E03 		add	r3, r7, #14
 6439 012e 40F20000 		movw	r0, #:lower16:I2C001_Handle0
 6440 0132 C0F20000 		movt	r0, #:upper16:I2C001_Handle0
 6441 0136 1946     		mov	r1, r3
 6442 0138 FFF7FEFF 		bl	I2C001_ReadData
 6443 013c 0346     		mov	r3, r0
 6444 013e 002B     		cmp	r3, #0
 6445 0140 04D0     		beq	.L265
1548:../LSM9DS1_Driver.c **** 	{
1549:../LSM9DS1_Driver.c **** 		k++;
 6446              		.loc 1 1549 0
 6447 0142 7B6A     		ldr	r3, [r7, #36]
 6448 0144 03F10103 		add	r3, r3, #1
 6449 0148 7B62     		str	r3, [r7, #36]
 6450 014a 03E0     		b	.L266
 6451              	.L265:
1550:../LSM9DS1_Driver.c **** 	}
1551:../LSM9DS1_Driver.c **** 	else
1552:../LSM9DS1_Driver.c **** 	{
1553:../LSM9DS1_Driver.c **** 		k--;
 6452              		.loc 1 1553 0
 6453 014c 7B6A     		ldr	r3, [r7, #36]
 6454 014e 03F1FF33 		add	r3, r3, #-1
 6455 0152 7B62     		str	r3, [r7, #36]
 6456              	.L266:
1554:../LSM9DS1_Driver.c **** 	}
1555:../LSM9DS1_Driver.c **** 
1556:../LSM9DS1_Driver.c **** 	delay(DELAY);
 6457              		.loc 1 1556 0
 6458 0154 4FF06400 		mov	r0, #100
 6459 0158 FFF7FEFF 		bl	delay
1557:../LSM9DS1_Driver.c **** 	*buffer = (uint8_t)bufferToRead;
 6460              		.loc 1 1557 0
 6461 015c FB89     		ldrh	r3, [r7, #14]
 6462 015e DAB2     		uxtb	r2, r3
 6463 0160 3B68     		ldr	r3, [r7, #0]
 6464 0162 1A70     		strb	r2, [r3, #0]
1558:../LSM9DS1_Driver.c **** 
1559:../LSM9DS1_Driver.c **** }
 6465              		.loc 1 1559 0
 6466 0164 07F12807 		add	r7, r7, #40
 6467 0168 BD46     		mov	sp, r7
 6468 016a 80BD     		pop	{r7, pc}
 6469              		.cfi_endproc
 6470              	.LFE183:
 6472              		.bss
 6473              	whichDevice.9577:
 6474 0008 00       		.space	1
 6475              	whichByte.9576:
 6476 0009 00       		.space	1
 6477 000a 0000     		.align	2
 6478              	stageOfReading.9575:
 6479 000c 00000000 		.space	4
 6480              		.text
 6481              	.Letext0:
 6482              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 6483              		.file 3 "../LSM9DS1_Types.h"
 6484              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 6485              		.file 5 "C:\\DAVE3_workspace\\mojWorkspace\\BachelorLSM9DS1\\Dave\\Generated\\inc\\DAVESupport/../
 6486              		.file 6 "C:\\DAVE3_workspace\\mojWorkspace\\BachelorLSM9DS1\\Dave\\Generated\\inc\\DAVESupport/../
 6487              		.file 7 "C:\\DAVE3_workspace\\mojWorkspace\\BachelorLSM9DS1\\Dave\\Generated\\inc\\DAVESupport/../
 6488              		.file 8 "C:\\DAVE3_workspace\\mojWorkspace\\BachelorLSM9DS1\\Dave\\Generated\\inc\\DAVESupport/../
 6489              		.file 9 "../LSM9DS1_Driver.h"
 6490              		.file 10 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 6491              		.file 11 "C:\\DAVE3_workspace\\mojWorkspace\\BachelorLSM9DS1\\Dave\\Generated\\inc\\DAVESupport/..
DEFINED SYMBOLS
                            *ABS*:00000000 LSM9DS1_Driver.c
                            *COM*:00000004 TimerId
                            *COM*:00000004 Status
                            *COM*:00000004 WriteTimerId
                            *COM*:00000004 WriteTimerStatus
                            *COM*:00000004 TimerIdReadBytes
                            *COM*:00000004 StatusReadBytes
                            *COM*:00000028 settings
                            *COM*:0000000c gBias
                            *COM*:0000000c aBias
                            *COM*:0000000c mBias
                            *COM*:00000006 gBiasRaw
                            *COM*:00000006 aBiasRaw
                            *COM*:00000006 mBiasRaw
                            *COM*:00000001 _autoCalc
                            *COM*:00000001 _mAddress
                            *COM*:00000001 _xgAddress
                            *COM*:00000004 gRes
                            *COM*:00000004 aRes
                            *COM*:00000004 mRes
                            *COM*:00000002 gx
                            *COM*:00000002 gy
                            *COM*:00000002 gz
                            *COM*:00000002 ax
                            *COM*:00000002 ay
                            *COM*:00000002 az
                            *COM*:00000002 mx
                            *COM*:00000002 my
                            *COM*:00000002 mz
                            *COM*:00000002 temperature
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:53     .bss:00000000 TimerIdReadMeasurements
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:50     .bss:00000000 $d
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:60     .data:00000000 StatusTimerReadMeasurements
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:57     .data:00000000 $d
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:65     .data:00000004 readingAllowed
                            *COM*:00000258 pomiaryAccel
                            *COM*:00000017 adrAndData
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:74     .bss:00000004 counter
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:81     .data:00000008 magSensitivity
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:87     .text.startMeasurements:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:92     .text.startMeasurements:00000000 startMeasurements
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:6049   .text.timerHandlerReceiveOneMeasurementEachSensor:00000000 timerHandlerReceiveOneMeasurementEachSensor
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:131    .text.readAndSendMeasurements:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:136    .text.readAndSendMeasurements:00000000 readAndSendMeasurements
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4709   .text.calcAccel:00000000 calcAccel
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4655   .text.calcGyro:00000000 calcGyro
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:457    .text.initAdrAndSubAdr:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:462    .text.initAdrAndSubAdr:00000000 initAdrAndSubAdr
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:509    .text.initLSM9DS1:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:514    .text.initLSM9DS1:00000000 initLSM9DS1
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:577    .text.init:00000000 init
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:857    .text.begin:00000000 begin
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:572    .text.init:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:852    .text.begin:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:966    .text.constrainScales:00000000 constrainScales
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1126   .text.calcgRes:00000000 calcgRes
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1210   .text.calcmRes:00000000 calcmRes
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1168   .text.calcaRes:00000000 calcaRes
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1072   .text.initI2C:00000000 initI2C
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1099   .text.initSPI:00000000 initSPI
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1533   .text.mReadByte:00000000 mReadByte
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1584   .text.xgReadByte:00000000 xgReadByte
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1635   .text.initGyro:00000000 initGyro
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2031   .text.initAccel:00000000 initAccel
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2211   .text.initMag:00000000 initMag
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:961    .text.constrainScales:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1067   .text.initI2C:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1094   .text.initSPI:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1121   .text.calcgRes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1158   .text.calcgRes:00000030 $d
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1163   .text.calcaRes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1200   .text.calcaRes:00000030 $d
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1205   .text.calcmRes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1235   .text.calcmRes:00000020 $d
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1250   .text.calcmRes:00000054 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1297   .text.delay:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1302   .text.delay:00000000 delay
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1349   .text.I2CreadByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1354   .text.I2CreadByte:00000000 I2CreadByte
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1528   .text.mReadByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1579   .text.xgReadByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1630   .text.initGyro:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1858   .text.xgWriteByte:00000000 xgWriteByte
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1853   .text.xgWriteByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1909   .text.I2CwriteByte:00000000 I2CwriteByte
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:1904   .text.I2CwriteByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2026   .text.initAccel:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2206   .text.initMag:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2376   .text.mWriteByte:00000000 mWriteByte
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2371   .text.mWriteByte:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2423   .text.enableFIFO:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2428   .text.enableFIFO:00000000 enableFIFO
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2480   .text.setFIFO:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2485   .text.setFIFO:00000000 setFIFO
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2536   .text.calibrate:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2541   .text.calibrate:00000000 calibrate
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2900   .text.readGyro1:00000000 readGyro1
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:3063   .text.readAccel1:00000000 readAccel1
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2788   .text.xgReadBytes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2793   .text.xgReadBytes:00000000 xgReadBytes
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:3434   .text.I2CreadBytes:00000000 I2CreadBytes
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2863   .text.SPIreadBytes:00000000 SPIreadBytes
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2858   .text.SPIreadBytes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:2895   .text.readGyro1:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:3058   .text.readAccel1:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:3213   .text.readAccelToSensor:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:3218   .text.readAccelToSensor:00000000 readAccelToSensor
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:3429   .text.I2CreadBytes:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:3649   .text.magAvailable:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:3654   .text.magAvailable:00000000 magAvailable
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:3696   .text.readMag1:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:3701   .text.readMag1:00000000 readMag1
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:3791   .text.calibrateMag:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:3796   .text.calibrateMag:00000000 calibrateMag
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4029   .text.calcMag:00000000 calcMag
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4083   .text.magOffset:00000000 magOffset
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4024   .text.calcMag:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4078   .text.magOffset:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4150   .text.accelAvailable:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4155   .text.accelAvailable:00000000 accelAvailable
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4190   .text.gyroAvailable:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4195   .text.gyroAvailable:00000000 gyroAvailable
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4231   .text.tempAvailable:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4236   .text.tempAvailable:00000000 tempAvailable
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4272   .text.readAccel:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4277   .text.readAccel:00000000 readAccel
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4375   .text.readMag:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4380   .text.readMag:00000000 readMag
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4461   .text.readTemp:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4466   .text.readTemp:00000000 readTemp
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4547   .text.readGyro:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4552   .text.readGyro:00000000 readGyro
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4650   .text.calcGyro:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4704   .text.calcAccel:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4758   .text.setGyroScale:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4763   .text.setGyroScale:00000000 setGyroScale
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4846   .text.setAccelScale:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4851   .text.setAccelScale:00000000 setAccelScale
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4947   .text.setMagScale:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:4952   .text.setMagScale:00000000 setMagScale
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5048   .text.setGyroODR:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5053   .text.setGyroODR:00000000 setGyroODR
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5117   .text.setAccelODR:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5122   .text.setAccelODR:00000000 setAccelODR
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5186   .text.setMagODR:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5191   .text.setMagODR:00000000 setMagODR
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5248   .text.configInt:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5253   .text.configInt:00000000 configInt
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5328   .text.configInactivity:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5333   .text.configInactivity:00000000 configInactivity
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5390   .text.getInactivity:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5395   .text.getInactivity:00000000 getInactivity
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5432   .text.configAccelInt:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5437   .text.configAccelInt:00000000 configAccelInt
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5483   .text.configAccelThs:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5488   .text.configAccelThs:00000000 configAccelThs
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5543   .text.getAccelIntSrc:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5548   .text.getAccelIntSrc:00000000 getAccelIntSrc
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5593   .text.configGyroInt:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5598   .text.configGyroInt:00000000 configGyroInt
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5655   .text.configGyroThs:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5660   .text.configGyroThs:00000000 configGyroThs
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5737   .text.getGyroIntSrc:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5742   .text.getGyroIntSrc:00000000 getGyroIntSrc
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5787   .text.configMagInt:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5792   .text.configMagInt:00000000 configMagInt
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5859   .text.configMagThs:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5864   .text.configMagThs:00000000 configMagThs
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5905   .text.getMagIntSrc:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5910   .text.getMagIntSrc:00000000 getMagIntSrc
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5955   .text.sleepGyro:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:5960   .text.sleepGyro:00000000 sleepGyro
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:6012   .text.getFIFOSamples:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:6017   .text.getFIFOSamples:00000000 getFIFOSamples
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:6044   .text.timerHandlerReceiveOneMeasurementEachSensor:00000000 $t
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:6473   .bss:00000008 whichDevice.9577
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:6475   .bss:00000009 whichByte.9576
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:6281   .text.receiveByte:00000000 receiveByte
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:6478   .bss:0000000c stageOfReading.9575
C:\Users\Mateusz\AppData\Local\Temp\ccUss3Bt.s:6276   .text.receiveByte:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.LSM9DS1_Driver.h.9.225085f752270af24a0df342ed7d3479
                           .group:00000000 wm4.LSM9DS1_Registers.h.9.72af380d6da01de607f77d245bf32825
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.82a8db895dc146da001475dd68223522
                           .group:00000000 wm4.SYSTM001.h.64.6ecb31c49bc3e7691644fdcdfc11b5cd
                           .group:00000000 wm4.Usic.h.58.a3e6728d1d20f5a5e52f483a06098d7b
                           .group:00000000 wm4.I2C001.h.97.5277d52889d6c741e048ea45ee1277b5
                           .group:00000000 wm4.I2C001_Conf.h.58.e471e519f7471a50493b6f4fe912ee0d
                           .group:00000000 wm4.NVIC002_Conf.h.63.74cd705315f747fa337668af570b2988
                           .group:00000000 wm4.stdio.h.31.f48311dde756a2aec27351b58a280fb9
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.inttypes.h.14.da8ab5c14bc76feb3bf694db03b8ec46
                           .group:00000000 wm4.inttypes.h.20.54b7c434bb63171d5145327a6d429f51
                           .group:00000000 wm4.math.h.35.cc9264b0ced3bd063c5784e64e89cf51
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230

UNDEFINED SYMBOLS
SYSTM001_CreateTimer
SYSTM001_StartTimer
I2C001_Handle0
I2C001_WriteData
I2C001_ReadData
__aeabi_f2d
__aeabi_ddiv
__aeabi_d2iz
__aeabi_d2f
ceil
round
clearErrorFlags
flushFIFO
